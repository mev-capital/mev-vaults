[{"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/index.tsx":"1","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/functions/theme.ts":"2","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/App.tsx":"3","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/config.ts":"4","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/containers/Main.tsx":"5","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/containers/Uzd.tsx":"6","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/containers/FinanceOperations.tsx":"7","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Preloader/Preloader.tsx":"8","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/index.ts":"9","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/SushiProvider/index.ts":"10","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/index.ts":"11","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Modals/index.ts":"12","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/utils.js":"13","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/constants.js":"14","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/functions/pools.ts":"15","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/formatbalance.ts":"16","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/logger.ts":"17","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/zunami.ts":"18","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/erc20.ts":"19","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useLpPrice.ts":"20","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useBalanceOf.ts":"21","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useCrossChainBalances.ts":"22","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/usePendingOperations.ts":"23","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useEagerConnect.ts":"24","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useOldBscBalance.ts":"25","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useSupportedChain.ts":"26","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/usePausedContract.ts":"27","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdBalance.ts":"28","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useSushi.ts":"29","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdTotalSupply.ts":"30","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdLpPrice.ts":"31","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUserBalances.ts":"32","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useSlippage.ts":"33","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/api/api.ts":"34","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/InfoBlock/InfoBlock.tsx":"35","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/BalanceInfoBlock/BalanceInfoBlock.tsx":"36","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ClickableHeader/ClickableHeader.tsx":"37","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/BscMigrationModal/BscMigrationModal.tsx":"38","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/UnsupportedChain/UnsupportedChain.tsx":"39","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/BscMigrationModal2/BscMigrationModal2.tsx":"40","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/EthMergeWarningModal/EthMergeWarningModal.tsx":"41","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Header/Header.tsx":"42","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/PendingBalance/PendingBalance.tsx":"43","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/SideBar/MobileSidebar/MobileSidebar.tsx":"44","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/SideBar/SideBar.tsx":"45","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ApyChart/ApyChart.tsx":"46","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/WalletStatus/WalletStatus.tsx":"47","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Chart/Chart.tsx":"48","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/UzdMigrationModal/UzdMigrationModal.tsx":"49","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/NetworkSelector/NetworkSelector.tsx":"50","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/Form.tsx":"51","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/WelcomeCarousel/WelcomeCarousel.tsx":"52","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/WithdrawOptions/WithdrawOptions.tsx":"53","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/TransactionHistory/TransactionHistory.tsx":"54","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/context.ts":"55","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/SushiProvider/SushiProvider.tsx":"56","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/EthereumExplorerProvider.tsx":"57","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/TransactionsProvider.tsx":"58","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Modals/Modals.tsx":"59","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useWallet.ts":"60","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useGzlpAllowance.ts":"61","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUnstake.ts":"62","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useStake.ts":"63","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useApprove.ts":"64","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useAllowance.ts":"65","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/functions/screen.ts":"66","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/WalletsModal/WalletsModal.tsx":"67","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useOnlineState.ts":"68","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Header/NavMenu/NavMenu.tsx":"69","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/DirectAction/DirectAction.tsx":"70","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/ActionSelector/ActionSelector.tsx":"71","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/Input/Input.tsx":"72","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/FastDepositForm/FastDepositForm.tsx":"73","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ThemeSwitcher/ThemeSwitcher.tsx":"74","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ErrorToast/ErrorToast.tsx":"75","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/reducer.ts":"76","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/NetworkConnector.ts":"77","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useEthExplorer.ts":"78","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/FastDepositForm/Input/Input.tsx":"79","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/index.js":"80","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/Sushi.js":"81","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/evm.js":"82","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/accounts.js":"83","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/contracts.js":"84","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/types.js":"85"},{"size":370,"mtime":1671602856205,"results":"86","hashOfConfig":"87"},{"size":372,"mtime":1671602856205,"results":"88","hashOfConfig":"87"},{"size":2598,"mtime":1671602856201,"results":"89","hashOfConfig":"87"},{"size":1100,"mtime":1671602856205,"results":"90","hashOfConfig":"87"},{"size":16278,"mtime":1671631572361,"results":"91","hashOfConfig":"87"},{"size":56079,"mtime":1671602856205,"results":"92","hashOfConfig":"87"},{"size":30501,"mtime":1671631864916,"results":"93","hashOfConfig":"87"},{"size":478,"mtime":1671602856205,"results":"94","hashOfConfig":"87"},{"size":63,"mtime":1671602856205,"results":"95","hashOfConfig":"87"},{"size":52,"mtime":1671602856205,"results":"96","hashOfConfig":"87"},{"size":98,"mtime":1671602856205,"results":"97","hashOfConfig":"87"},{"size":45,"mtime":1671602856205,"results":"98","hashOfConfig":"87"},{"size":10832,"mtime":1671602856205,"results":"99","hashOfConfig":"87"},{"size":1033,"mtime":1671602856205,"results":"100","hashOfConfig":"87"},{"size":2210,"mtime":1671632866498,"results":"101","hashOfConfig":"87"},{"size":1694,"mtime":1671602856205,"results":"102","hashOfConfig":"87"},{"size":951,"mtime":1671602856205,"results":"103","hashOfConfig":"87"},{"size":898,"mtime":1671602856205,"results":"104","hashOfConfig":"87"},{"size":2846,"mtime":1671602856205,"results":"105","hashOfConfig":"87"},{"size":2057,"mtime":1671602856205,"results":"106","hashOfConfig":"87"},{"size":1796,"mtime":1671602856205,"results":"107","hashOfConfig":"87"},{"size":2014,"mtime":1671602856205,"results":"108","hashOfConfig":"87"},{"size":3684,"mtime":1671602856205,"results":"109","hashOfConfig":"87"},{"size":672,"mtime":1671602856205,"results":"110","hashOfConfig":"87"},{"size":1945,"mtime":1671602856205,"results":"111","hashOfConfig":"87"},{"size":1308,"mtime":1671602856205,"results":"112","hashOfConfig":"87"},{"size":770,"mtime":1671602856205,"results":"113","hashOfConfig":"87"},{"size":1575,"mtime":1671602856205,"results":"114","hashOfConfig":"87"},{"size":205,"mtime":1671602856205,"results":"115","hashOfConfig":"87"},{"size":793,"mtime":1671602856205,"results":"116","hashOfConfig":"87"},{"size":1416,"mtime":1671602856205,"results":"117","hashOfConfig":"87"},{"size":3076,"mtime":1671602856205,"results":"118","hashOfConfig":"87"},{"size":1137,"mtime":1671602856205,"results":"119","hashOfConfig":"87"},{"size":2632,"mtime":1671602856201,"results":"120","hashOfConfig":"87"},{"size":2755,"mtime":1671602856201,"results":"121","hashOfConfig":"87"},{"size":4552,"mtime":1671602856201,"results":"122","hashOfConfig":"87"},{"size":666,"mtime":1671602856201,"results":"123","hashOfConfig":"87"},{"size":7279,"mtime":1671602856201,"results":"124","hashOfConfig":"87"},{"size":1778,"mtime":1671602856205,"results":"125","hashOfConfig":"87"},{"size":7413,"mtime":1671602856201,"results":"126","hashOfConfig":"87"},{"size":1747,"mtime":1671602856201,"results":"127","hashOfConfig":"87"},{"size":4598,"mtime":1671631128107,"results":"128","hashOfConfig":"87"},{"size":459,"mtime":1671602856201,"results":"129","hashOfConfig":"87"},{"size":1327,"mtime":1671602856205,"results":"130","hashOfConfig":"87"},{"size":7791,"mtime":1671602856205,"results":"131","hashOfConfig":"87"},{"size":3619,"mtime":1671602856201,"results":"132","hashOfConfig":"87"},{"size":5807,"mtime":1671602856205,"results":"133","hashOfConfig":"87"},{"size":2462,"mtime":1671602856201,"results":"134","hashOfConfig":"87"},{"size":4885,"mtime":1671602856205,"results":"135","hashOfConfig":"87"},{"size":6561,"mtime":1671602856201,"results":"136","hashOfConfig":"87"},{"size":30924,"mtime":1671602856201,"results":"137","hashOfConfig":"87"},{"size":45151,"mtime":1671602856205,"results":"138","hashOfConfig":"87"},{"size":6314,"mtime":1671602856201,"results":"139","hashOfConfig":"87"},{"size":8898,"mtime":1671602856205,"results":"140","hashOfConfig":"87"},{"size":340,"mtime":1671602856205,"results":"141","hashOfConfig":"87"},{"size":2066,"mtime":1671602856205,"results":"142","hashOfConfig":"87"},{"size":1338,"mtime":1671602856205,"results":"143","hashOfConfig":"87"},{"size":1421,"mtime":1671602856205,"results":"144","hashOfConfig":"87"},{"size":1593,"mtime":1671602856205,"results":"145","hashOfConfig":"87"},{"size":67,"mtime":1671602856205,"results":"146","hashOfConfig":"87"},{"size":1585,"mtime":1671602856205,"results":"147","hashOfConfig":"87"},{"size":1882,"mtime":1671602856205,"results":"148","hashOfConfig":"87"},{"size":1862,"mtime":1671602856205,"results":"149","hashOfConfig":"87"},{"size":1898,"mtime":1671602856205,"results":"150","hashOfConfig":"87"},{"size":5296,"mtime":1671602856205,"results":"151","hashOfConfig":"87"},{"size":242,"mtime":1671602856205,"results":"152","hashOfConfig":"87"},{"size":5216,"mtime":1671602856205,"results":"153","hashOfConfig":"87"},{"size":426,"mtime":1671602856205,"results":"154","hashOfConfig":"87"},{"size":3256,"mtime":1671631632948,"results":"155","hashOfConfig":"87"},{"size":4206,"mtime":1671602856201,"results":"156","hashOfConfig":"87"},{"size":4066,"mtime":1671602856201,"results":"157","hashOfConfig":"87"},{"size":2619,"mtime":1671602856201,"results":"158","hashOfConfig":"87"},{"size":13467,"mtime":1671602856201,"results":"159","hashOfConfig":"87"},{"size":5494,"mtime":1671602856205,"results":"160","hashOfConfig":"87"},{"size":559,"mtime":1671602856201,"results":"161","hashOfConfig":"87"},{"size":2326,"mtime":1671602856205,"results":"162","hashOfConfig":"87"},{"size":4694,"mtime":1671602856205,"results":"163","hashOfConfig":"87"},{"size":230,"mtime":1671602856205,"results":"164","hashOfConfig":"87"},{"size":2879,"mtime":1671602856201,"results":"165","hashOfConfig":"87"},{"size":212,"mtime":1671602856205,"results":"166","hashOfConfig":"87"},{"size":8095,"mtime":1671602856205,"results":"167","hashOfConfig":"87"},{"size":3936,"mtime":1671602856205,"results":"168","hashOfConfig":"87"},{"size":308,"mtime":1671602856205,"results":"169","hashOfConfig":"87"},{"size":8721,"mtime":1671602856205,"results":"170","hashOfConfig":"87"},{"size":98,"mtime":1671602856205,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"1tz6rxg",{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"174"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"174"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"174"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"174"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"174"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"174"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"174"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"174"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"298","usedDeprecatedRules":"174"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"174"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"174"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"174"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/index.tsx",[],["359","360"],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/functions/theme.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/App.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/config.ts",["361"],"import dotenv from 'dotenv';\n\ndotenv.config();\n\ntype NETWORK = 'mainnet';\n\ntype Config = {\n    INFURA_URL: string;\n    CHAIN_ID: number;\n    NETWORK: NETWORK;\n};\n\nlet NETWORK = process.env.REACT_APP_NETWORK;\n\nif (!NETWORK) {\n    NETWORK = 'mainnet';\n}\n\nexport const getNetworkConfig = (NETWORK: string): Config => {\n    let CHAIN_ID;\n\n    if (NETWORK === 'mainnet') {\n        CHAIN_ID = 1;\n    } else {\n        throw new Error(`Unknown ${NETWORK}, permitted only mainnet or mainnet`);\n    }\n\n    if (window.ethereum && window.ethereum.chainId === '0x38') {\n        return {\n            INFURA_URL: `https://bscrpc.com`,\n            CHAIN_ID: 56,\n            NETWORK: 'mainnet',\n        };\n    }\n\n    if (window.ethereum && window.ethereum.chainId === '0x89') {\n        return {\n            INFURA_URL: `https://polygon-rpc.com`,\n            CHAIN_ID: 137,\n            NETWORK: 'mainnet',\n        };\n    }\n\n    return {\n        INFURA_URL: `https://eth-mainnet.alchemyapi.io/v2/Yh5zNTgJkqrOIqLtfkZBGIPecNPDQ1ON`,\n        CHAIN_ID,\n        NETWORK,\n    };\n};\n\nexport default getNetworkConfig(NETWORK);\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/containers/Main.tsx",["362","363"],"import React, { useEffect, useState, Suspense, lazy } from 'react';\nimport { InfoBlock } from '../components/InfoBlock/InfoBlock';\nimport { BalanceInfoBlock } from '../components/BalanceInfoBlock/BalanceInfoBlock';\nimport { ClickableHeader } from '../components/ClickableHeader/ClickableHeader';\nimport './Main.scss';\nimport { getBalanceNumber } from '../utils/formatbalance';\nimport useLpPrice from '../hooks/useLpPrice';\nimport useBalanceOf from '../hooks/useBalanceOf';\nimport useCrossChainBalances from '../hooks/useCrossChainBalances';\nimport useFetch from 'react-fetch-hook';\nimport {\n    zunamiInfoUrl,\n    getHistoricalApyUrl,\n    getTotalIncomeUrl,\n    getActiveStratsUrl,\n} from '../api/api';\nimport { BigNumber } from 'bignumber.js';\nimport usePendingOperations from '../hooks/usePendingOperations';\nimport { PoolInfo, poolDataToChartData } from '../functions/pools';\nimport { Preloader } from '../components/Preloader/Preloader';\nimport { useWallet } from 'use-wallet';\nimport useEagerConnect from '../hooks/useEagerConnect';\nimport { BscMigrationModal } from '../components/BscMigrationModal/BscMigrationModal';\nimport { BscMigrationModal2 } from '../components/BscMigrationModal2/BscMigrationModal2';\nimport useOldBscBalance from '../hooks/useOldBscBalance';\nimport { UnsupportedChain } from '../components/UnsupportedChain/UnsupportedChain';\nimport useSupportedChain from '../hooks/useSupportedChain';\nimport { log } from '../utils/logger';\nimport usePausedContract from '../hooks/usePausedContract';\nimport { EthMergeWarningModal } from '../components/EthMergeWarningModal/EthMergeWarningModal';\nimport useUzdBalance from '../hooks/useUzdBalance';\nimport { isBSC, isETH, isPLG } from '../utils/zunami';\n\nconst Header = lazy(() =>\n    import('../components/Header/Header').then((module) => ({ default: module.Header }))\n);\n\nconst MobileSidebar = lazy(() =>\n    import('../components/SideBar/MobileSidebar/MobileSidebar').then((module) => ({\n        default: module.MobileSidebar,\n    }))\n);\n\nconst PendingBalance = lazy(() =>\n    import('../components/PendingBalance/PendingBalance').then((module) => ({\n        default: module.PendingBalance,\n    }))\n);\n\nconst SideBar = lazy(() =>\n    import('../components/SideBar/SideBar').then((module) => ({ default: module.SideBar }))\n);\n\nconst WalletStatus = lazy(() =>\n    import('../components/WalletStatus/WalletStatus').then((module) => ({\n        default: module.WalletStatus,\n    }))\n);\n\nconst ApyChart = lazy(() =>\n    import('../components/ApyChart/ApyChart').then((module) => ({ default: module.ApyChart }))\n);\n\nconst Chart = lazy(() =>\n    import('../components/Chart/Chart').then((module) => ({ default: module.Chart }))\n);\n\ninterface ZunamiInfo {\n    tvl: BigNumber;\n    apy: number;\n    apr: number;\n}\n\ninterface ZunamiInfoFetch {\n    data: any;\n    isLoading: boolean;\n    error: any;\n}\n\ninterface PoolsStats {\n    pools: Array<PoolInfo>;\n}\n\nexport const Main = (): JSX.Element => {\n    useEffect(() => {\n        log(`🏁 Session started ${new Date().toString()}`);\n    }, []);\n\n    const { account, connect, ethereum, chainId } = useWallet();\n    useEagerConnect(account ? account : '', connect, ethereum);\n    const isContractPaused = usePausedContract();\n    const lpPrice = useLpPrice();\n    const balance = useBalanceOf();\n    const oldBscBalance = useOldBscBalance();\n    const balances = useCrossChainBalances(lpPrice);\n    const uzdBalance = useUzdBalance();\n    let activeBalance = balances[0];\n\n    if (isBSC(chainId)) {\n        activeBalance = balances[1];\n    }\n\n    if (isPLG(chainId)) {\n        activeBalance = balances[2];\n    }\n\n    const userMaxWithdraw =\n        lpPrice.toNumber() > 0 && balance.toNumber() !== -1\n            ? lpPrice.multipliedBy(activeBalance.value)\n            : new BigNumber(-1);\n\n    const { isLoading: isZunLoading, data: zunData } = useFetch(zunamiInfoUrl) as ZunamiInfoFetch;\n\n    const zunamiInfo = zunData as ZunamiInfo;\n\n    const { data: activeStratsStat } = useFetch(getActiveStratsUrl());\n    const poolStats = activeStratsStat as PoolsStats;\n\n    const poolBestAprDaily = zunamiInfo ? zunamiInfo.apr / 100 / 365 : 0;\n    const poolBestAprMonthly = zunamiInfo ? (zunamiInfo.apr / 100 / 365) * 30 : 0;\n    const poolBestApyYearly = zunamiInfo ? (zunamiInfo.apy / 100 / 365) * 30 * 12 : 0;\n    const dailyProfit =\n        userMaxWithdraw.toNumber() === -1\n            ? 0\n            : getBalanceNumber(userMaxWithdraw).toNumber() * poolBestAprDaily;\n    const monthlyProfit =\n        userMaxWithdraw.toNumber() === -1\n            ? 0\n            : getBalanceNumber(userMaxWithdraw).toNumber() * poolBestAprMonthly;\n    const yearlyProfit =\n        userMaxWithdraw.toNumber() === -1\n            ? 0\n            : getBalanceNumber(userMaxWithdraw).toNumber() * poolBestApyYearly;\n\n    const [totalIncome, setTotalIncome] = useState('n/a');\n\n    useEffect(() => {\n        let activeBalance = balances[0].value;\n\n        if (isBSC(chainId)) {\n            activeBalance = balances[1].value;\n        }\n\n        if (isPLG(chainId)) {\n            activeBalance = balances[2].value;\n        }\n\n        if (!account || activeBalance.toNumber() === -1 || !chainId) {\n            return;\n        }\n\n        const getTotalIncome = async () => {\n            let response = null;\n\n            let totalIncomeBalance = activeBalance;\n\n            // if user has minted UZD\n            // if (uzdBalance.toNumber()) {\n            //     totalIncomeBalance = totalIncomeBalance.plus(uzdBalance.dividedBy(lpPrice))\n            // }\n\n            try {\n                const totalIncomeUrl =\n                    getTotalIncomeUrl(account, totalIncomeBalance.toString(), chainId);\n\n                response = await fetch(totalIncomeUrl);\n\n                const data = await response.json();\n                setTotalIncome(`$${data.totalIncome}`);\n\n                log(`Total income. Requesting (${totalIncomeUrl})`)\n                log(`Total income. Value set to: ${data.totalIncome}`);\n            } catch (error: any) {\n                log(`❗️ Error fetching total income: ${error.message}`);\n            }\n        };\n\n        getTotalIncome();\n    }, [account, balances, chainId, lpPrice, uzdBalance]);\n\n    const chartData =\n        poolStats && poolStats.pools && zunamiInfo\n            ? poolDataToChartData(poolStats.pools, zunamiInfo.tvl)\n            : [];\n\n    const [histApyPeriod, setHistApyPeriod] = useState('week');\n    const [histApyData, setHistApyData] = useState([]);\n\n    useEffect(() => {\n        fetch(getHistoricalApyUrl(histApyPeriod))\n            .then((response) => {\n                return response.json();\n            })\n            .then((items) => {\n                setHistApyData(items.data);\n            });\n    }, [histApyPeriod]);\n\n    const pendingOperations = usePendingOperations();\n\n    const pendingWithdraw =\n        lpPrice.toNumber() > 0 && pendingOperations.withdraw.toNumber() !== -1\n            ? lpPrice.multipliedBy(pendingOperations.withdraw)\n            : new BigNumber(0);\n\n    const pdElement = (\n        <div className=\"d-flex\">\n            <PendingBalance\n                val={`PD: $${getBalanceNumber(\n                    pendingOperations.deposit,\n                    isETH(chainId) || isPLG(chainId) ? 6 : 18\n                ).toFixed(2)}`}\n                hint={`You have $${pendingOperations.deposit} in pending deposit`}\n            />\n            <PendingBalance\n                val={`PW: $${getBalanceNumber(pendingWithdraw).toFixed(2)}`}\n                hint={`You have $${pendingWithdraw} in pending withdraw`}\n            />\n        </div>\n    );\n\n    // v1.1 migration modal\n    const [showMigrationModal, setShowMigrationModal] = useState(false);\n    // v1.2 migration modal\n    const [showMigrationModal2, setShowMigrationModal2] = useState(false);\n    // ETH merge modal\n    const [showMergeModal, setShowMergeModal] = useState(false);\n\n    useEffect(() => {\n        setShowMergeModal(isContractPaused);\n    }, [isContractPaused]);\n\n    useEffect(() => {\n        if (oldBscBalance[0].toNumber() > 0) {\n            setShowMigrationModal(true);\n        } else {\n            setShowMigrationModal(false);\n        }\n\n        if (oldBscBalance[1].toNumber() > 0) {\n            log(\n                `Migration from BSC gateway 1.1 to 1.2 needed. Old balance is ${oldBscBalance[1].toNumber()}`\n            );\n            setShowMigrationModal2(true);\n        } else {\n            setShowMigrationModal2(false);\n        }\n    }, [oldBscBalance, chainId, account]);\n\n    const supportedChain = useSupportedChain();\n\n    return (\n        <Suspense fallback={<Preloader onlyIcon={true} />}>\n            <React.Fragment>\n                <Header />\n                <div className=\"container\">\n                    <EthMergeWarningModal show={showMergeModal} />\n                    {!supportedChain && (\n                        <UnsupportedChain text=\"You're using unsupported chain. Please, switch either to Ethereum or Binance network.\" />\n                    )}\n                    <BscMigrationModal\n                        show={showMigrationModal}\n                        balance={oldBscBalance[0]}\n                        lpPrice={lpPrice}\n                        onHide={() => {\n                            setShowMigrationModal(false);\n                        }}\n                    />\n                    <BscMigrationModal2\n                        show={showMigrationModal2}\n                        balance={oldBscBalance[0].plus(oldBscBalance[1])}\n                        lpPrice={lpPrice}\n                        onHide={() => {\n                            setShowMigrationModal2(false);\n                        }}\n                    />\n                    <div className=\"row main-row h-100\">\n                        <div className=\"col content-col dashboard-col\">\n                            <WalletStatus />\n                            <ClickableHeader name=\"Dashboard\" icon=\"dashboard\" />\n                            <div className={'first-row'}>\n                                <BalanceInfoBlock\n                                    title=\"Balance\"\n                                    description={\n                                        <div>\n                                            {account && userMaxWithdraw.toNumber() === -1 && (\n                                                <Preloader onlyIcon={true} />\n                                            )}\n                                            {!account && 'n/a'}\n                                            {account &&\n                                                userMaxWithdraw.toNumber() !== -1 &&\n                                                `$ ${getBalanceNumber(userMaxWithdraw)\n                                                    .toNumber()\n                                                    .toLocaleString('en')}`}\n                                        </div>\n                                    }\n                                    withColor={true}\n                                    isStrategy={false}\n                                    colorfulBg={true}\n                                    balances={balances}\n                                    lpPrice={lpPrice}\n                                />\n                                <InfoBlock\n                                    title=\"Pending Deposits / Withdraws\"\n                                    isLoading={isZunLoading}\n                                    withColor={true}\n                                    isStrategy={false}\n                                    colorfulBg={true}\n                                    secondaryRow={pdElement}\n                                    hint={\n                                        <span>\n                                            {`Funds passing through the ${\n                                                chainId === 1\n                                                    ? 'Transaction Streamlining Mechanism and'\n                                                    : 'cross chain'\n                                            } will be credited within 24 hours`}\n                                        </span>\n                                    }\n                                />\n                                <InfoBlock\n                                    title=\"Total Income\"\n                                    description={\n                                        <div>\n                                            {account && totalIncome === 'n/a' && (\n                                                <Preloader onlyIcon={true} />\n                                            )}\n                                            {!account && 'n/a'}\n                                            {account && totalIncome !== 'n/a' && totalIncome}\n                                        </div>\n                                    }\n                                    isLoading={isZunLoading}\n                                    withColor={true}\n                                    isStrategy={false}\n                                    colorfulBg={true}\n                                />\n                            </div>\n                            <div className=\"second-row\">\n                                <InfoBlock\n                                    title=\"Profit\"\n                                    description={\n                                        <div>\n                                            <span className=\"text-primary\">{`${\n                                                dailyProfit ? dailyProfit.toFixed(2) : 0\n                                            } USD`}</span>\n                                            <span> Daily&nbsp;&nbsp;</span>\n                                        </div>\n                                    }\n                                    withColor={false}\n                                    isStrategy={false}\n                                />\n                                <InfoBlock\n                                    title=\"&nbsp;\"\n                                    description={\n                                        <div>\n                                            <span className=\"text-primary\">{`${\n                                                monthlyProfit ? monthlyProfit.toFixed(2) : 0\n                                            } USD`}</span>\n                                            <span> Monthly</span>\n                                        </div>\n                                    }\n                                    withColor={false}\n                                    isStrategy={false}\n                                />\n                                <InfoBlock\n                                    title=\"&nbsp;\"\n                                    description={\n                                        <div>\n                                            <span className=\"text-primary\">{`${\n                                                yearlyProfit ? yearlyProfit.toFixed(2) : 0\n                                            } USD`}</span>\n                                            <span> Yearly</span>\n                                        </div>\n                                    }\n                                    withColor={false}\n                                    isStrategy={false}\n                                />\n                            </div>\n                            <div className=\"third-row\">\n                                <div className=\"strats-chart-col\">\n                                    <Chart data={chartData} />\n                                </div>\n                                <div className=\"hist-apy-col\">\n                                    <ApyChart\n                                        data={histApyData}\n                                        onRangeChange={(range: string) => {\n                                            setHistApyPeriod(range);\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        </Suspense>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/containers/Uzd.tsx",["364"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Header } from '../components/Header/Header';\nimport './Uzd.scss';\nimport { Container, Toast, ToastContainer } from 'react-bootstrap';\nimport { useWallet } from 'use-wallet';\nimport { InfoBlock } from '../components/InfoBlock/InfoBlock';\nimport useBalanceOf from '../hooks/useBalanceOf';\nimport useUzdBalance from '../hooks/useUzdBalance';\nimport useSushi from '../hooks/useSushi';\nimport useUzdTotalSupply from '../hooks/useUzdTotalSupply';\nimport useEagerConnect from '../hooks/useEagerConnect';\nimport { BIG_TEN, BIG_ZERO, getBalanceNumber, UZD_DECIMALS } from '../utils/formatbalance';\nimport useUzdLpPrice from '../hooks/useUzdLpPrice';\nimport BigNumber from 'bignumber.js';\nimport { getAllowance } from '../utils/erc20';\nimport { contractAddresses } from '../sushi/lib/constants';\nimport { approve, getMasterChefContract } from '../sushi/utils';\nimport { Preloader } from '../components/Preloader/Preloader';\nimport { log } from '../utils/logger';\nimport { ZunamiInfo, ZunamiInfoFetch } from '../components/SideBar/SideBar';\nimport { zunamiInfoUrl, curvePoolsApyUrl } from '../api/api';\nimport useFetch from 'react-fetch-hook';\nimport { UnsupportedChain } from '../components/UnsupportedChain/UnsupportedChain';\nimport { UzdMigrationModal } from '../components/UzdMigrationModal/UzdMigrationModal';\nimport { MobileSidebar } from '../components/SideBar/MobileSidebar/MobileSidebar';\nimport { networks } from '../components/NetworkSelector/NetworkSelector';\nimport { Tooltip, OverlayTrigger } from 'react-bootstrap';\n\ninterface CurvePoolInfo {\n    apy: number;\n    apyFormatted: string;\n    apyWeekly: number;\n    index: number;\n    poolAddress: string;\n    poolSymbol: string;\n}\n\nexport interface CurveInfoFetch {\n    data: any;\n    isLoading: boolean;\n    error: any;\n}\n\nfunction convertZlpToUzd(zlpAmount: BigNumber, lpPrice: BigNumber): BigNumber {\n    return zlpAmount.multipliedBy(lpPrice);\n}\n\nconst getFullDisplayBalance = (balance: BigNumber, decimals = 18, roundDown = false) => {\n    const newNumber = new BigNumber(balance);\n    return newNumber.dividedBy(BIG_TEN.pow(decimals)).decimalPlaces(2, 1).toString();\n};\n\nfunction convertUzdToZlp(uzdAmount: BigNumber, lpPrice: BigNumber): BigNumber {\n    return uzdAmount.dividedBy(lpPrice);\n}\n\nfunction formatUzd(sum: BigNumber) {\n    return sum.dividedBy(BIG_TEN.pow(UZD_DECIMALS)).decimalPlaces(2, 1).toString();\n}\n\nexport const formatBigNumberFull = (balance: BigNumber) => {\n    return balance.dividedBy(BIG_TEN.pow(UZD_DECIMALS)).decimalPlaces(18, 1).toString();\n};\n\nconst addToken = async (\n    ethereum: any,\n    tokenSymbol: string,\n    tokenDecimals: Number,\n    tokenImage: string\n) => {\n    const tokenAddress = contractAddresses.uzd[1];\n\n    try {\n        const wasAdded = await ethereum.request({\n            method: 'wallet_watchAsset',\n            params: {\n                type: 'ERC20',\n                options: {\n                    address: tokenAddress,\n                    symbol: tokenSymbol,\n                    decimals: tokenDecimals,\n                    image: tokenImage,\n                },\n            },\n        });\n\n        if (wasAdded) {\n            console.log('Thanks for your interest!');\n        } else {\n            console.log('Your loss!');\n        }\n    } catch (error: any) {\n        log(`❗️ Error while adding ${tokenSymbol} token: ${error.message}`);\n    }\n};\n\nexport const Uzd = (): JSX.Element => {\n    const { account, connect, ethereum, chainId } = useWallet();\n    const sushi = useSushi();\n    const masterChefContract = getMasterChefContract(sushi);\n    const zlpBalance = useBalanceOf(undefined, true);\n    const uzdBalance = useUzdBalance();\n    const deprecatedUzdBalance = useUzdBalance(contractAddresses.deprecated.v_1_0_uzd);\n    const uzdTotalSupply = useUzdTotalSupply();\n    const [zunLpValue, setZunLpValue] = useState('');\n    const [uzdValue, setUzdValue] = useState('');\n    const lpPrice = useUzdLpPrice();\n    const [zlpAllowance, setZlpAllowance] = useState(BIG_ZERO);\n    const [pendingTx, setPendingTx] = useState(false);\n    const [transactionError, setTransactionError] = useState(false);\n    const [transactionId, setTransactionId] = useState<string | undefined>(undefined);\n    const [mode, setMode] = useState('mint');\n    const [ltvValue, setLtvValue] = useState('0');\n    const [supportedChain, setSupportedChain] = useState(true);\n    const [withdrawAll, setWithdrawAll] = useState(false);\n    const target = useRef(null);\n    const [showHint, setShowHint] = useState(false);\n    const hint = 'The new version of UZD v1.2 is coming soon…';\n\n    const {\n        isLoading,\n        data: zunData,\n        error: zunError,\n    } = useFetch(zunamiInfoUrl) as ZunamiInfoFetch;\n\n    const zunamiInfo = zunData as ZunamiInfo;\n\n    const { isLoading: isCurveLoading, data: curvePoolData } = useFetch(\n        curvePoolsApyUrl\n    ) as CurveInfoFetch;\n\n    const uzdCurvePool =\n        !isCurveLoading &&\n        curvePoolData.data.poolDetails.filter(\n            (pool: CurvePoolInfo) => pool.poolAddress === contractAddresses.curve.uzdPool\n        )[0];\n\n    useEagerConnect(account ? account : '', connect, ethereum);\n\n    useEffect(() => {\n        setSupportedChain(chainId === 1);\n    }, [chainId]);\n\n    // GZLP apprival\n    useEffect(() => {\n        let refreshInterval: NodeJS.Timeout | undefined = undefined;\n\n        if (!account || !ethereum) {\n            return;\n        }\n\n        const getZlpApprove = async () => {\n            const allowance = new BigNumber(\n                await getAllowance(\n                    ethereum,\n                    contractAddresses.zunami[1],\n                    sushi.contracts.uzdContract,\n                    // @ts-ignore\n                    account\n                )\n            );\n\n            setZlpAllowance(allowance);\n        };\n\n        getZlpApprove();\n\n        refreshInterval = setInterval(getZlpApprove, 10000);\n        return () => clearInterval(refreshInterval);\n    }, [account, ethereum, masterChefContract, sushi?.contracts.uzdContract]);\n\n    // LTV\n    useEffect(() => {\n        if (uzdTotalSupply.toNumber() > 0 && zunamiInfo) {\n            const val =\n                (Number(getFullDisplayBalance(uzdTotalSupply)) /\n                    Number(getBalanceNumber(zunamiInfo.tvl))) *\n                100;\n            setLtvValue(val.toFixed(2).toString());\n        }\n    }, [uzdTotalSupply, zunamiInfo]);\n\n    const depositDisabled =\n        Number(zunLpValue) <= 0 ||\n        isNaN(Number(zunLpValue)) ||\n        pendingTx ||\n        parseFloat(zunLpValue) > zlpBalance.dividedBy(BIG_TEN.pow(UZD_DECIMALS)).toNumber();\n\n    const withdrawDisabled =\n        Number(uzdValue) <= 0 ||\n        isNaN(Number(uzdValue)) ||\n        pendingTx ||\n        parseFloat(uzdValue) > uzdBalance.dividedBy(BIG_TEN.pow(UZD_DECIMALS)).toNumber();\n\n    // v1.1 migration modal\n    const [showMigrationModal, setShowMigrationModal] = useState(false);\n\n    useEffect(() => {\n        if (deprecatedUzdBalance.toNumber() > 0) {\n            setShowMigrationModal(true);\n        } else {\n            setShowMigrationModal(false);\n        }\n    }, [deprecatedUzdBalance]);\n\n    return (\n        <React.Fragment>\n            <Header />\n            <MobileSidebar />\n            <Container className={'h-100 d-flex justify-content-between flex-column UzdContainer'}>\n                {!supportedChain && (\n                    <UnsupportedChain\n                        text=\"You're using unsupported chain. Please, switch to Ethereum network.\"\n                        customNetworksList={[networks[0]]}\n                    />\n                )}\n                <UzdMigrationModal\n                    show={showMigrationModal}\n                    balance={deprecatedUzdBalance}\n                    onHide={() => {\n                        setShowMigrationModal(false);\n                    }}\n                />\n                <div className=\"UzdContainer__Content\">\n                    <div className=\"UzdContainer__Sidebar\">\n                        <div className=\"UzdContainer__Sidebar_Title\">\n                            <svg\n                                width=\"24\"\n                                height=\"24\"\n                                viewBox=\"0 0 24 24\"\n                                fill=\"none\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                                <path\n                                    d=\"M7.23993 0.984478C5.06127 1.92593 3.2107 3.49229 1.92225 5.48548C0.6338 7.47867 -0.034665 9.80917 0.00138492 12.1823C0.0374349 14.5554 0.776381 16.8645 2.12478 18.8176C3.47318 20.7708 5.37047 22.2802 7.57673 23.155C9.78298 24.0299 12.1991 24.2308 14.5196 23.7325C16.8401 23.2342 18.9606 22.0589 20.6132 20.3554C22.2657 18.6519 23.376 16.4966 23.8036 14.162C24.2312 11.8275 23.957 9.41859 23.0155 7.23993C22.3904 5.79335 21.4865 4.48406 20.3554 3.38681C19.2243 2.28956 17.8882 1.42585 16.4233 0.844973C14.9584 0.264101 13.3934 -0.022552 11.8177 0.00138449C10.242 0.025321 8.68651 0.359377 7.23993 0.984478Z\"\n                                    fill=\"url(#paint0_linear_71_28276)\"\n                                />\n                                <path\n                                    d=\"M18.7151 14.046L18.3485 13.351C18.2832 13.2278 18.1717 13.1356 18.0385 13.0944C17.9053 13.0532 17.7612 13.0663 17.6377 13.131L14.135 14.9782L12.4382 11.7605L15.0094 5.55877C15.0376 5.48003 15.0501 5.39648 15.0459 5.31291C15.0418 5.22935 15.0212 5.14744 14.9852 5.07188L14.6187 4.37686C14.5533 4.25373 14.4419 4.16148 14.3087 4.12026C14.1755 4.07905 14.0314 4.09222 13.9079 4.1569L9.6207 6.41776L8.72801 4.72497C8.66262 4.60185 8.55115 4.5096 8.41797 4.46839C8.28479 4.42718 8.14071 4.44034 8.0172 4.505L7.32217 4.87152C7.19905 4.93692 7.10681 5.04838 7.0656 5.18156C7.02438 5.31474 7.03755 5.45882 7.10221 5.58233L7.99489 7.27512L5.50503 8.58814C5.38191 8.65354 5.28966 8.765 5.24844 8.89819C5.20723 9.03137 5.22039 9.17545 5.28504 9.29896L5.65156 9.99398C5.71697 10.1171 5.82843 10.2093 5.96161 10.2506C6.0948 10.2918 6.23888 10.2786 6.36239 10.2139L8.85225 8.90092L10.4096 11.8541L7.70434 18.3792C7.67413 18.4554 7.66092 18.5372 7.66566 18.6189C7.67039 18.7007 7.69295 18.7804 7.73176 18.8526C7.74741 18.8814 7.75707 18.9015 7.77145 18.9288L8.13797 19.6238C8.20337 19.7469 8.31484 19.8392 8.44802 19.8804C8.58121 19.9216 8.72529 19.9084 8.8488 19.8438L13.3666 17.4613L13.9248 18.5199C13.9902 18.643 14.1017 18.7353 14.2348 18.7765C14.368 18.8177 14.5121 18.8045 14.6356 18.7398L15.3306 18.3733C15.4538 18.3079 15.546 18.1965 15.5872 18.0633C15.6285 17.9301 15.6153 17.786 15.5506 17.6625L14.9924 16.6039L18.4951 14.7568C18.6182 14.6914 18.7105 14.5799 18.7517 14.4468C18.7929 14.3136 18.7797 14.1695 18.7151 14.046V14.046ZM10.4781 8.04355L12.4124 7.0235L11.3242 9.64813L10.4781 8.04355ZM10.2561 17.0237L11.5236 13.9665L12.5092 15.8355L10.2561 17.0237Z\"\n                                    fill=\"white\"\n                                />\n                                <defs>\n                                    <linearGradient\n                                        id=\"paint0_linear_71_28276\"\n                                        x1=\"13.8689\"\n                                        y1=\"1.91725\"\n                                        x2=\"9.99721\"\n                                        y2=\"22.8336\"\n                                        gradientUnits=\"userSpaceOnUse\"\n                                    >\n                                        <stop stopColor=\"#FFB515\" />\n                                        <stop offset=\"0.19046\" stopColor=\"#FF931C\" />\n                                        <stop offset=\"0.41364\" stopColor=\"#FF7322\" />\n                                        <stop offset=\"0.62821\" stopColor=\"#FF5B26\" />\n                                        <stop offset=\"0.82823\" stopColor=\"#FF4D29\" />\n                                        <stop offset=\"0.99932\" stopColor=\"#FF482A\" />\n                                    </linearGradient>\n                                </defs>\n                            </svg>\n                            <h2>UZD Stablecoin</h2>\n                        </div>\n                        <div className=\"UzdContainer__Sidebar_Hero\">\n                            <p>\n                                UZD - rebase token with a balance that grows in proportion to APY\n                                Zunami.\n                            </p>\n                            <p>\n                                UZD is minted using the LP tokens of our protocol and backed by\n                                stablecoins, which are allocated in Curve pools.\n                            </p>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-6 col-6\">\n                                <div\n                                    className=\"InfoBlock InfoBlock_colorful\"\n                                    data-title=\"UZD Balance\"\n                                >\n                                    <div className=\"InfoBlock__title \">\n                                        <span>UZD Balance</span>\n                                        <div className=\"InfoBlock__buttons\">\n                                            <div\n                                                onClick={async () => {\n                                                    navigator.clipboard\n                                                        .writeText(contractAddresses.uzd[1])\n                                                        .then(function () {\n                                                            alert(\n                                                                'UZD address copied to the clipboard'\n                                                            );\n                                                        });\n                                                }}\n                                            >\n                                                <img\n                                                    src=\"/copy-icon.svg\"\n                                                    alt=\"Copy token address\"\n                                                />\n                                            </div>\n                                            <div\n                                                onClick={async () => {\n                                                    addToken(\n                                                        ethereum,\n                                                        'UZD',\n                                                        UZD_DECIMALS,\n                                                        'https://app.zunami.io/uzd-token.png'\n                                                    );\n                                                }}\n                                            >\n                                                <img\n                                                    src=\"/metamask-icon.svg\"\n                                                    alt=\"Add token to Metamask\"\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"InfoBlock__description InfoBlock__description_color\">\n                                        <div>{formatUzd(uzdBalance)}</div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-sm-6 col-6\">\n                                <div\n                                    className=\"InfoBlock InfoBlock_colorful\"\n                                    data-title=\"ZLP Balance\"\n                                >\n                                    <div className=\"InfoBlock__title \">\n                                        <span>ZLP Balance</span>\n                                        <div className=\"InfoBlock__buttons\">\n                                            <div\n                                                onClick={async () => {\n                                                    navigator.clipboard\n                                                        .writeText(contractAddresses.zunami[1])\n                                                        .then(function () {\n                                                            alert(\n                                                                'ZLP address copied to the clipboard'\n                                                            );\n                                                        });\n                                                }}\n                                            >\n                                                <img\n                                                    src=\"/copy-icon.svg\"\n                                                    alt=\"Copy token address\"\n                                                />\n                                            </div>\n                                            <div\n                                                onClick={async () => {\n                                                    addToken(\n                                                        ethereum,\n                                                        'ZLP',\n                                                        UZD_DECIMALS,\n                                                        'https://app.zunami.io/zlp-token.jpg'\n                                                    );\n                                                }}\n                                            >\n                                                <img\n                                                    src=\"/metamask-icon.svg\"\n                                                    alt=\"Add token to Metamask\"\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"InfoBlock__description InfoBlock__description_color\">\n                                        <div>{getFullDisplayBalance(zlpBalance)}</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-12\">\n                                <InfoBlock\n                                    isStrategy={false}\n                                    withColor={true}\n                                    title=\"Total UZD issued\"\n                                    description={getFullDisplayBalance(uzdTotalSupply)}\n                                    colorfulBg={true}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-6 col-6\">\n                                <InfoBlock\n                                    isStrategy={false}\n                                    withColor={true}\n                                    title=\"LTV\"\n                                    description={`${ltvValue}%`}\n                                    colorfulBg={true}\n                                />\n                            </div>\n                            <div className=\"col-sm-6 col-6\">\n                                <InfoBlock\n                                    isStrategy={false}\n                                    withColor={true}\n                                    title=\"APY\"\n                                    description={`${\n                                        zunamiInfo && !zunError\n                                            ? `${zunamiInfo.apy.toFixed(2)}%`\n                                            : 'n/a'\n                                    }`}\n                                    colorfulBg={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"UzdContainer__Actions\">\n                        <ToastContainer position={'top-end'} className={'toasts mt-3 me-3'}>\n                            {transactionError && (\n                                <Toast\n                                    onClose={() => setTransactionError(undefined)}\n                                    delay={5000}\n                                    autohide\n                                >\n                                    <Toast.Body>\n                                        Sorry, we couldn't complete the transaction\n                                    </Toast.Body>\n                                </Toast>\n                            )}\n                            {transactionId && (\n                                <Toast\n                                    onClose={() => setTransactionId(undefined)}\n                                    delay={15000}\n                                    autohide\n                                >\n                                    <Toast.Body>\n                                        Success! Check out the{' '}\n                                        <a\n                                            target=\"_blank\"\n                                            rel=\"noreferrer\"\n                                            href={`https://etherscan.io/tx/${transactionId}`}\n                                        >\n                                            transaction\n                                        </a>\n                                    </Toast.Body>\n                                </Toast>\n                            )}\n                        </ToastContainer>\n                        <div className=\"UzdContainer__Actions_Inner\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-6\">\n                                    <h2>Mint / Redeem</h2>\n                                    <div className=\"mint-redeem-inputs\">\n                                        <div\n                                            className={`inputs ${\n                                                mode === 'redeem' ? 'redeem' : 'mint'\n                                            }`}\n                                        >\n                                            <div className=\"s-coin\">\n                                                <div className=\"left-part\">\n                                                    <div className=\"action\">\n                                                        I {mode === 'mint' ? 'send' : 'receive'}\n                                                    </div>\n                                                    <div className=\"coin\">Zunami LP</div>\n                                                </div>\n                                                <div className=\"right-part\">\n                                                    <input\n                                                        type=\"text\"\n                                                        value={zunLpValue.toString()}\n                                                        max={getFullDisplayBalance(zlpBalance)}\n                                                        onChange={(e) => {\n                                                            const inputVal =\n                                                                e.nativeEvent.target.value;\n\n                                                            if (inputVal === '') {\n                                                                setZunLpValue(inputVal);\n                                                                setUzdValue('0');\n                                                            }\n\n                                                            const invalid =\n                                                                Number(inputVal) <= 0 ||\n                                                                isNaN(inputVal);\n\n                                                            if (invalid) {\n                                                                return;\n                                                            }\n\n                                                            setZunLpValue(inputVal);\n\n                                                            setUzdValue(\n                                                                convertZlpToUzd(\n                                                                    new BigNumber(inputVal),\n                                                                    lpPrice\n                                                                )\n                                                                    .toFixed(2, 1)\n                                                                    .toString()\n                                                            );\n                                                        }}\n                                                    />\n                                                    {mode === 'mint' && (\n                                                        <div\n                                                            className=\"max\"\n                                                            onClick={() => {\n                                                                setZunLpValue(\n                                                                    formatBigNumberFull(zlpBalance)\n                                                                );\n\n                                                                const uzdToRedeem = convertZlpToUzd(\n                                                                    zlpBalance,\n                                                                    lpPrice\n                                                                );\n\n                                                                log(\n                                                                    `For ${getFullDisplayBalance(\n                                                                        zlpBalance\n                                                                    )} ZLP you'll receive ${getFullDisplayBalance(\n                                                                        uzdToRedeem\n                                                                    )}. LP price: ${getFullDisplayBalance(\n                                                                        lpPrice\n                                                                    )}`\n                                                                );\n\n                                                                setUzdValue(\n                                                                    formatBigNumberFull(uzdToRedeem)\n                                                                );\n                                                            }}\n                                                        >\n                                                            max\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            </div>\n                                            <div\n                                                className=\"swap\"\n                                                onClick={() => {\n                                                    if (mode === 'mint') {\n                                                        setMode('redeem');\n                                                        setUzdValue(formatUzd(uzdBalance));\n                                                        const zlpVal = getFullDisplayBalance(\n                                                            uzdBalance.dividedBy(lpPrice)\n                                                        );\n                                                        setZunLpValue(zlpVal);\n                                                    } else {\n                                                        setMode('mint');\n                                                    }\n                                                }}\n                                            >\n                                                <svg\n                                                    width=\"16\"\n                                                    height=\"16\"\n                                                    viewBox=\"0 0 16 16\"\n                                                    fill=\"none\"\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                >\n                                                    <path\n                                                        d=\"M4.28037 0.58202L0.390323 4.0996C-0.416103 4.82881 0.110389 6.14877 1.20767 6.14877L3.28422 6.14877L3.28422 13.8985C3.28422 14.0928 3.32326 14.2851 3.39911 14.4646C3.47497 14.644 3.58615 14.8071 3.72631 14.9444C3.86647 15.0818 4.03286 15.1907 4.21598 15.2651C4.39911 15.3394 4.59539 15.3777 4.7936 15.3777C4.99182 15.3777 5.18809 15.3394 5.37122 15.2651C5.55434 15.1907 5.72073 15.0818 5.86089 14.9444C6.00105 14.8071 6.11223 14.644 6.18809 14.4646C6.26394 14.2851 6.30298 14.0928 6.30298 13.8985L6.30298 1.45006C6.30298 0.420509 5.05248 -0.116167 4.28037 0.58202Z\"\n                                                        fill=\"#ADADAD\"\n                                                    />\n                                                    <path\n                                                        d=\"M11.7196 15.0625L15.6096 11.5449C16.416 10.8157 15.8895 9.49576 14.7923 9.49576L12.7157 9.49576L12.7157 1.74601C12.7157 1.55177 12.6767 1.35943 12.6008 1.17997C12.525 1.00051 12.4138 0.837455 12.2736 0.700104C12.1335 0.562753 11.9671 0.453798 11.784 0.379465C11.6008 0.305131 11.4046 0.266873 11.2063 0.266874C11.0081 0.266874 10.8118 0.305131 10.6287 0.379465C10.4456 0.453798 10.2792 0.562753 10.139 0.700104C9.99889 0.837455 9.8877 1.00051 9.81185 1.17997C9.736 1.35943 9.69696 1.55177 9.69696 1.74601L9.69696 14.1945C9.69696 15.224 10.9475 15.7607 11.7196 15.0625Z\"\n                                                        fill=\"url(#paint0_linear_71_28360)\"\n                                                    />\n                                                    <defs>\n                                                        <linearGradient\n                                                            id=\"paint0_linear_71_28360\"\n                                                            x1=\"10.9091\"\n                                                            y1=\"1.15568\"\n                                                            x2=\"12.7273\"\n                                                            y2=\"15.095\"\n                                                            gradientUnits=\"userSpaceOnUse\"\n                                                        >\n                                                            <stop stopColor=\"#F95403\" />\n                                                            <stop offset=\"1\" stopColor=\"#FB9A11\" />\n                                                        </linearGradient>\n                                                    </defs>\n                                                </svg>\n                                                <span>\n                                                    Tap to {mode === 'mint' ? 'Redeem' : 'Mint'}\n                                                </span>\n                                            </div>\n                                            <div className=\"s-coin\">\n                                                <div className=\"left-part\">\n                                                    <div className=\"action\">\n                                                        I {mode !== 'mint' ? 'send' : 'receive'}\n                                                    </div>\n                                                    <div className=\"coin\">\n                                                        <span>UZD COIN</span>\n                                                    </div>\n                                                </div>\n                                                <div className=\"right-part\">\n                                                    <div>\n                                                        <input\n                                                            type=\"text\"\n                                                            value={uzdValue}\n                                                            onChange={(e) => {\n                                                                const inputVal =\n                                                                    e.nativeEvent.target.value;\n\n                                                                setUzdValue(inputVal);\n                                                                setWithdrawAll(false);\n\n                                                                if (\n                                                                    Number(inputVal) <= 0 ||\n                                                                    isNaN(inputVal)\n                                                                ) {\n                                                                    return;\n                                                                }\n\n                                                                if (mode === 'mint') {\n                                                                    setZunLpValue(\n                                                                        convertUzdToZlp(\n                                                                            new BigNumber(inputVal),\n                                                                            lpPrice\n                                                                        )\n                                                                            .toFixed(2)\n                                                                            .toString()\n                                                                    );\n                                                                } else {\n                                                                    setZunLpValue(\n                                                                        convertUzdToZlp(\n                                                                            new BigNumber(inputVal),\n                                                                            lpPrice\n                                                                        )\n                                                                            .toFixed(2)\n                                                                            .toString()\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                        {mode === 'redeem' && (\n                                                            <div\n                                                                className=\"max\"\n                                                                onClick={() => {\n                                                                    setUzdValue(\n                                                                        formatBigNumberFull(\n                                                                            uzdBalance\n                                                                        )\n                                                                    );\n\n                                                                    setZunLpValue(\n                                                                        convertUzdToZlp(\n                                                                            uzdBalance.dividedBy(\n                                                                                BIG_TEN.pow(\n                                                                                    UZD_DECIMALS\n                                                                                )\n                                                                            ),\n                                                                            lpPrice\n                                                                        )\n                                                                            .toFixed()\n                                                                            .toString()\n                                                                    );\n\n                                                                    setWithdrawAll(true);\n                                                                }}\n                                                            >\n                                                                max\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"d-flex align-items-center\">\n                                            {zlpAllowance.toNumber() === 0 && mode === 'mint' && (\n                                                <div>\n                                                    <input\n                                                        type=\"button\"\n                                                        className={`zun-button ${\n                                                            pendingTx ? 'disabled' : ''\n                                                        }`}\n                                                        value=\"Approve ZLP\"\n                                                        onClick={async () => {\n                                                            setPendingTx(true);\n\n                                                            try {\n                                                                await approve(\n                                                                    ethereum,\n                                                                    contractAddresses.zunami[1],\n                                                                    sushi.contracts.uzdContract,\n                                                                    account\n                                                                );\n\n                                                                log('ZLP approved');\n                                                            } catch (error: any) {\n                                                                log(\n                                                                    `❗️ Error while approving ZLP: ${error.message}`\n                                                                );\n                                                            }\n\n                                                            setPendingTx(false);\n                                                        }}\n                                                    />\n                                                </div>\n                                            )}\n                                            {zlpAllowance.toNumber() > 0 && mode === 'mint' && (\n                                            <div ref={target} onClick={() => setShowHint(!showHint)}>\n                                                <OverlayTrigger placement=\"right\" overlay={<Tooltip>{hint}</Tooltip>}>\n                                                    <input\n                                                        type=\"button\"\n                                                        className=\"zun-button\"\n                                                        style={{ opacity: 0.5 }}\n                                                        value=\"Mint\"\n                                                    />\n                                                </OverlayTrigger>\n                                            </div>\n                                            )}\n                                            {zlpAllowance.toNumber() > 0 && mode === 'redeem' && (\n                                                <input\n                                                    type=\"button\"\n                                                    className={`zun-button ${\n                                                        withdrawDisabled ? 'disabled' : ''\n                                                    }`}\n                                                    value=\"Redeem\"\n                                                    onClick={async () => {\n                                                        setPendingTx(true);\n                                                        let tx = null;\n\n                                                        try {\n                                                            if (withdrawAll) {\n                                                                log(\n                                                                    'UZD contract (ETH): withdrawAll()'\n                                                                );\n\n                                                                tx =\n                                                                    await sushi.contracts.uzdContract.methods\n                                                                        .withdrawAll(\n                                                                            account,\n                                                                            account\n                                                                        )\n                                                                        .send({\n                                                                            from: account,\n                                                                        });\n                                                            } else {\n                                                                const sumToWithdraw = new BigNumber(\n                                                                    uzdValue\n                                                                )\n                                                                    .multipliedBy(\n                                                                        BIG_TEN.pow(UZD_DECIMALS)\n                                                                    )\n                                                                    .toString();\n\n                                                                log(\n                                                                    `UZD contract (ETH): withdraw('${new BigNumber(\n                                                                        uzdValue\n                                                                    )\n                                                                        .multipliedBy(\n                                                                            BIG_TEN.pow(\n                                                                                UZD_DECIMALS\n                                                                            )\n                                                                        )\n                                                                        .toString()}', '${account}', '${account}'')`\n                                                                );\n\n                                                                tx =\n                                                                    await sushi.contracts.uzdContract.methods\n                                                                        .withdraw(\n                                                                            sumToWithdraw,\n                                                                            account,\n                                                                            account\n                                                                        )\n                                                                        .send({\n                                                                            from: account,\n                                                                        });\n                                                            }\n\n                                                            setTransactionId(tx.transactionHash);\n                                                        } catch (error: any) {\n                                                            setTransactionError(true);\n                                                            log(\n                                                                `❗️ Error while redeeming ZLP: ${error.message}`\n                                                            );\n                                                        }\n\n                                                        setPendingTx(false);\n                                                    }}\n                                                />\n                                            )}\n\n                                            {pendingTx && <Preloader className=\"ms-2\" />}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className={`col-sm-6 col-12`}>\n                                    {mode === 'mint' && (\n                                        <div>\n                                            <div className=\"curve-boost\">\n                                                <div className=\"left-part\">\n                                                    <img src=\"/curve-icon.svg\" alt=\"\" />\n                                                    <div>\n                                                        <div>Boost your APY</div>\n                                                        <div>on Curve</div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"divider\"></div>\n                                                <div className=\"pool-percent\">\n                                                    <div className=\"inner\">\n                                                        <div className=\"title\">Curve APY / Extra Reward APR</div>\n                                                    </div>\n                                                    <div className=\"percent\">\n                                                        {uzdCurvePool.apyFormatted} / {isLoading ? 'n/a' : `${zunamiInfo.curve.uzdRewardApr.toFixed(2)}%`}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <h2 className=\"how-it-works\">How it works?</h2>\n                                            <ul>\n                                                <li>\n                                                    <div className=\"counter\">1</div>\n                                                    <span>\n                                                        Make a deposit in the Zunami Protocol and\n                                                        get LP tokens\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <div className=\"counter\">2</div>\n                                                    <span>\n                                                        Issue UZD tokens instead of your Zunami LP\n                                                        tokens\n                                                    </span>\n                                                </li>\n                                                <li>\n                                                    <div className=\"counter\">3</div>\n                                                    <span>\n                                                        Deposit liquidity in liquidity pool on Curve\n                                                    </span>\n                                                </li>\n                                            </ul>\n                                            <a\n                                                href=\"https://curve.exchange/#/ethereum/pools/factory-v2-218/deposit\"\n                                                className=\"go-to-curve\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                            >\n                                                <img src=\"/curve-icon.svg\" alt=\"\" />\n                                                <span>Go to Curve</span>\n                                            </a>\n                                        </div>\n                                    )}\n                                    {mode === 'redeem' && (\n                                        <div>\n                                            <div className=\"d-flex protocol_fee\">\n                                                <div>\n                                                    <svg\n                                                        width=\"36\"\n                                                        height=\"35\"\n                                                        viewBox=\"0 0 36 35\"\n                                                        fill=\"none\"\n                                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                                    >\n                                                        <path\n                                                            d=\"M17.4498 1.1791e-05C27.1429 -0.0111169 35.0164 7.85685 35.0053 17.5499C34.9942 27.2263 27.1207 35.0609 17.3664 34.9996C7.73453 34.9384 0.0334921 27.1818 0.000106157 17.5555C-0.0332798 7.87354 7.81243 0.0111405 17.4498 1.1791e-05ZM12.1025 28.0331C12.097 28.0665 12.0914 28.1054 12.0914 28.1444C12.1526 29.274 12.9038 30.0474 14.0333 30.0808C14.3449 30.0919 14.6621 30.0585 14.9626 29.9862C17.5389 29.3964 19.6478 27.9163 21.7177 26.3749C22.0015 26.1635 22.0404 25.8519 21.9403 25.5292C21.7344 24.8893 21.1167 24.611 20.4657 24.906C19.9093 25.1619 19.3862 25.4679 18.8354 25.7295H18.8298C18.5182 25.8741 18.1788 25.5792 18.2678 25.2509C18.2678 25.2454 18.2678 25.2454 18.2678 25.2398C19.3417 21.5284 20.4268 17.817 21.5118 14.1112C21.8568 12.9315 21.2503 12.019 20.0317 11.8965C19.9148 11.8854 19.7924 11.891 19.6756 11.8965C18.329 11.9578 17.0715 12.325 15.8696 12.926C14.7456 13.4879 13.7329 14.2224 12.7814 15.0404C12.4475 15.3242 12.2973 15.7137 12.4253 16.1254C12.5477 16.5094 12.9316 16.5873 13.2933 16.6429C13.6717 16.6986 13.9888 16.5428 14.3171 16.387C14.651 16.2256 14.9848 16.0531 15.3298 15.9307C15.6247 15.8305 15.7082 15.9251 15.6414 16.2256C15.6136 16.3536 15.5747 16.4816 15.5357 16.6095C14.4507 20.1651 13.3601 23.7152 12.275 27.2708C12.2082 27.5156 12.1582 27.7771 12.1025 28.0331ZM19.5643 8.09611C19.5643 8.08498 19.5643 8.07385 19.5643 8.06273C19.5476 6.71059 19.1414 5.77579 18.0842 5.21935C16.7042 4.49043 15.0961 5.21379 14.7011 6.72172C14.5008 7.48404 14.5174 8.24635 14.7122 9.01423C14.957 9.99355 15.5635 10.6168 16.554 10.7837C17.5556 10.9506 18.418 10.6334 19.0079 9.77098C19.3862 9.20898 19.5365 8.56908 19.5643 8.09611Z\"\n                                                            fill=\"#D5D5D5\"\n                                                        />\n                                                    </svg>\n                                                </div>\n                                                <div className=\"protocol_fee__text\">\n                                                    Protocol Takes no redemption fee. It will be\n                                                    cheaper and easier to withdraw using the Curve\n                                                    pool\n                                                </div>\n                                            </div>\n                                            <div className=\"text-center\">\n                                                <a\n                                                    href=\"https://curve.exchange/#/ethereum/pools/factory-v2-218/swap\"\n                                                    className=\"go-to-curve ms-auto me-auto\"\n                                                    target=\"_blank\"\n                                                    rel=\"noreferrer\"\n                                                >\n                                                    <img src=\"/curve-icon.svg\" alt=\"\" />\n                                                    <span>Go to Curve</span>\n                                                </a>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Container>\n            <footer className=\"\">\n                <div className=\"mobile\">\n                    <a href=\"https://zunamilab.gitbook.io/product-docs/activity/liquidity-providing\">\n                        View docs\n                    </a>\n                    <a href=\"https://www.zunami.io/#faq-main\" target=\"_blank\" rel=\"noreferrer\">\n                        FAQ\n                    </a>\n                </div>\n                <span className=\"copyright\">\n                    © 2022 Zunami Protocol. {`Version: ${process.env.REACT_APP_VERSION}`}\n                </span>\n                <ul className=\"list-inline mb-0\">\n                    <li className=\"list-inline-item\">\n                        <a\n                            href=\"https://zunamilab.gitbook.io/product-docs/activity/liquidity-providing\"\n                            target=\"blank\"\n                        >\n                            View docs\n                        </a>\n                    </li>\n                    <li className=\"list-inline-item\">\n                        <a href=\"https://www.zunami.io/#faq-main\" target=\"blank\">\n                            FAQ\n                        </a>\n                    </li>\n                    <li className=\"list-inline-item\">\n                        <a href=\"https://zunami.io\" target=\"blank\">\n                            Website\n                        </a>\n                    </li>\n                </ul>\n            </footer>\n        </React.Fragment>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/containers/FinanceOperations.tsx",["365","366","367"],"import React, { useState, useEffect } from 'react';\nimport { Header } from '../components/Header/Header';\nimport { Form } from '../components/Form/Form';\nimport './FinanceOperations.scss';\nimport { Container, Row, Col, ToastContainer, Toast } from 'react-bootstrap';\nimport { WelcomeCarousel } from '../components/WelcomeCarousel/WelcomeCarousel';\nimport { WithdrawOptions } from '../components/Form/WithdrawOptions/WithdrawOptions';\nimport { MobileSidebar } from '../components/SideBar/MobileSidebar/MobileSidebar';\nimport { BigNumber } from 'bignumber.js';\nimport { BIG_ZERO, getBalanceNumber, getFullDisplayBalance } from '../utils/formatbalance';\nimport { ReactComponent as FinIcon } from '../components/Form/deposit-withdraw.svg';\nimport useLpPrice from '../hooks/useLpPrice';\nimport { useUserBalances } from '../hooks/useUserBalances';\nimport { TransactionHistory } from '../components/TransactionHistory/TransactionHistory';\nimport { getTransHistoryUrl, getBackendSlippage } from '../api/api';\nimport useBalanceOf from '../hooks/useBalanceOf';\nimport { useWallet } from 'use-wallet';\nimport useEagerConnect from '../hooks/useEagerConnect';\nimport { Contract } from 'web3-eth-contract';\nimport { calcWithdrawOneCoin } from '../utils/erc20';\nimport useSushi from '../hooks/useSushi';\nimport { getMasterChefContract } from '../sushi/utils';\nimport { isBSC, isETH, isPLG } from '../utils/zunami';\nimport { log } from '../utils/logger';\nimport { useSlippage } from '../hooks/useSlippage';\nimport { UnsupportedChain } from '../components/UnsupportedChain/UnsupportedChain';\nimport useSupportedChain from '../hooks/useSupportedChain';\n\ninterface FinanceOperationsProps {\n    operationName: string;\n}\n\nconst calculateStables = async (\n    coinIndex: number,\n    balance: BigNumber,\n    lpPrice: BigNumber,\n    sharePercent: number,\n    zunamiContract: Contract,\n    setError: Function,\n    account: string | null\n) => {\n    if (!zunamiContract || coinIndex === -1 || balance.toNumber() === 0) {\n        return '0';\n    }\n\n    let result = '';\n\n    const balanceToWithdraw = balance\n        .dividedBy(lpPrice)\n        .multipliedBy(sharePercent / 100)\n        .toFixed(0)\n        .toString();\n\n    if (balanceToWithdraw === '0') {\n        return '0';\n    }\n\n    setError('');\n\n    try {\n        result = await calcWithdrawOneCoin(balanceToWithdraw, coinIndex, account);\n    } catch (error: any) {\n        setError(\n            `Error: ${error.message}. Params - coinIndex: ${coinIndex}, lpShares: ${balanceToWithdraw}`\n        );\n        return error;\n    }\n\n    return result;\n};\n\nexport const FinanceOperations = (props: FinanceOperationsProps): JSX.Element => {\n    const { account, connect, ethereum, chainId } = useWallet();\n    const { getSlippage } = useSlippage();\n\n    useEagerConnect(account ? account : '', connect, ethereum);\n\n    const lpPrice = useLpPrice();\n    const balance = useBalanceOf().multipliedBy(lpPrice);\n    const sushi = useSushi();\n    const zunamiContract = getMasterChefContract(sushi);\n\n    const [directOperation, setDirectOperation] = useState(false);\n    const [daiChecked, setDaiChecked] = useState(false);\n    const [usdcChecked, setUsdcChecked] = useState(false);\n    const [usdtChecked, setUsdtChecked] = useState(false);\n    const [sharePercent, setSharePercent] = useState(100);\n    const [selectedCoin, setSelectedCoin] = useState<string>('all');\n    const userBalanceList = useUserBalances();\n    const [selectedCoinIndex, setSelectedCoinIndex] = useState(\n        isBSC(chainId) && props.operationName === 'withdraw' ? 2 : -1\n    );\n    const [dai, setDai] = useState('0');\n    const [usdc, setUsdc] = useState('0');\n    const [usdt, setUsdt] = useState('0');\n    const [busd, setBusd] = useState('0');\n    const [calcError, setCalcError] = useState('');\n    const [transactionList, setTransactionList] = useState([]);\n    const [showMobileTransHistory, setShowMobileTransHistory] = useState(false);\n    const [transHistoryPage, setTransHistoryPage] = useState(0);\n    const [slippage, setSlippage] = useState('');\n\n    // refetch transaction history if account/chain changes\n    useEffect(() => {\n        setTransHistoryPage(0);\n        setTransactionList([]);\n    }, [account, chainId]);\n\n    useEffect(() => {\n        if (isBSC(chainId) && props.operationName === 'withdraw') {\n            setSelectedCoinIndex(2);\n            setSelectedCoin('usdt');\n        }\n\n        if (isPLG(chainId) && props.operationName === 'withdraw') {\n            setSelectedCoinIndex(2);\n            setSelectedCoin('usdt');\n        }\n\n        if (isETH(chainId)) {\n            setSelectedCoinIndex(-1);\n            setSelectedCoin('all');\n        }\n    }, [props.operationName, chainId]);\n\n    // withdraw max balance default set\n    useEffect(() => {\n        if (\n            selectedCoinIndex === -1 &&\n            balance !== BIG_ZERO &&\n            !isNaN(sharePercent) &&\n            props.operationName === 'withdraw'\n        ) {\n            const oneThird = getBalanceNumber(balance)\n                .multipliedBy(sharePercent / 100)\n                .dividedBy(3)\n                .toFixed(2, 1)\n                .toString();\n\n            setDai(oneThird);\n            setUsdc(oneThird);\n            setUsdt(oneThird);\n\n            if (chainId === 56) {\n                setUsdt(getFullDisplayBalance(balance.multipliedBy(sharePercent / 100), 18));\n            }\n        }\n    }, [balance, sharePercent, selectedCoinIndex, chainId, userBalanceList, props.operationName]);\n\n    // calculate stables to withdraw\n    useEffect(() => {\n        const setCalculatedStables = async () => {\n            if (\n                balance === BIG_ZERO ||\n                (selectedCoinIndex === -1 && !isNaN(sharePercent)) ||\n                props.operationName !== 'withdraw' ||\n                !chainId\n            ) {\n                return false;\n            }\n\n            log('setCalculatedStables');\n\n            const stablesToWithdraw = await calculateStables(\n                selectedCoinIndex,\n                balance,\n                lpPrice,\n                sharePercent,\n                zunamiContract,\n                setCalcError,\n                account\n            );\n\n            setDai('0');\n            setUsdc('0');\n            setUsdt('0');\n\n            const percentOfBalance = balance.multipliedBy(sharePercent / 100);\n\n            if (selectedCoinIndex === 0) {\n                const coinValue = getBalanceNumber(new BigNumber(stablesToWithdraw))\n                    .toFixed(2, 1)\n                    .toString();\n                setDai(coinValue);\n\n                const slippage = await getBackendSlippage(\n                    percentOfBalance.decimalPlaces(0).toString(),\n                    0\n                );\n\n                setSlippage(slippage);\n\n                log(`DAI slippage is ${slippage}`);\n            } else if (selectedCoinIndex === 1) {\n                const coinValue = getBalanceNumber(new BigNumber(stablesToWithdraw), 6)\n                    .toFixed(2, 1)\n                    .toString();\n                setUsdc(coinValue);\n\n                const slippage = await getBackendSlippage(\n                    percentOfBalance.decimalPlaces(0).toString(),\n                    1\n                );\n\n                setSlippage(slippage);\n\n                log(`USDC slippage is ${slippage}`);\n            } else if (selectedCoinIndex === 2) {\n                const coinValue = getBalanceNumber(new BigNumber(stablesToWithdraw), 6)\n                    .toFixed(2, 1)\n                    .toString();\n                setUsdt(coinValue);\n\n                const slippage = await getBackendSlippage(\n                    percentOfBalance.decimalPlaces(0).toString(),\n                    2\n                );\n\n                setSlippage(slippage);\n\n                log(`USDT slippage is ${slippage}`);\n            }\n        };\n\n        setCalculatedStables();\n    }, [\n        balance.toNumber(),\n        lpPrice,\n        selectedCoinIndex,\n        sharePercent,\n        account,\n        props.operationName,\n        chainId,\n        zunamiContract,\n    ]);\n\n    // load transaction list\n    useEffect(() => {\n        if (!account || transHistoryPage === -1) {\n            return;\n        }\n\n        const getTransactionHistory = async () => {\n            const response = await fetch(\n                getTransHistoryUrl(\n                    account,\n                    props.operationName.toUpperCase(),\n                    transHistoryPage,\n                    10,\n                    chainId\n                )\n            );\n\n            const data = await response.json();\n\n            if (!data.userTransfers.length) {\n                setTransHistoryPage(-1);\n                return;\n            }\n\n            setTransactionList(transactionList.concat(data.userTransfers));\n        };\n\n        getTransactionHistory();\n    }, [account, props.operationName, transHistoryPage, chainId]);\n\n    const supportedChain = useSupportedChain();\n\n    return (\n        <React.Fragment>\n            <Header />\n            <MobileSidebar />\n            <Container className={'h-100 d-flex justify-content-between flex-column'}>\n                {!supportedChain && (\n                    <UnsupportedChain text=\"You're using unsupported chain. Please, switch either to Ethereum or Binance network.\" />\n                )}\n                <Row className={'h-100 main-row'}>\n                    {!account && (\n                        <Col className={'content-col'}>\n                            <WelcomeCarousel />\n                        </Col>\n                    )}\n                    {account && (\n                        <Col className={'content-col'}>\n                            <ToastContainer\n                                position={'top-end'}\n                                id=\"toasts\"\n                                className={'toasts mt-3 me-3'}\n                            >\n                                {calcError && (\n                                    <Toast onClose={() => setCalcError('')} delay={10000} autohide>\n                                        <Toast.Body>{calcError}</Toast.Body>\n                                    </Toast>\n                                )}\n                            </ToastContainer>\n                            <Row className={'zun-rounded zun-shadow h-100 operation-col'}>\n                                <Col className={'ps-0 pe-0'}>\n                                    <div className={'DepositBlock'}>\n                                        <div className={'DepositContent'}>\n                                            <h3 className=\"DepositContent__Title\">\n                                                <FinIcon />\n                                                Deposit & Withdraw\n                                            </h3>\n                                            <div\n                                                id=\"trans-story-mobile-btn\"\n                                                className={showMobileTransHistory ? 'active' : ''}\n                                            >\n                                                <svg\n                                                    width=\"11\"\n                                                    height=\"12\"\n                                                    viewBox=\"0 0 11 12\"\n                                                    fill=\"none\"\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                >\n                                                    <path\n                                                        d=\"M10.6236 11.0138L10.6235 11.0138C10.5976 11.2374 10.4136 11.3805 10.1869 11.3902C10.1667 11.391 10.1459 11.3909 10.1279 11.3909C10.123 11.3908 10.1183 11.3908 10.114 11.3908L2.49809 11.3911C2.49809 11.3911 2.49808 11.3911 2.49807 11.3911C1.96381 11.3913 1.52468 11.2042 1.19989 10.8133C1.0116 10.5867 0.920792 10.3272 0.903542 10.0497C0.901005 10.009 0.900685 9.9687 0.900683 9.93081C0.900571 7.33663 0.900343 4.74246 0.9 2.14829L10.6236 11.0138ZM10.6236 11.0138L10.6239 11.0102M10.6236 11.0138L10.6239 11.0102M10.6239 11.0102C10.6274 10.9661 10.6284 10.9218 10.6269 10.8776L10.627 6.04986L10.6269 1.19128C10.6283 1.15043 10.6273 1.10954 10.6239 1.06878L10.624 1.06878M10.6239 11.0102L10.624 1.06878M10.624 1.06878L10.6236 1.06535M10.624 1.06878L10.6236 1.06535M10.6236 1.06535C10.5976 0.84203 10.4137 0.698423 10.1869 0.689019C10.159 0.687865 10.1302 0.688044 10.1043 0.688205C10.0957 0.688258 10.0874 0.688309 10.0797 0.688309L2.54395 0.688324C2.53469 0.688324 2.52518 0.68829 2.51546 0.688254C2.47938 0.688122 2.44056 0.68798 2.40235 0.689581C1.93356 0.709233 1.54287 0.882505 1.24394 1.21359C0.996923 1.48718 0.899867 1.80616 0.9 2.14826L10.6236 1.06535ZM2.61757 8.5966C2.33832 8.59635 2.05604 8.61933 1.78983 8.73226L1.7898 2.15232C1.7898 1.99286 1.82418 1.85564 1.92744 1.73816C2.05563 1.59232 2.22521 1.51791 2.43986 1.50615C2.46633 1.5047 2.49228 1.50482 2.52151 1.50495C2.5303 1.50499 2.53939 1.50503 2.54887 1.50503L9.69493 1.50498H9.72903L9.72902 8.59777H9.72874H9.72845H9.72817H9.72789H9.7276H9.72732H9.72704H9.72675H9.72647H9.72618H9.7259H9.72562H9.72533H9.72505H9.72477H9.72448H9.7242H9.72392H9.72363H9.72335H9.72306H9.72278H9.7225H9.72221H9.72193H9.72165H9.72136H9.72108H9.72079H9.72051H9.72023H9.71994H9.71966H9.71938H9.71909H9.71881H9.71853H9.71824H9.71796H9.71768H9.71739H9.71711H9.71682H9.71654H9.71626H9.71597H9.71569H9.71541H9.71512H9.71484H9.71456H9.71427H9.71399H9.71371H9.71342H9.71314H9.71285H9.71257H9.71229H9.712H9.71172H9.71144H9.71115H9.71087H9.71059H9.7103H9.71002H9.70973H9.70945H9.70917H9.70888H9.7086H9.70832H9.70803H9.70775H9.70747H9.70718H9.7069H9.70662H9.70633H9.70605H9.70577H9.70548H9.7052H9.70492H9.70463H9.70435H9.70406H9.70378H9.7035H9.70321H9.70293H9.70265H9.70236H9.70208H9.7018H9.70151H9.70123H9.70095H9.70066H9.70038H9.7001H9.69981H9.69953H9.69925H9.69896H9.69868H9.69839H9.69811H9.69783H9.69754H9.69726H9.69698H9.69669H9.69641H9.69613H9.69584H9.69556H9.69528H9.69499H9.69471H9.69443H9.69414H9.69386H9.69358H9.69329H9.69301H9.69273H9.69244H9.69216H9.69187H9.69159H9.69131H9.69102H9.69074H9.69046H9.69017H9.68989H9.68961H9.68932H9.68904H9.68876H9.68847H9.68819H9.68791H9.68762H9.68734H9.68706H9.68677H9.68649H9.68621H9.68592H9.68564H9.68536H9.68507H9.68479H9.68451H9.68422H9.68394H9.68365H9.68337H9.68331C7.32806 8.59912 4.97282 8.59873 2.61757 8.5966ZM9.68885 9.4155H9.73194V10.5738C9.72634 10.5739 9.72074 10.574 9.71504 10.574C7.31369 10.5738 4.91235 10.574 2.51101 10.5744C2.20736 10.5744 1.99072 10.4707 1.85943 10.2416C1.66543 9.90292 1.92332 9.451 2.38845 9.4209C2.44314 9.41736 2.49831 9.41574 2.55357 9.41574L9.68885 9.4155Z\"\n                                                        fill=\"#808080\"\n                                                        stroke=\"#808080\"\n                                                        strokeWidth=\"0.2\"\n                                                    />\n                                                </svg>\n                                                <span\n                                                    onClick={() => {\n                                                        setShowMobileTransHistory(\n                                                            !showMobileTransHistory\n                                                        );\n\n                                                        document.body.classList.toggle('overflow');\n                                                    }}\n                                                >\n                                                    Transaction Story\n                                                </span>\n                                            </div>\n                                            <div\n                                                id=\"trans-history-mobile\"\n                                                className={`TransactionHisoryMobile ${\n                                                    showMobileTransHistory ? 'active' : ''\n                                                }`}\n                                            >\n                                                <div className=\"TransactionHisoryMobile__Title\">\n                                                    {props.operationName === 'withdraw'\n                                                        ? 'My withdrawals'\n                                                        : 'My deposits'}\n                                                </div>\n                                                <div className=\"TransactionHisoryMobile__Content\">\n                                                    <TransactionHistory\n                                                        title=\"\"\n                                                        section={props.operationName}\n                                                        items={transactionList}\n                                                        onPageEnd={() => {\n                                                            if (transHistoryPage !== -1) {\n                                                                setTransHistoryPage(\n                                                                    transHistoryPage + 1\n                                                                );\n                                                            }\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                            {!showMobileTransHistory && (\n                                                <div className=\"flex-wrap d-flex justify-content-start\">\n                                                    <Form\n                                                        operationName={props.operationName}\n                                                        directOperation={directOperation}\n                                                        directOperationDisabled={false}\n                                                        lpPrice={lpPrice}\n                                                        sharePercent={sharePercent}\n                                                        selectedCoinIndex={selectedCoinIndex}\n                                                        dai={dai}\n                                                        usdc={usdc}\n                                                        usdt={usdt}\n                                                        busd={busd}\n                                                        slippage={slippage}\n                                                        onCoinChange={async (\n                                                            coinType: string,\n                                                            coinValue: number\n                                                        ) => {\n                                                            if (coinType === 'dai') {\n                                                                setDai(\n                                                                    Number(coinValue).toString()\n                                                                );\n                                                            } else if (coinType === 'usdc') {\n                                                                setUsdc(\n                                                                    Number(coinValue).toString()\n                                                                );\n                                                            } else if (coinType === 'usdt') {\n                                                                setUsdt(\n                                                                    Number(coinValue).toString()\n                                                                );\n                                                            } else if (coinType === 'busd') {\n                                                                setBusd(\n                                                                    Number(coinValue).toString()\n                                                                );\n\n                                                                if (!Number(coinValue)) {\n                                                                    setSlippage('');\n                                                                    return;\n                                                                }\n\n                                                                const slippage = await getSlippage(\n                                                                    coinValue.toString()\n                                                                );\n\n                                                                const usdtValue =\n                                                                    getFullDisplayBalance(\n                                                                        new BigNumber(slippage),\n                                                                        18\n                                                                    );\n\n                                                                log(\n                                                                    `For ${coinValue} BUSD you'll get ${usdtValue} USDT`\n                                                                );\n\n                                                                const slippageValue =\n                                                                    Number(coinValue) -\n                                                                    Number(usdtValue);\n\n                                                                const finalSlippage = (\n                                                                    (slippageValue / coinValue) *\n                                                                    100\n                                                                ).toPrecision(2);\n\n                                                                log(\n                                                                    `Final slippage is: ${finalSlippage}`\n                                                                );\n\n                                                                setSlippage(finalSlippage);\n                                                            }\n                                                        }}\n                                                        onOperationModeChange={(direct: any) => {\n                                                            setDirectOperation(!direct);\n\n                                                            if (\n                                                                direct &&\n                                                                props.operationName === 'withdraw'\n                                                            ) {\n                                                                setSelectedCoin('all');\n                                                                setSelectedCoinIndex(-1);\n                                                                setDaiChecked(false);\n                                                                setUsdcChecked(false);\n                                                                setUsdtChecked(false);\n                                                            } else {\n                                                                setSharePercent(100);\n                                                            }\n                                                        }}\n                                                    />\n                                                    {props.operationName === 'withdraw' && (\n                                                        <WithdrawOptions\n                                                            chainId={chainId}\n                                                            disabled={chainId === 56}\n                                                            sharePercent={sharePercent}\n                                                            daiChecked={daiChecked}\n                                                            usdcChecked={usdcChecked}\n                                                            usdtChecked={usdtChecked}\n                                                            coinsSelectionEnabled={!directOperation}\n                                                            selectedCoin={selectedCoin}\n                                                            balance={balance}\n                                                            lpPrice={lpPrice}\n                                                            onCoinSelect={(coin: string) => {\n                                                                if (!coin) {\n                                                                    return;\n                                                                }\n\n                                                                setSelectedCoin(coin);\n\n                                                                if (coin === 'all') {\n                                                                    const sum =\n                                                                        Number(dai) +\n                                                                        Number(usdc) +\n                                                                        Number(usdt);\n\n                                                                    const oneThird = (sum / 3)\n                                                                        .toFixed(2)\n                                                                        .toString();\n\n                                                                    setDai(oneThird);\n                                                                    setUsdc(oneThird);\n                                                                    setUsdt(oneThird);\n                                                                    setDirectOperation(false);\n                                                                    setSlippage('');\n                                                                } else {\n                                                                    setDirectOperation(true);\n                                                                }\n\n                                                                const coins = [\n                                                                    'dai',\n                                                                    'usdc',\n                                                                    'usdt',\n                                                                ];\n\n                                                                // -1 for \"all\"\n                                                                setSelectedCoinIndex(\n                                                                    coins.indexOf(coin)\n                                                                );\n                                                            }}\n                                                            onShareSelect={(percent: any) => {\n                                                                setSharePercent(percent);\n                                                            }}\n                                                        />\n                                                    )}\n                                                    {props.operationName === 'Deposit' && (\n                                                        <TransactionHistory\n                                                            title=\"My deposits history\"\n                                                            section={props.operationName}\n                                                            items={transactionList}\n                                                            onPageEnd={() => {\n                                                                if (transHistoryPage !== -1) {\n                                                                    setTransHistoryPage(\n                                                                        transHistoryPage + 1\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                    )}\n                                                    {props.operationName === 'withdraw' && (\n                                                        <TransactionHistory\n                                                            title=\"My withdrawals history\"\n                                                            section={props.operationName}\n                                                            items={transactionList}\n                                                            onPageEnd={() => {\n                                                                if (transHistoryPage !== -1) {\n                                                                    setTransHistoryPage(\n                                                                        transHistoryPage + 1\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                    )}\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                    )}\n                </Row>\n            </Container>\n        </React.Fragment>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Preloader/Preloader.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/index.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/SushiProvider/index.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/index.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Modals/index.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/utils.js",[],["368","369"],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/constants.js",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/functions/pools.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/formatbalance.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/logger.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/zunami.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/utils/erc20.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useLpPrice.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useBalanceOf.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useCrossChainBalances.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/usePendingOperations.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useEagerConnect.ts",["370"],"import { useEffect } from 'react';\nimport { LS_WALLET_TYPE_KEY } from '../components/WalletsModal/WalletsModal';\n\n/**\n * Eager wallet connection from saved data in local storage\n * @param {string} account Account address\n * @param {function} connect Connect function\n * @param {object} ethereum\n */\nconst useEagerConnect = (account: string, connect: any, ethereum: any) => {\n    useEffect(() => {\n        const connectorId = window.localStorage.getItem(LS_WALLET_TYPE_KEY);\n\n        if (!account && connectorId) {\n            connect(connectorId || 'injected');\n        }\n    }, [account, connect, ethereum, window.ethereum?.chainId]);\n};\n\nexport default useEagerConnect;\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useOldBscBalance.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useSupportedChain.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/usePausedContract.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdBalance.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useSushi.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdTotalSupply.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdLpPrice.ts",["371"],"import BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { BIG_ZERO } from '../utils/formatbalance';\nimport { useWallet } from 'use-wallet';\nimport useSushi from './useSushi';\nimport { getMasterChefContract } from '../sushi/utils';\nimport { log } from '../utils/logger';\nimport { isETH } from '../utils/zunami';\nimport { contractAddresses } from '../sushi/lib/constants';\n\nconst useUzdLpPrice = () => {\n    const { chainId, account } = useWallet();\n    const sushi = useSushi();\n    const masterChefContract = getMasterChefContract(sushi, chainId);\n\n    const [price, setPrice] = useState(new BigNumber(BIG_ZERO));\n\n    useEffect(() => {\n        if (!account || !chainId || !masterChefContract || !sushi || !isETH(chainId)) {\n            return;\n        }\n\n        const getLpPrice = async () => {\n            const contract = sushi.getUzdContract();\n            const value = await contract.methods.assetPriceCached().call();\n\n            log(`UZD lpPrice execution (${chainId}). Result: ${value}`);\n\n            if (value) {\n                setPrice(new BigNumber(value).dividedBy(new BigNumber(10).pow(18)));\n            }\n        };\n\n        getLpPrice();\n\n        let refreshInterval = setInterval(getLpPrice, 5000);\n        return () => clearInterval(refreshInterval);\n    }, [account, chainId, masterChefContract, sushi]);\n\n    return price;\n};\n\nexport default useUzdLpPrice;\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUserBalances.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useSlippage.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/api/api.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/InfoBlock/InfoBlock.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/BalanceInfoBlock/BalanceInfoBlock.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ClickableHeader/ClickableHeader.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/BscMigrationModal/BscMigrationModal.tsx",["372","373"],"import { useState, useCallback, useEffect } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport './BscMigrationModal.scss';\nimport { InfoBlock } from '../InfoBlock/InfoBlock';\nimport { BigNumber } from 'bignumber.js';\nimport { getBalanceNumber } from '../../utils/formatbalance';\nimport { getMasterChefContract } from '../../sushi/utils';\nimport { useWallet } from 'use-wallet';\nimport useSushi from './../../hooks/useSushi';\nimport { BIG_ZERO } from '../../utils/formatbalance';\nimport { isBSC } from '../../utils/zunami';\n\ninterface BscMigrationModalProps {\n    balance: BigNumber;\n    lpPrice: BigNumber;\n    show: boolean;\n    onWalletConnected?: Function;\n    onHide?: Function;\n}\n\nconst ALLOWANCE_SUM = '10000000000000000000000000';\nconst OLD_BSC_GATE_ADDRESS = '0x02a228D826Cbb1C0E8765A6DB6E7AB64EAA80BFD';\n\nexport const BscMigrationModal = (props: BscMigrationModalProps): JSX.Element => {\n    const [result, setResult] = useState('');\n    const [pending, setPending] = useState(false);\n    const { account, chainId } = useWallet();\n    const sushi = useSushi();\n    const [pendingGZLP, setPendingGZLP] = useState(false);\n    const [allowance, setAllowance] = useState(BIG_ZERO);\n    const [isGZLPapproved, setGZLPapproved] = useState(false);\n    const eth = window.ethereum;\n\n    useEffect(() => {\n        if (!account || chainId !== 56 || !props.show) {\n            return;\n        }\n\n        const getAllowance = async () => {\n            const oldBscContract = sushi.getBscContract(account);\n            oldBscContract.options.address = OLD_BSC_GATE_ADDRESS;\n\n            const allowanceValue = await oldBscContract.methods\n                .allowance(account, OLD_BSC_GATE_ADDRESS)\n                .call();\n\n            console.log(`Allowance for OLD BSC gateway: ${allowanceValue}`);\n\n            const allowanceBig = new BigNumber(allowanceValue);\n            setAllowance(allowanceBig);\n\n            setGZLPapproved(\n                allowanceBig.isGreaterThanOrEqualTo(new BigNumber('1000000000000000000000000'))\n            );\n        };\n\n        getAllowance();\n        let refreshInterval = setInterval(getAllowance, 10000);\n        return () => clearInterval(refreshInterval);\n    }, [chainId, account, sushi]);\n\n    const handleApproveGzlp = useCallback(async () => {\n        try {\n            setPendingGZLP(true);\n            const zunamiContract = getMasterChefContract(sushi, chainId);\n            zunamiContract.options.address = OLD_BSC_GATE_ADDRESS;\n\n            const tx = zunamiContract.methods\n                .approve(OLD_BSC_GATE_ADDRESS, ALLOWANCE_SUM)\n                .send({ from: account })\n                .on('transactionHash', (tx) => {\n                    return tx.transactionHash;\n                });\n            if (!tx) {\n                setPendingGZLP(false);\n            }\n        } catch (e) {\n            setPendingGZLP(false);\n        }\n    }, [account, chainId, sushi]);\n\n    const withdrawAll = useCallback(async () => {\n        if (!account || !chainId) {\n            return;\n        }\n\n        try {\n            if (!isBSC(chainId)) {\n                alert('Switch to BSC network to continue');\n                return;\n            }\n\n            setPending(true);\n            // OLD DEPRECATED BSC GATEWAY. DO NOT USE\n\n            const zunamiContract = getMasterChefContract(sushi, chainId);\n            zunamiContract.options.address = OLD_BSC_GATE_ADDRESS;\n            zunamiContract.options.from = account;\n            zunamiContract.defaultAccount = account;\n\n            await zunamiContract.methods\n                .delegateWithdrawal(props.balance.toFixed(0).toString())\n                .send({ from: account })\n                .on('transactionHash', (transactionHash) => {\n                    return transactionHash;\n                });\n\n            setResult(\n                `Success! Funds will be withdrawn within 24 hours. Page will be reloaded in 7 seconds...`\n            );\n\n            setTimeout(() => {\n                window.location.reload();\n            }, 7000);\n        } catch (error: any) {\n            debugger;\n            setResult(`Error while withdraw: ${error.message}`);\n        }\n\n        setPending(false);\n    }, [account, chainId, props.balance, sushi]);\n\n    return (\n        <Modal\n            show={props.show}\n            backdrop=\"static\"\n            animation={false}\n            keyboard={false}\n            centered\n            onHide={() => {\n                if (props.onHide) {\n                    props.onHide();\n                }\n            }}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title></Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"d-flex gap-3 flex-column justify-content-center align-items-center BscMigrationModal\">\n                <h3 className=\"text-center\">\n                    Zunami BSC Gateway v1.0 is outdated, you need to migrate to Zunami BSC Gateway\n                    v1.1\n                </h3>\n                <p className=\"text-center\">\n                    We apologize, but in order to continue using the protocol, you will need to\n                    withdraw funds from the outdated version and deposit them again. Don't worry!\n                    Your funds and income are saved. Funds will be withdrawn within 24 hours.\n                </p>\n                <InfoBlock\n                    title=\"Balance\"\n                    description={`$ ${getBalanceNumber(props.balance.multipliedBy(props.lpPrice))\n                        .toNumber()\n                        .toLocaleString('en')}`}\n                    withColor={true}\n                    isStrategy={false}\n                    colorfulBg={true}\n                />\n                {!isGZLPapproved && isBSC(chainId) && (\n                    <button\n                        className={`zun-button ${pendingGZLP ? 'disabled' : ''}`}\n                        onClick={handleApproveGzlp}\n                    >\n                        Approve GZLP\n                    </button>\n                )}\n                <button\n                    className={`zun-button ${pending ? 'disabled' : ''} ${\n                        !isGZLPapproved || !isBSC(chainId) ? 'hide' : ''\n                    }`}\n                    onClick={withdrawAll}\n                >\n                    Withdraw all\n                </button>\n                {!isBSC(chainId) && (\n                    <div className=\"alert alert-warning text-center\">\n                        Please, switch to Binance Smart Chain network.\n                        <button\n                            className=\"zun-button mt-2\"\n                            onClick={async () => {\n                                await eth.request({\n                                    method: 'wallet_switchEthereumChain',\n                                    params: [{ chainId: '0x38' }],\n                                });\n                                window.location.reload();\n                            }}\n                        >\n                            Switch to BSC\n                        </button>\n                    </div>\n                )}\n                {result && <div className=\"alert alert-info\">{result}</div>}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/UnsupportedChain/UnsupportedChain.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/BscMigrationModal2/BscMigrationModal2.tsx",["374","375"],"import { useState, useCallback, useEffect } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport '../BscMigrationModal/BscMigrationModal.scss';\nimport { InfoBlock } from '../InfoBlock/InfoBlock';\nimport { BigNumber } from 'bignumber.js';\nimport { getBalanceNumber } from '../../utils/formatbalance';\nimport { getMasterChefContract } from '../../sushi/utils';\nimport { useWallet } from 'use-wallet';\nimport useSushi from '../../hooks/useSushi';\nimport { BIG_ZERO } from '../../utils/formatbalance';\nimport { isBSC } from '../../utils/zunami';\nimport { contractAddresses } from '../../sushi/lib/constants';\nimport migratorAbi from '../../sushi/lib/abi/bsc_1.2_migrator.json';\nimport Web3 from 'web3';\n\ninterface BscMigrationModalProps {\n    balance: BigNumber;\n    lpPrice: BigNumber;\n    show: boolean;\n    onWalletConnected?: Function;\n    onHide?: Function;\n}\n\nconst ALLOWANCE_SUM = '10000000000000000000000000';\n\nexport const BscMigrationModal2 = (props: BscMigrationModalProps): JSX.Element => {\n    const [result, setResult] = useState('');\n    const [pending, setPending] = useState(false);\n    const { account, chainId, ethereum } = useWallet();\n    const sushi = useSushi();\n    const [pendingGZLP, setPendingGZLP] = useState(false);\n    const [allowance, setAllowance] = useState(BIG_ZERO);\n    const [isGZLPapproved, setGZLPapproved] = useState(false);\n    const eth = window.ethereum;\n\n    useEffect(() => {\n        if (!account || chainId !== 56 || !props.show) {\n            return;\n        }\n\n        const getAllowance = async () => {\n            const oldBscContract = sushi.getBscContract(account);\n            oldBscContract.options.address = contractAddresses.deprecated.v_1_1_bsc;\n\n            const allowanceValue = await oldBscContract.methods\n                .allowance(account, contractAddresses.zunami_bsc_migrator.v1_1_to_1_2)\n                .call();\n\n            console.log(`Allowance for BSC migrator: ${allowanceValue}`);\n\n            const allowanceBig = new BigNumber(allowanceValue);\n            setAllowance(allowanceBig);\n\n            setGZLPapproved(\n                allowanceBig.isGreaterThanOrEqualTo(new BigNumber('1000000000000000000000000'))\n            );\n        };\n\n        getAllowance();\n        let refreshInterval = setInterval(getAllowance, 5000);\n        return () => clearInterval(refreshInterval);\n    }, [chainId, account, sushi, props.show]);\n\n    const handleApproveGzlp = useCallback(async () => {\n        try {\n            setPendingGZLP(true);\n            const zunamiContract = getMasterChefContract(sushi, chainId);\n            zunamiContract.options.address = contractAddresses.deprecated.v_1_1_bsc;\n\n            const tx = zunamiContract.methods\n                .approve(contractAddresses.zunami_bsc_migrator.v1_1_to_1_2, ALLOWANCE_SUM)\n                .send({ from: account })\n                .on('transactionHash', (tx) => {\n                    return tx.transactionHash;\n                });\n            if (!tx) {\n                setPendingGZLP(false);\n            }\n        } catch (e) {\n            setPendingGZLP(false);\n        }\n    }, [account, chainId, sushi]);\n\n    const migrate = useCallback(async () => {\n        if (!account || !chainId) {\n            return;\n        }\n\n        try {\n            if (!isBSC(chainId)) {\n                alert('Switch to BSC network to continue');\n                return;\n            }\n\n            setPending(true);\n\n            const web3 = new Web3(ethereum);\n            const zunamiContract = new web3.eth.Contract(migratorAbi);\n            zunamiContract.options.address = contractAddresses.zunami_bsc_migrator.v1_1_to_1_2;\n            zunamiContract.options.from = account;\n            zunamiContract.defaultAccount = account;\n\n            await zunamiContract.methods\n                .migrate()\n                .send({ from: account })\n                .on('transactionHash', (transactionHash) => {\n                    return transactionHash;\n                });\n\n            setResult(\n                `Funds successfully migrated. Page will be reloaded in 7 seconds...`\n            );\n\n            setTimeout(() => {\n                window.location.reload();\n            }, 7000);\n        } catch (error: any) {\n            debugger;\n            setResult(`Error while withdraw: ${error.message}`);\n        }\n\n        setPending(false);\n    }, [account, chainId, props.balance, sushi]);\n\n    return (\n        <Modal\n            show={props.show}\n            backdrop=\"static\"\n            animation={false}\n            keyboard={false}\n            centered\n            onHide={() => {\n                if (props.onHide) {\n                    props.onHide();\n                }\n            }}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title></Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"d-flex gap-3 flex-column justify-content-center align-items-center BscMigrationModal\">\n                <h3 className=\"text-center\">\n                    Zunami BSC Gateway v1.1 is outdated, you need to migrate to Zunami BSC Gateway\n                    v1.2\n                </h3>\n                <p className=\"text-center\">\n                We apologize, but in order to continue using the protocol, you will need to migrate your funds\n                from the outdated version and to the new one. Don’t worry!\n                Your funds and income are saved. Funds will be migrated immediately.\n                </p>\n                <InfoBlock\n                    title=\"Balance\"\n                    description={`$ ${getBalanceNumber(props.balance.multipliedBy(props.lpPrice))\n                        .toNumber()\n                        .toLocaleString('en')}`}\n                    withColor={true}\n                    isStrategy={false}\n                    colorfulBg={true}\n                />\n                {!isGZLPapproved && isBSC(chainId) && (\n                    <button\n                        className={`zun-button ${pendingGZLP ? 'disabled' : ''}`}\n                        onClick={handleApproveGzlp}\n                    >\n                        Approve GZLP\n                    </button>\n                )}\n                <button\n                    className={`zun-button ${pending ? 'disabled' : ''} ${\n                        !isGZLPapproved || !isBSC(chainId) ? 'hide' : ''\n                    }`}\n                    onClick={migrate}\n                >\n                    Migrate\n                </button>\n                {!isBSC(chainId) && (\n                    <div className=\"alert alert-warning text-center\">\n                        Please, switch to Binance Smart Chain network.\n                        <button\n                            className=\"zun-button mt-2\"\n                            onClick={async () => {\n                                await eth.request({\n                                    method: 'wallet_switchEthereumChain',\n                                    params: [{ chainId: '0x38' }],\n                                });\n                                window.location.reload();\n                            }}\n                        >\n                            Switch to BSC\n                        </button>\n                    </div>\n                )}\n                {result && <div className=\"alert alert-info\">{result}</div>}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/EthMergeWarningModal/EthMergeWarningModal.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Header/Header.tsx",["376","377","378","379"],"import { useState } from 'react';\nimport './Header.scss';\nimport { Navbar } from 'react-bootstrap';\nimport useOnlineState from '../../hooks/useOnlineState';\nimport { ErrorToast } from '../ErrorToast/ErrorToast';\nimport { WalletStatus } from '../WalletStatus/WalletStatus';\nimport { ThemeSwitcher } from '../ThemeSwitcher/ThemeSwitcher';\nimport { NavMenu } from './NavMenu/NavMenu';\nimport { NetworkSelector } from '../NetworkSelector/NetworkSelector';\nimport { useWallet } from 'use-wallet';\nimport { isETH } from '../../utils/zunami';\n\nfunction chainNameToTooltip(chainId: number) {\n    if (chainId === 1 || !chainId) {\n        return (\n            <div>\n                Please note. The contract{' '}\n                <a\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    href=\"https://github.com/ZunamiLab/ZunamiProtocol/tree/main/audit\"\n                >\n                    has been audited\n                </a>\n                , <br />\n                but it's still a beta version. Use it at your own risk\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                Please note. This is the alpha version of the BSC cross-chain gateway. Use it at\n                your own risk!\n            </div>\n        );\n    }\n}\n\nexport const Header = (): JSX.Element => {\n    const logoVariant = document.body.classList.contains('dark') ? 'logo-dark.svg' : 'logo.svg';\n    const [open, setOpen] = useState(false);\n    const isOnline = useOnlineState();\n    const { chainId } = useWallet();\n\n    return (\n        <Navbar expand=\"lg\" className={'Header'}>\n            <ErrorToast visible={!isOnline} />\n            <div className=\"inner h-100\">\n                <NavMenu\n                    onSelect={() => {\n                        document.body.classList.remove('overflow');\n                    }}\n                />\n                <NetworkSelector />\n                <WalletStatus />\n                <svg\n                    width=\"2\"\n                    height=\"41\"\n                    viewBox=\"0 0 2 41\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"divider\"\n                >\n                    <path d=\"M1 1L1 40\" stroke=\"#F3EBD2\" strokeLinecap=\"round\" />\n                </svg>\n                <ThemeSwitcher />\n                <div\n                    className=\"nav-menu\"\n                    onClick={() => {\n                        setOpen(!open);\n                        document.getElementById('MobileSidebar').classList.toggle('active');\n                        document.body.classList.toggle('overflow');\n                    }}\n                >\n                    {open && (\n                        <svg\n                            width=\"21\"\n                            height=\"21\"\n                            viewBox=\"0 0 21 21\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                            <path\n                                d=\"M1 19.3848L19.3848 0.99999\"\n                                stroke=\"#F95A05\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                            />\n                            <path\n                                d=\"M1 1L19.3848 19.3848\"\n                                stroke=\"#F95A05\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                            />\n                        </svg>\n                    )}\n                    {!open && (\n                        <svg\n                            width=\"35\"\n                            height=\"10\"\n                            viewBox=\"0 0 35 10\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                            <path\n                                d=\"M13.2793 9L34.0002 9\"\n                                stroke=\"#F95A05\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                            />\n                            <path\n                                d=\"M1 1H34\"\n                                stroke=\"#F95A05\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                            />\n                        </svg>\n                    )}\n                </div>\n            </div>\n        </Navbar>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/PendingBalance/PendingBalance.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/SideBar/MobileSidebar/MobileSidebar.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/SideBar/SideBar.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ApyChart/ApyChart.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/WalletStatus/WalletStatus.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Chart/Chart.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/UzdMigrationModal/UzdMigrationModal.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/NetworkSelector/NetworkSelector.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/Form.tsx",["380"],"import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { Input } from './Input/Input';\nimport { Preloader } from '../Preloader/Preloader';\nimport './Form.scss';\nimport {\n    BIG_ZERO,\n    daiAddress,\n    getBalanceNumber,\n    getFullDisplayBalance,\n    usdcAddress,\n    usdtAddress,\n    bscUsdtAddress,\n    busdAddress,\n    plgUsdtAddress,\n} from '../../utils/formatbalance';\nimport { useAllowanceStables } from '../../hooks/useAllowance';\nimport { useUserBalances } from '../../hooks/useUserBalances';\nimport useBalanceOf from '../../hooks/useBalanceOf';\nimport useApprove from '../../hooks/useApprove';\nimport useStake from '../../hooks/useStake';\nimport useUnstake from '../../hooks/useUnstake';\nimport { BigNumber } from 'bignumber.js';\nimport { Toast, ToastContainer } from 'react-bootstrap';\nimport { ActionSelector } from './ActionSelector/ActionSelector';\nimport { DirectAction } from './DirectAction/DirectAction';\nimport { getActiveWalletName, getActiveWalletAddress } from '../WalletsModal/WalletsModal';\nimport { useGzlpAllowance } from '../../hooks/useGzlpAllowance';\nimport { FormProps, TransactionError } from './Form.types';\nimport { useWallet } from 'use-wallet';\nimport { log } from '../../utils/logger';\nimport { isBSC, isETH, isPLG } from '../../utils/zunami';\nimport { APPROVE_SUM } from '../../sushi/utils';\n\nfunction getScanAddressByChainId(chainId: number) {\n    let address = 'etherscan.io';\n\n    switch (chainId) {\n        case 56:\n            address = 'bscscan.com';\n            break;\n        case 137:\n            address = 'polygonscan.com';\n            break;\n    }\n\n    return address;\n}\n\nconst getDepositValidationError = (\n    dai: String,\n    usdc: String,\n    usdt: String,\n    isApproved: Boolean,\n    depositExceedAmount: Boolean\n) => {\n    let error = '';\n\n    if (dai === '' && usdc === '' && usdt === '') {\n        error = 'Please, enter the amount of stablecoins to deposit';\n    } else if (depositExceedAmount) {\n        error = \"You're trying to deposit more than you have\";\n    } else if (!isApproved) {\n        error = 'You have to approve your funds before the deposit';\n    }\n\n    return error;\n};\n\nconst getWithdrawValidationError = (\n    dai: String,\n    usdc: String,\n    usdt: String,\n    fullBalanceLpShare: String,\n    userMaxWithdraw: BigNumber,\n    lpShareToWithdraw: BigNumber\n) => {\n    let error = '';\n    if (dai === '' && usdc === '' && usdt === '') {\n        error = 'Please, enter the amount to withdraw';\n    } else if (userMaxWithdraw.toNumber() < lpShareToWithdraw.toNumber()) {\n        error = \"You're trying to withdraw more than you have\";\n    } else if (fullBalanceLpShare === '0' || lpShareToWithdraw.toNumber() === 0) {\n        error = 'You have zero LP shares';\n    }\n\n    return error;\n};\n\nconst getBscWithdrawValidationError = (\n    isApproved: Boolean,\n    lpShareToWithdraw: BigNumber\n) => {\n    let error = '';\n\n    if (!isApproved) {\n        error = 'Please, approve GZLP before withdraw';\n    }\n\n    if (lpShareToWithdraw.toNumber() === 0) {\n        error = 'You have no funds';\n    }\n\n    return error;\n};\n\nexport const Form = (props: FormProps): JSX.Element => {\n    const { account, chainId } = useWallet();\n\n    const [action, setAction] = useState(\n        props.operationName === 'Deposit' ? 'deposit' : 'withdraw'\n    );\n\n    const daiInputHandler = (newValue: string) => {\n        if (props.onCoinChange) {\n            props.onCoinChange('dai', newValue);\n        }\n    };\n\n    const usdcInputHandler = (newValue: string) => {\n        if (props.onCoinChange) {\n            props.onCoinChange('usdc', newValue);\n        }\n    };\n\n    const usdtInputHandler = (newValue: string) => {\n        if (props.onCoinChange) {\n            props.onCoinChange('usdt', newValue);\n        }\n    };\n\n    const busdInputHandler = (newValue: string) => {\n        if (props.onCoinChange) {\n            props.onCoinChange('busd', newValue);\n        }\n    };\n\n    const [pendingDAI, setPendingDAI] = useState(false);\n    const [pendingUSDC, setPendingUSDC] = useState(false);\n    const [pendingUSDT, setPendingUSDT] = useState(false);\n    const [pendingBUSD, setPendingBUSD] = useState(false);\n    const [pendingGZLP, setPendingGZLP] = useState(false);\n\n    // wrapped in useMemo to prevent lpShareToWithdraw hook deps change on every render\n    const userLpAmount = useBalanceOf();\n    const userBalanceList = useUserBalances();\n    const approveList = useAllowanceStables();\n    const gzlpAllowance = useGzlpAllowance();\n\n    const stableInputsSum =\n        (parseFloat(props.dai) || 0) +\n        (parseFloat(props.usdc) || 0) +\n        (parseFloat(props.usdt) || 0) +\n        (parseFloat(props.busd) || 0);\n    // user allowance\n    const isApprovedTokens = useMemo(() => {\n        return [\n            approveList ? approveList[0].toNumber() > 0 : false,\n            approveList ? approveList[1].toNumber() > 0 : false,\n            approveList ? approveList[2].toNumber() > 0 : false,\n            approveList ? approveList[3].toNumber() > 0 : false,\n        ];\n    }, [approveList]);\n\n    // max for withdraw or deposit\n    const userMaxWithdraw = props.lpPrice.multipliedBy(userLpAmount) || BIG_ZERO;\n\n    const userMaxWithdrawMinusInput =\n        !userMaxWithdraw || userMaxWithdraw.toNumber() <= 0 || !userMaxWithdraw.toNumber()\n            ? BIG_ZERO\n            : new BigNumber(userMaxWithdraw.toNumber() - stableInputsSum);\n\n    // max sums for deposit\n    const userMaxDeposit = [\n        (userBalanceList && userBalanceList[0].toNumber() > 0 && userBalanceList[0]) || BIG_ZERO,\n        (userBalanceList && userBalanceList[1].toNumber() > 0 && userBalanceList[1]) || BIG_ZERO,\n        (userBalanceList && userBalanceList[2].toNumber() > 0 && userBalanceList[2]) || BIG_ZERO,\n        (userBalanceList && userBalanceList[3].toNumber() > 0 && userBalanceList[3]) || BIG_ZERO,\n    ];\n\n    // final array both for deposit and withdraw\n    const max = [\n        action === 'deposit' ? userMaxDeposit[0] : userMaxWithdrawMinusInput,\n        action === 'deposit' ? userMaxDeposit[1] : userMaxWithdrawMinusInput,\n        action === 'deposit' ? userMaxDeposit[2] : userMaxWithdrawMinusInput,\n        action === 'deposit' ? userMaxDeposit[3] : userMaxWithdrawMinusInput,\n    ];\n\n    // approves\n    const { onApprove, onGZLPApprove } = useApprove();\n    const handleApproveDai = useCallback(async () => {\n        try {\n            setPendingDAI(true);\n            const tx = onApprove(daiAddress);\n            if (!tx) {\n                setPendingDAI(false);\n            }\n        } catch (e) {\n            setPendingDAI(false);\n        }\n    }, [onApprove]);\n    const handleApproveUsdc = useCallback(async () => {\n        try {\n            setPendingUSDC(true);\n            const tx = onApprove(usdcAddress);\n            if (!tx) {\n                setPendingUSDC(false);\n            }\n        } catch (e) {\n            setPendingUSDC(false);\n        }\n    }, [onApprove]);\n    const handleApproveUsdt = useCallback(async () => {\n        setPendingUSDT(true);\n\n        try {\n            let address = usdtAddress;\n            if (isBSC(chainId)) {\n                address = bscUsdtAddress;\n            }\n            if (isPLG(chainId)) {\n                address = plgUsdtAddress;\n            }\n\n            const tx = onApprove(address);\n            if (!tx) {\n                setPendingUSDT(false);\n            }\n        } catch (e) {\n            setPendingUSDT(false);\n        }\n\n        setPendingUSDT(false);\n    }, [onApprove, chainId]);\n    const handleApproveGzlp = useCallback(async () => {\n        try {\n            setPendingGZLP(true);\n            const tx = onGZLPApprove();\n            if (!tx) {\n                setPendingGZLP(false);\n            }\n        } catch (e) {\n            setPendingGZLP(false);\n        }\n    }, [onGZLPApprove]);\n\n    const handleApproveBusd = useCallback(async () => {\n        setPendingBUSD(true);\n        log(`handleApproveBusd callback`);\n\n        try {\n            const tx = onApprove(busdAddress);\n            if (!tx) {\n                setPendingBUSD(false);\n            }\n        } catch (e) {\n            setPendingBUSD(false);\n        }\n\n        setPendingBUSD(false);\n    }, [onApprove]);\n\n    const fullBalanceLpShare = useMemo(() => {\n        return getFullDisplayBalance(userLpAmount);\n    }, [userLpAmount]);\n\n    // caclulate lpshare to withdraw\n    const lpShareToWithdraw = useMemo(() => {\n        if (props.operationName !== 'withdraw') {\n            return BIG_ZERO;\n        }\n\n        const sharesAmount = new BigNumber(\n            stableInputsSum / getBalanceNumber(props.lpPrice).toNumber()\n        );\n\n        if (\n            sharesAmount.toNumber() === 0 ||\n            sharesAmount.toNumber() === Infinity ||\n            props.lpPrice.toNumber() === 0\n        ) {\n            return BIG_ZERO;\n        }\n\n        return sharesAmount;\n    }, [stableInputsSum, props.lpPrice, props.operationName]);\n\n    const fullBalancetoWithdraw = useMemo(() => {\n        const balance = getFullDisplayBalance(lpShareToWithdraw, 18);\n        return balance;\n    }, [lpShareToWithdraw, chainId]);\n\n    // deposit and withdraw functions\n    const depositExceedAmount =\n        parseInt(props.dai) > getBalanceNumber(userBalanceList[0]).toNumber() ||\n        parseInt(props.usdc) > getBalanceNumber(userBalanceList[1], 6).toNumber() ||\n        parseInt(props.usdt) > getBalanceNumber(userBalanceList[2], 6).toNumber();\n\n    const [pendingTx, setPendingTx] = useState(false);\n    const [transactionId, setTransactionId] = useState(undefined);\n\n    const { onStake } = useStake(\n        [\n            {\n                name: 'DAI',\n                value: props.dai === '' ? '0' : props.dai,\n            },\n            {\n                name: 'USDC',\n                value: props.usdc === '' ? '0' : props.usdc,\n            },\n            {\n                name: 'USDT',\n                value: props.usdt === '' ? '0' : props.usdt,\n            },\n            {\n                name: 'BUSD',\n                value: props.busd === '' ? '0' : props.busd,\n            },\n        ],\n        props.directOperation\n    );\n\n    const { onUnstake } = useUnstake(\n        userLpAmount,\n        !props.directOperation,\n        props.sharePercent,\n        props.directOperation && props.selectedCoinIndex === -1 ? 0 : props.selectedCoinIndex\n    );\n\n    // TODO: need detect canceled tx's by user\n    const [transactionError, setTransactionError] = useState<TransactionError>();\n    const emptyFunds = isETH(chainId)\n        ? !Number(props.dai) && !Number(props.usdc) && !Number(props.usdt)\n        : !Number(props.usdt) && !Number(props.busd);\n\n    const [isApproved, setIsApproved] = useState(false);\n\n    useEffect(() => {\n        if (chainId === 1) {\n            setIsApproved(\n                approveList &&\n                    ((parseFloat(props.dai) > 0 && isApprovedTokens[0]) ||\n                        props.dai === '0' ||\n                        props.dai === '') &&\n                    ((parseFloat(props.usdc) > 0 && isApprovedTokens[1]) ||\n                        props.usdc === '0' ||\n                        props.usdc === '') &&\n                    ((parseFloat(props.usdt) > 0 && isApprovedTokens[2]) ||\n                        props.usdt === '0' ||\n                        props.usdt === '')\n            );\n        } else if (isBSC(chainId)) {\n            let approveVal = false;\n\n            if (props.operationName === 'withdraw') {\n                approveVal = gzlpAllowance.isGreaterThanOrEqualTo(\n                    new BigNumber(APPROVE_SUM)\n                );\n\n                log(`Withdrawal approve set to ${approveVal}, it's less than ${APPROVE_SUM}`);\n            } else {\n                if (props.busd !== '0') {\n                    approveVal = isApprovedTokens[3];\n                } else {\n                    approveVal = isApprovedTokens[2];\n                }\n            }\n\n            log(\n                `Approved: ${approveVal}, GZLP allowance: ${gzlpAllowance.toNumber()}, USDT: ${parseFloat(\n                    props.usdt\n                )}, BUSD: ${parseFloat(props.busd)}`\n            );\n\n            setIsApproved(approveVal);\n        } else if (isPLG(chainId)) {\n            let approveVal = false;\n\n            if (props.operationName === 'withdraw') {\n                approveVal = gzlpAllowance.isGreaterThanOrEqualTo(\n                    new BigNumber(APPROVE_SUM)\n                );\n\n                log(`Withdrawal approve set to ${approveVal}, it's less than ${APPROVE_SUM}`);\n                setIsApproved(approveVal);\n                return;\n            } \n\n            setIsApproved(\n                approveList &&\n                    ((parseFloat(props.dai) > 0 && isApprovedTokens[0]) ||\n                        props.dai === '0' ||\n                        props.dai === '') &&\n                    ((parseFloat(props.usdc) > 0 && isApprovedTokens[1]) ||\n                        props.usdc === '0' ||\n                        props.usdc === '') &&\n                    ((parseFloat(props.usdt) > 0 && isApprovedTokens[2]) ||\n                        props.usdt === '0' ||\n                        props.usdt === '')\n            );\n        }\n    }, [\n        gzlpAllowance,\n        props.operationName,\n        chainId,\n        approveList,\n        props.usdc,\n        props.dai,\n        props.usdt,\n        props.busd,\n        isApprovedTokens,\n    ]);\n\n    const validationError =\n        action === 'deposit'\n            ? getDepositValidationError(\n                  props.dai,\n                  props.usdc,\n                  props.usdt,\n                  isApproved,\n                  depositExceedAmount\n              )\n            : isETH(chainId) ? getWithdrawValidationError(\n                  props.dai,\n                  props.usdc,\n                  props.usdt,\n                  fullBalanceLpShare,\n                  userMaxWithdraw,\n                  lpShareToWithdraw\n              ) : getBscWithdrawValidationError(isApproved, lpShareToWithdraw);\n\n    const cantDeposit = emptyFunds || !isApproved || pendingTx || depositExceedAmount;\n\n    if (isETH(chainId)) {\n        log(\n            `Approved stables status: DAI: ${isApprovedTokens[0].toString()}, USDT: ${isApprovedTokens[1].toString()}, USDC: ${isApprovedTokens[2].toString()}`\n        );\n    }\n\n    if (isBSC(chainId)) {\n        log(\n            `Approved stables status: USDT: ${isApprovedTokens[1].toString()}, BUSD: ${isApprovedTokens[2].toString()}`\n        );\n    }\n\n    if (isPLG(chainId)) {\n        log(\n            `Approved stables status: DAI: ${isApprovedTokens[0].toString()}, USDT: ${isApprovedTokens[1].toString()}, USDC: ${isApprovedTokens[2].toString()}`\n        );\n    }\n\n    if (props.operationName === 'deposit') {\n        log(\n            `Can deposit: emptyFunds: ${emptyFunds}, isApproved: ${isApproved}, pendingTx: ${pendingTx}, depositExceedAmount: ${depositExceedAmount}`\n        );\n    }\n\n    const canWithdraw = isETH(chainId) ?\n        !validationError :\n        // BSC withdraw only if there is a balance and approove granted\n        userLpAmount.toNumber() > 0 && !validationError;\n\n    if (props.operationName === 'withdraw') {\n        log(`Can withdraw: ${canWithdraw}. Is approved: ${isApproved}`);\n\n        if (validationError) {\n            log(`Can't withdraw due to error: ${validationError}`);\n        }\n    }\n\n    return (\n        <div className={'Form'}>\n            <ToastContainer position={'top-end'} className={'toasts mt-3 me-3'}>\n                {transactionError && (\n                    <Toast onClose={() => setTransactionError(undefined)} delay={5000} autohide>\n                        <Toast.Body>Sorry, we couldn't complete the transaction</Toast.Body>\n                    </Toast>\n                )}\n                {transactionId && (\n                    <Toast onClose={() => setTransactionId(undefined)} delay={15000} autohide>\n                        <Toast.Body>\n                            Success! Check out the{' '}\n                            <a\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                href={`https://${\n                                    getScanAddressByChainId(chainId)\n                                }/tx/${transactionId}`}\n                            >\n                                transaction\n                            </a>\n                        </Toast.Body>\n                    </Toast>\n                )}\n            </ToastContainer>\n            <form\n                id={action}\n                onSubmit={async (e) => {\n                    e.preventDefault();\n\n                    const totalSum =\n                        parseInt(props.dai, 10) +\n                        parseInt(props.usdc, 10) +\n                        parseInt(props.usdt, 10);\n\n                    switch (action) {\n                        case 'withdraw':\n                            setPendingTx(true);\n\n                            try {\n                                const tx = await onUnstake();\n\n                                setTransactionId(tx.transactionHash);\n\n                                // @ts-ignore\n                                if (window.dataLayer) {\n                                    window.dataLayer.push({\n                                        event: 'withdrawal',\n                                        userID: getActiveWalletAddress(),\n                                        type: getActiveWalletName(),\n                                        value: totalSum,\n                                    });\n                                }\n                            } catch (error: any) {\n                                log(`Withdraw error: ${error.message}`);\n                                setTransactionError(error);\n                            }\n\n                            if (props.onWithdraw) {\n                                props.onWithdraw();\n                            }\n\n                            setPendingTx(false);\n                            break;\n                        case 'deposit':\n                            setPendingTx(true);\n\n                            try {\n                                const tx = await onStake();\n                                setTransactionId(tx.transactionHash);\n                                // @ts-ignore\n                                if (window.dataLayer) {\n                                    window.dataLayer.push({\n                                        event: 'deposit',\n                                        userID: getActiveWalletAddress(),\n                                        type: getActiveWalletName(),\n                                        value: totalSum,\n                                    });\n                                }\n                            } catch (error: any) {\n                                log(`Deposit error: ${error.message}`);\n                                setTransactionError(error);\n                            }\n\n                            if (props.onDeposit) {\n                                props.onDeposit();\n                            }\n\n                            setPendingTx(false);\n                            break;\n                    }\n                }}\n            >\n                <ActionSelector\n                    value={action}\n                    onChange={(action: string) => {\n                        setAction(action);\n                    }}\n                />\n                <div className=\"inner\">\n                    {chainId === 1 && (\n                        <Input\n                            action={action}\n                            name=\"DAI\"\n                            value={props.dai}\n                            handler={daiInputHandler}\n                            max={max[0]}\n                            disabled={action === 'withdraw'}\n                            chainId={chainId}\n                        />\n                    )}\n                    {chainId === 1 && (\n                        <Input\n                            action={action}\n                            name=\"USDC\"\n                            value={props.usdc}\n                            handler={usdcInputHandler}\n                            max={max[1]}\n                            disabled={action === 'withdraw'}\n                            chainId={chainId}\n                        />\n                    )}\n                    <Input\n                        action={action}\n                        name=\"USDT\"\n                        value={props.usdt}\n                        handler={usdtInputHandler}\n                        max={max[2]}\n                        disabled={\n                            action === 'withdraw' ||\n                            (chainId === 56 && action === 'deposit' && Number(props.busd) > 0)\n                        }\n                        chainId={chainId}\n                    />\n                    {chainId === 56 && action === 'deposit' && (\n                        <Input\n                            action={action}\n                            name=\"BUSD\"\n                            value={props.busd}\n                            handler={busdInputHandler}\n                            max={max[3]}\n                            chainId={chainId}\n                            disabled={Number(props.usdt) > 0}\n                        />\n                    )}\n                    {action === 'deposit' && (\n                        <div className=\"deposit-action flex-wrap d-flex flex-row flex-wrap buttons align-items-center\">\n                            {account &&\n                                parseFloat(props.dai) > 0 &&\n                                !isApprovedTokens[0] &&\n                                chainId === 1 && (\n                                    <button\n                                        disabled={pendingDAI || depositExceedAmount}\n                                        onClick={handleApproveDai}\n                                        type=\"button\"\n                                        className=\"mb-2\"\n                                    >\n                                        Approve DAI{' '}\n                                    </button>\n                                )}\n                            {account &&\n                                parseFloat(props.usdc) > 0 &&\n                                !isApprovedTokens[1] &&\n                                chainId === 1 && (\n                                    <button\n                                        disabled={pendingUSDC || depositExceedAmount}\n                                        onClick={handleApproveUsdc}\n                                        type=\"button\"\n                                        className=\"mb-2\"\n                                    >\n                                        Approve USDC{' '}\n                                    </button>\n                                )}\n                            {account && parseFloat(props.usdt) > 0 && !isApprovedTokens[2] && (\n                                <button\n                                    disabled={pendingUSDT || depositExceedAmount}\n                                    onClick={handleApproveUsdt}\n                                    type=\"button\"\n                                    className=\"mb-2\"\n                                >\n                                    Approve USDT{' '}\n                                </button>\n                            )}\n                            {account && parseFloat(props.busd) > 0 && !isApprovedTokens[3] && (\n                                <button\n                                    disabled={pendingBUSD || depositExceedAmount}\n                                    onClick={handleApproveBusd}\n                                    type=\"button\"\n                                    className=\"mb-2\"\n                                >\n                                    Approve BUSD{' '}\n                                </button>\n                            )}\n                            {account && (\n                                <div className=\"deposit-button-wrapper flex-wrap\">\n                                    <button type=\"submit\" disabled={cantDeposit}>\n                                        Deposit\n                                    </button>\n                                    {!pendingTx && (\n                                        <DirectAction\n                                            actionName=\"deposit\"\n                                            checked={!props.directOperation}\n                                            disabled={chainId !== 1}\n                                            hint={`${\n                                                chainId === 1\n                                                    ? 'When using optimized deposit funds will be deposited within 24 hours and many times cheaper'\n                                                    : 'When using deposit funds will be deposited within 24 hours, because users’ funds accumulate in one batch and distribute to the ETH network in Zunami App.'\n                                            }`}\n                                            onChange={(state: boolean) => {\n                                                if (props.onOperationModeChange) {\n                                                    props.onOperationModeChange(state);\n                                                }\n                                            }}\n                                        />\n                                    )}\n                                    {pendingTx && <Preloader className=\"ms-2\" />}\n                                    {props.slippage && (\n                                        <div className=\"panel Slippage\">\n                                            <div className=\"panel-body\">\n                                                <span>Slippage: </span>\n                                                <span\n                                                    className={`text-${\n                                                        Number(props.slippage) >= 0.4\n                                                            ? 'danger'\n                                                            : 'success'\n                                                    }`}\n                                                >\n                                                    {props.slippage}%\n                                                </span>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n                            {validationError && (\n                                <div className={'mt-2 text-danger error'}>{validationError}</div>\n                            )}\n                        </div>\n                    )}\n\n                    {action === 'withdraw' && (\n                        <div>\n                            {account && (\n                                <div className=\"deposit-button-wrapper flex-wrap\">\n                                    {account &&\n                                        !isApproved &&\n                                        Number(fullBalancetoWithdraw) > 0 &&\n                                        chainId !== 1 && (\n                                            <button\n                                                disabled={pendingGZLP}\n                                                onClick={handleApproveGzlp}\n                                                className=\"me-2\"\n                                            >\n                                                Approve GZLP\n                                            </button>\n                                        )}\n                                    <button\n                                        type=\"submit\"\n                                        className={`${!canWithdraw ? 'disabled' : ''}`}\n                                    >\n                                        Withdraw\n                                    </button>\n                                    {!pendingTx && (\n                                        <DirectAction\n                                            actionName=\"withdraw\"\n                                            disabled={\n                                                props.directOperationDisabled || chainId !== 1\n                                            }\n                                            checked={!props.directOperation}\n                                            hint=\"When using optimized withdrawal funds will be withdrawn within 24 hours and many times cheaper. Optimized withdraw available only in all coins.\"\n                                            onChange={(state: boolean) => {\n                                                if (props.onOperationModeChange) {\n                                                    props.onOperationModeChange(state);\n                                                }\n                                            }}\n                                        />\n                                    )}\n                                    {pendingTx && <Preloader className=\"ms-2\" />}\n                                    {props.slippage && (\n                                        <div className={`panel Slippage network-${chainId}`}>\n                                            <div className=\"panel-body\">\n                                                <span>Slippage: </span>\n                                                <span\n                                                    className={`text-${\n                                                        Number(props.slippage) < -0.4\n                                                            ? 'danger'\n                                                            : 'success'\n                                                    }`}\n                                                >\n                                                    {props.slippage}%\n                                                </span>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                    )}\n                    {\n                        validationError && props.operationName === 'withdraw' && (\n                            <div className={'mt-2 text-danger error withdraw-error'}>{validationError}</div>\n                        )\n                    }\n                </div>\n            </form>\n        </div>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/WelcomeCarousel/WelcomeCarousel.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/WithdrawOptions/WithdrawOptions.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/TransactionHistory/TransactionHistory.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/context.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/SushiProvider/SushiProvider.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/EthereumExplorerProvider.tsx",["381","382","383"],"import React, { createContext, useEffect, useState } from 'react';\nimport { NetworkConnector } from './NetworkConnector';\n\nimport config from './../../config';\n\nconst { INFURA_URL, CHAIN_ID } = config;\n\nconst getProvider = async ({ chainId }: { chainId: number }) => {\n    const connector = new NetworkConnector({\n        urls: {\n            [1]: 'https://eth-mainnet.alchemyapi.io/v2/Yh5zNTgJkqrOIqLtfkZBGIPecNPDQ1ON',\n            [56]: 'https://bscrpc.com',\n        },\n        defaultChainId: CHAIN_ID,\n    });\n    await connector.activate();\n    const provider = await connector.getProvider();\n    return provider;\n};\n\ninterface ExplorerContext {\n    provider?: any;\n}\n\nexport const Context = createContext<ExplorerContext>({\n    provider: undefined,\n});\n\nconst EthereumExplorerProvider: React.FC<{ chainId?: number }> = ({ children, chainId = 1 }) => {\n    const [provider, setProvider] = useState<any>(null);\n    const createProvider = async (chainId: number) => {\n        const createdProvider = await getProvider({ chainId });\n        setProvider(createdProvider);\n    };\n    useEffect(() => {\n        createProvider(chainId);\n    }, [chainId]);\n    const context: ExplorerContext = {\n        provider,\n    };\n    return <Context.Provider value={context}>{children}</Context.Provider>;\n};\n\nexport default EthereumExplorerProvider;\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/TransactionsProvider.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Modals/Modals.tsx",["384"],"import React, { createContext, useCallback, useState } from 'react';\n\ninterface ModalsContext {\n    content?: React.ReactNode;\n    isOpen?: boolean;\n    onPresent: (content: React.ReactNode, key?: string) => void;\n    onDismiss: () => void;\n}\n\nexport const Context = createContext<ModalsContext>({\n    onPresent: () => {},\n    onDismiss: () => {},\n});\n\nconst Modals: React.FC = ({ children }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [content, setContent] = useState<React.ReactNode>();\n    const [modalKey, setModalKey] = useState<string>();\n\n    const handlePresent = useCallback(\n        (modalContent: React.ReactNode, key?: string) => {\n            setModalKey(key);\n            setContent(modalContent);\n            setIsOpen(true);\n        },\n        [setContent, setIsOpen, setModalKey]\n    );\n\n    const handleDismiss = useCallback(() => {\n        setContent(undefined);\n        setIsOpen(false);\n    }, [setContent, setIsOpen]);\n\n    return (\n        <Context.Provider\n            value={{\n                content,\n                isOpen,\n                onPresent: handlePresent,\n                onDismiss: handleDismiss,\n            }}\n        >\n            {children}\n            {isOpen && (\n                <div>\n                    <div onClick={handleDismiss} />\n                    {React.isValidElement(content) &&\n                        React.cloneElement(content, {\n                            onDismiss: handleDismiss,\n                        })}\n                </div>\n            )}\n        </Context.Provider>\n    );\n};\n\nexport default Modals;\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useWallet.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useGzlpAllowance.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUnstake.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useStake.ts",["385"],"import { useCallback } from 'react';\nimport useSushi from './useSushi';\nimport { useWallet } from 'use-wallet';\nimport { stake, getMasterChefContract, stakeBUSD } from '../sushi/utils';\nimport { contractAddresses } from '../sushi/lib/constants';\nimport { isBSC, isPLG } from '../utils/zunami';\n\ninterface Coin {\n    name: string;\n    value: string;\n}\n\ntype Coins = Array<Coin>;\n\nconst useStake = (coins: Coins, direct: boolean = false) => {\n    const { account, chainId } = useWallet();\n    const sushi = useSushi();\n    let zunamiContract = getMasterChefContract(sushi);\n\n    if (isBSC(chainId)) {\n        zunamiContract = getMasterChefContract(sushi, chainId);\n    }\n\n    if (isPLG(chainId)) {\n        zunamiContract = getMasterChefContract(sushi, chainId);\n    }\n\n    const dai = coins.filter((coin) => coin.name === 'DAI')[0]?.value;\n    const usdc = coins.filter((coin) => coin.name === 'USDC')[0]?.value;\n    const usdt = coins.filter((coin) => coin.name === 'USDT')[0]?.value;\n    const busd = coins.filter((coin) => coin.name === 'BUSD')[0]?.value;\n\n    const handleStake = useCallback(async () => {\n        if (chainId === 56 && busd && Number(usdt) === 0) {\n            const contract = sushi.contracts.busdContract;\n            contract.options.address = contractAddresses.busd[56];\n            contract.defaultAccount = account;\n            return await stakeBUSD(contract, account, busd);\n        }\n\n        if (isPLG(chainId)) {\n            const contract = sushi.contracts.polygonContract;\n            contract.options.address = contractAddresses.zunami[137];\n            contract.defaultAccount = account;\n        }\n\n        return await stake(zunamiContract, account, dai, usdc, usdt, direct, chainId);\n    }, [account, dai, usdc, usdt, busd, zunamiContract, direct, chainId]);\n\n    return { onStake: handleStake };\n};\n\nexport default useStake;\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useApprove.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useAllowance.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/functions/screen.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/WalletsModal/WalletsModal.tsx",["386"],"import { Modal } from 'react-bootstrap';\nimport config from '../../config';\nimport { useWallet } from 'use-wallet';\nimport './WalletsModal.scss';\nimport { log } from '../../utils/logger';\n\nexport const LS_ACCOUNT_KEY = 'WALLET_ACCOUNT';\nexport const LS_WALLET_TYPE_KEY = 'WALLET_TYPE';\n\nexport const NO_METAMASK_WARNING =\n    'Please, install either Metamask browser extension or Metamask mobile app';\n\nexport function getActiveWalletName() {\n    let name = window.localStorage.getItem(LS_WALLET_TYPE_KEY);\n\n    return name === 'injected' ? 'metamask' : name;\n}\n\nexport function getActiveWalletAddress() {\n    return window.localStorage.getItem(LS_ACCOUNT_KEY);\n}\n\ninterface WalletModalProps {\n    show: boolean;\n    onWalletConnected?: Function;\n    onHide: Function;\n}\n\nexport const WalletsModal = (props: WalletModalProps): JSX.Element => {\n    const { ethereum, connect } = useWallet();\n    const eth = window.ethereum || ethereum;\n    const isEth = eth && eth.chainId !== '0x1';\n    const onConnect = async (providerId = 'injected') => {\n        try {\n            log(`🔑 Attempt to connect wallet (provider ID is \"${providerId}\")`);\n            await connect(providerId);\n        } catch (connectionError: any) {\n            log(`❗️ Error connecting wallet: ${connectionError.message}`);\n        }\n\n        window.localStorage.setItem(LS_WALLET_TYPE_KEY, providerId);\n        let walletAddress = '';\n\n        switch (providerId) {\n            case 'injected':\n                walletAddress = window.localStorage.getItem('LAST_ACTIVE_ACCOUNT') || '';\n                break;\n            case 'walletlink':\n                walletAddress =\n                    window.localStorage.getItem(\n                        '-walletlink:https://www.walletlink.org:Addresses'\n                    ) || '';\n                break;\n            case 'walletconnect':\n                const wcStorage = JSON.parse(window.localStorage.getItem('walletconnect') || '{}');\n                if (wcStorage?.accounts && wcStorage.accounts[0]) {\n                    walletAddress = wcStorage.accounts[0];\n                }\n                break;\n        }\n\n        window.localStorage.setItem(LS_ACCOUNT_KEY, walletAddress);\n\n        // @ts-ignore\n        const eth = window.ethereum || ethereum;\n\n        if (!eth && providerId === 'injected') {\n            alert(NO_METAMASK_WARNING);\n        }\n\n        // @ts-ignore\n        if (window.dataLayer) {\n            window.dataLayer.push({\n                event: 'login',\n                userID: getActiveWalletAddress(),\n                type: getActiveWalletName(),\n            });\n        }\n\n        if (props.onWalletConnected) {\n            props.onWalletConnected({\n                type: getActiveWalletName(),\n                address: getActiveWalletAddress(),\n            });\n        }\n    };\n\n    return (\n        <Modal\n            show={props.show}\n            onHide={props.onHide}\n            backdrop=\"static\"\n            animation={false}\n            keyboard={false}\n            centered\n            className=\"WalletsModalWrapper\"\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Connect a wallet</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"d-flex gap-3 flex-row justify-content-center align-items-start flex-wrap WalletsModal\">\n                <button\n                    onClick={() => onConnect('injected')}\n                    className=\"border-0 d-inline-flex flex-column justify-content-center align-items-center bg-transparent\"\n                >\n                    <img src=\"/metamask.svg\" alt=\"\" />\n                    <span className=\"mt-2\">Metamask</span>\n                </button>\n                <button\n                    onClick={() => onConnect('walletconnect')}\n                    className=\"border-0 d-inline-flex flex-column justify-content-center align-items-center bg-transparent\"\n                >\n                    <img src=\"/wallet-connect.svg\" alt=\"\" />\n                    <span className=\"mt-2\">Wallet Connect</span>\n                </button>\n                <button\n                    onClick={() => onConnect('walletlink')}\n                    className={`border-0 d-inline-flex flex-column justify-content-center align-items-center bg-transparent ${\n                        isEth ? 'disabled' : ''\n                    }`}\n                >\n                    <img src=\"/wallet-link.svg\" alt=\"\" />\n                    <span className=\"mt-2\">Coinbase Wallet</span>\n                    {isEth && <span className=\"badge bg-secondary\">only Ethereum</span>}\n                </button>\n                <button\n                    onClick={() => onConnect('walletconnect')}\n                    className={`border-0 d-inline-flex flex-column justify-content-center align-items-center bg-transparent ${\n                        isEth ? 'disabled' : ''\n                    }`}\n                >\n                    <img src=\"/zerion-wallet.svg\" alt=\"\" />\n                    <span className=\"mt-2\">Zerion Wallet</span>\n                    {isEth && <span className=\"badge bg-secondary\">only Ethereum</span>}\n                </button>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useOnlineState.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Header/NavMenu/NavMenu.tsx",["387","388"],"import { Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport './NavMenu.scss';\nimport { ReactComponent as DashboardIcon } from './dashboard-icon.svg';\nimport { ReactComponent as DepositIcon } from './deposit-icon.svg';\nimport { ReactComponent as DaoIcon } from './dao-icon.svg';\nimport { ReactComponent as UzdIcon } from './uzd-icon.svg';\n\ninterface NavMenuProps {\n    onSelect?: Function;\n}\n\nexport const NavMenu = (props: NavMenuProps): JSX.Element => {\n    const history = useHistory();\n    const items = [\n        {\n            title: 'Dashboard',\n            urls: ['/'],\n            icon: <DashboardIcon />,\n        },\n        {\n            title: 'Deposit & Withdraw',\n            urls: ['/deposit', '/withdraw'],\n            icon: <DepositIcon />,\n        }\n    ];\n\n    const onClick = (e: any) => {\n        const url = e.currentTarget.href;\n        e.preventDefault();\n\n        if (props.onSelect) {\n            props.onSelect();\n        }\n\n        if (url.indexOf(window.location.hostname) === -1) {\n            window.open(url, '_blank');\n            return;\n        }\n\n        history.push(new URL(url).pathname);\n    };\n\n    const activeElement = items.filter(\n        (el) => el.urls.indexOf(history.location.pathname) !== -1\n    )[0];\n\n    const activeElementTitle = activeElement.title;\n\n    return (\n        <Navbar.Collapse id=\"nav-menu\">\n            <Nav defaultActiveKey=\"/home\" as=\"ul\" className=\"NavMenu\">\n                {items.map((item) => (\n                    <Nav.Item\n                        as=\"li\"\n                        key={item.title}\n                        className={`${\n                            item.urls.indexOf(window.location.pathname) !== -1 ? 'selected' : ''\n                        }`}\n                    >\n                        <Nav.Link\n                            href={item.urls[0]}\n                            className={`${item.disabled ? 'disabled' : ''}`}\n                            onClick={onClick}\n                        >\n                            {item.icon}\n                            <span>{item.title}</span>\n                        </Nav.Link>\n                    </Nav.Item>\n                ))}\n                <NavDropdown\n                    title={\n                        <div>\n                            {activeElement.icon}\n                            <span>&nbsp;{activeElement.title}</span>\n                        </div>\n                    }\n                    id=\"collapsed-nav-menu\"\n                >\n                    {items\n                        .filter((el) => el.title !== activeElementTitle)\n                        .map((item) => (\n                            <NavDropdown.Item\n                                href={item.urls[0]}\n                                onClick={onClick}\n                                key={item.title}\n                                className={`${item.disabled ? 'disabled' : ''}`}\n                            >\n                                {item.icon}\n                                <span>{item.title}</span>\n                            </NavDropdown.Item>\n                        ))}\n                </NavDropdown>\n            </Nav>\n        </Navbar.Collapse>\n    );\n};\n","/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/DirectAction/DirectAction.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/ActionSelector/ActionSelector.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/Form/Input/Input.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/FastDepositForm/FastDepositForm.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ThemeSwitcher/ThemeSwitcher.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/ErrorToast/ErrorToast.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/Transactions/reducer.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/NetworkConnector.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useEthExplorer.ts",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/components/FastDepositForm/Input/Input.tsx",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/index.js",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/Sushi.js",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/evm.js",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/accounts.js",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/contracts.js",[],"/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/types.js",[],{"ruleId":"389","replacedBy":"390"},{"ruleId":"391","replacedBy":"392"},{"ruleId":"393","severity":1,"message":"394","line":13,"column":5,"nodeType":"395","messageId":"396","endLine":13,"endColumn":12},{"ruleId":"397","severity":1,"message":"398","line":38,"column":7,"nodeType":"395","messageId":"399","endLine":38,"endColumn":20},{"ruleId":"397","severity":1,"message":"400","line":50,"column":7,"nodeType":"395","messageId":"399","endLine":50,"endColumn":14},{"ruleId":"397","severity":1,"message":"401","line":183,"column":11,"nodeType":"395","messageId":"399","endLine":183,"endColumn":26},{"ruleId":"402","severity":1,"message":"403","line":226,"column":8,"nodeType":"404","endLine":235,"endColumn":6,"suggestions":"405"},{"ruleId":"402","severity":1,"message":"406","line":227,"column":9,"nodeType":"407","endLine":227,"endColumn":27},{"ruleId":"402","severity":1,"message":"408","line":265,"column":8,"nodeType":"404","endLine":265,"endColumn":65,"suggestions":"409"},{"ruleId":"389","replacedBy":"390"},{"ruleId":"391","replacedBy":"392"},{"ruleId":"402","severity":1,"message":"410","line":17,"column":8,"nodeType":"404","endLine":17,"endColumn":62,"suggestions":"411"},{"ruleId":"397","severity":1,"message":"412","line":9,"column":10,"nodeType":"395","messageId":"399","endLine":9,"endColumn":27},{"ruleId":"397","severity":1,"message":"413","line":30,"column":12,"nodeType":"395","messageId":"399","endLine":30,"endColumn":21},{"ruleId":"402","severity":1,"message":"414","line":60,"column":8,"nodeType":"404","endLine":60,"endColumn":33,"suggestions":"415"},{"ruleId":"397","severity":1,"message":"413","line":32,"column":12,"nodeType":"395","messageId":"399","endLine":32,"endColumn":21},{"ruleId":"402","severity":1,"message":"416","line":123,"column":8,"nodeType":"404","endLine":123,"endColumn":48,"suggestions":"417"},{"ruleId":"397","severity":1,"message":"418","line":11,"column":10,"nodeType":"395","messageId":"399","endLine":11,"endColumn":15},{"ruleId":"397","severity":1,"message":"419","line":13,"column":10,"nodeType":"395","messageId":"399","endLine":13,"endColumn":28},{"ruleId":"397","severity":1,"message":"420","line":40,"column":11,"nodeType":"395","messageId":"399","endLine":40,"endColumn":22},{"ruleId":"397","severity":1,"message":"421","line":43,"column":13,"nodeType":"395","messageId":"399","endLine":43,"endColumn":20},{"ruleId":"402","severity":1,"message":"422","line":290,"column":8,"nodeType":"404","endLine":290,"endColumn":36,"suggestions":"423"},{"ruleId":"397","severity":1,"message":"424","line":6,"column":9,"nodeType":"395","messageId":"399","endLine":6,"endColumn":19},{"ruleId":"425","severity":1,"message":"426","line":11,"column":13,"nodeType":"427","messageId":"428","endLine":11,"endColumn":89,"fix":"429"},{"ruleId":"425","severity":1,"message":"430","line":12,"column":13,"nodeType":"427","messageId":"428","endLine":12,"endColumn":39,"fix":"431"},{"ruleId":"397","severity":1,"message":"432","line":18,"column":12,"nodeType":"395","messageId":"399","endLine":18,"endColumn":20},{"ruleId":"402","severity":1,"message":"433","line":48,"column":8,"nodeType":"404","endLine":48,"endColumn":73,"suggestions":"434"},{"ruleId":"397","severity":1,"message":"435","line":2,"column":8,"nodeType":"395","messageId":"399","endLine":2,"endColumn":14},{"ruleId":"397","severity":1,"message":"436","line":6,"column":28,"nodeType":"395","messageId":"399","endLine":6,"endColumn":35},{"ruleId":"397","severity":1,"message":"437","line":7,"column":28,"nodeType":"395","messageId":"399","endLine":7,"endColumn":35},"no-native-reassign",["438"],"no-negated-in-lhs",["439"],"@typescript-eslint/no-redeclare","'NETWORK' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'MobileSidebar' is assigned a value but never used.","unusedVar","'SideBar' is assigned a value but never used.","'depositDisabled' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'balance'. Either include it or remove the dependency array.","ArrayExpression",["440"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'transactionList'. Either include it or remove the dependency array. You can also do a functional update 'setTransactionList(t => ...)' if you only need 'transactionList' in the 'setTransactionList' call.",["441"],"React Hook useEffect has an unnecessary dependency: 'window.ethereum.chainId'. Either exclude it or remove the dependency array. Outer scope values like 'window.ethereum.chainId' aren't valid dependencies because mutating them doesn't re-render the component.",["442"],"'contractAddresses' is defined but never used.","'allowance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.show'. Either include it or remove the dependency array.",["443"],"React Hook useCallback has a missing dependency: 'ethereum'. Either include it or remove the dependency array.",["444"],"'isETH' is defined but never used.","'chainNameToTooltip' is defined but never used.","'logoVariant' is assigned a value but never used.","'chainId' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'chainId'. Either exclude it or remove the dependency array.",["445"],"'INFURA_URL' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [1] found.","Property","unnecessarilyComputedProperty",{"range":"446","text":"447"},"Unnecessarily computed property [56] found.",{"range":"448","text":"449"},"'modalKey' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'sushi.contracts.busdContract' and 'sushi.contracts.polygonContract'. Either include them or remove the dependency array.",["450"],"'config' is defined but never used.","'DaoIcon' is defined but never used.","'UzdIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},[342,345],"1",[432,436],"56",{"desc":"463","fix":"464"},"Update the dependencies array to be: [lpPrice, selectedCoinIndex, sharePercent, account, props.operationName, chainId, zunamiContract, balance]",{"range":"465","text":"466"},"Update the dependencies array to be: [account, props.operationName, transHistoryPage, chainId, transactionList]",{"range":"467","text":"468"},"Update the dependencies array to be: [account, connect, ethereum]",{"range":"469","text":"470"},"Update the dependencies array to be: [chainId, account, sushi, props.show]",{"range":"471","text":"472"},"Update the dependencies array to be: [account, chainId, ethereum]",{"range":"473","text":"474"},"Update the dependencies array to be: [lpShareToWithdraw]",{"range":"475","text":"476"},"Update the dependencies array to be: [chainId, busd, usdt, zunamiContract, account, dai, usdc, direct, sushi.contracts.busdContract, sushi.contracts.polygonContract]",{"range":"477","text":"478"},[7922,8110],"[lpPrice, selectedCoinIndex, sharePercent, account, props.operationName, chainId, zunamiContract, balance]",[8888,8945],"[account, props.operationName, transHistoryPage, chainId, transactionList]",[579,633],"[account, connect, ethereum]",[2213,2238],"[chainId, account, sushi, props.show]",[4371,4411],"[account, chainId, ethereum]",[9107,9135],"[lpShareToWithdraw]",[1727,1792],"[chainId, busd, usdt, zunamiContract, account, dai, usdc, direct, sushi.contracts.busdContract, sushi.contracts.polygonContract]"]