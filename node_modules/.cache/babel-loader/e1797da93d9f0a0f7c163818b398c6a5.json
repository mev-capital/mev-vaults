{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n};\n\nvar FortmaticConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(FortmaticConnector, _AbstractConnector);\n\n  function FortmaticConnector(_ref) {\n    var _this;\n\n    var apiKey = _ref.apiKey,\n        chainId = _ref.chainId;\n    !Object.keys(chainIdToNetwork).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Unsupported chainId \" + chainId) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.apiKey = apiKey;\n    _this.chainId = chainId;\n    return _this;\n  }\n\n  var _proto = FortmaticConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.fortmatic.getProvider().enable().then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.fortmatic.getProvider(),\n            chainId: _this3.chainId,\n            account: account\n          };\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.fortmatic) {\n          return Promise.resolve(import('fortmatic').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (Fortmatic) {\n            _this3.fortmatic = new Fortmatic(_this3.apiKey, _this3.chainId === 1 || _this3.chainId === 4 ? undefined : chainIdToNetwork[_this3.chainId]);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.fortmatic.getProvider());\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.fortmatic.getProvider().send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {};\n\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n\n      return Promise.resolve(_this11.fortmatic.user.logout()).then(function () {\n        _this11.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return FortmaticConnector;\n}(AbstractConnector);\n\nexport { FortmaticConnector };","map":{"version":3,"mappings":";;;;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;EACtD,GAAG,SADmD;EAEtD,GAAG,SAFmD;EAGtD,GAAG,SAHmD;EAItD,IAAI;AAJkD,CAAxD;;IAYaC,kBAAb;EAAAC;;EAME;;;QAAcC;QAAQC;IACpB,CAAUC,MAAM,CAACC,IAAPD,CAAYL,gBAAZK,EAA8BE,QAA9BF,CAAuCD,OAAO,CAACI,QAARJ,EAAvCC,CAAV,oDAAS,iCAAoFD,OAApF,CAAT,YAAS,OAAT;IACAK,sCAAM;MAAEC,iBAAiB,EAAE,CAACN,OAAD;IAArB,CAAN;IAEAK,MAAKN,MAAL,GAAcA,MAAd;IACAM,MAAKL,OAAL,GAAeA,OAAf;;EACD;;EAZH;;EAAAO,OAceC,QAdf;IAAA;;+BAuB0BC,OAAKC,SAAL,CACnBC,WADmB,GAEnBC,MAFmB,GAGnBC,IAHmB,CAGd,UAACC,QAAD;UAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;QAHc,mBAAhBC,OAAgB,EAAhBA;UAKN,OAAO;YAAEC,QAAQ,EAAEP,OAAKC,SAAL,CAAeC,WAAf,EAAZ;YAA0CX,OAAO,EAAES,OAAKT,OAAxD;YAAiEe,OAAO,EAAPA;UAAjE,CAAP;;;;mBAbK;;;YAAD,CAACN,OAAKC;iCACgB,OAAO,WAAP,EAAoBG,IAApB,CAAyB,aAAC;YAAA;;YAAA,qBAAII,CAAJ,QAAIA,GAAJ,MAAIA,IAAC,WAAL,yBAAkBA,CAAlB;UAA1B,mBAAlBC,SAAkB,EAAlBA;YACNT,OAAKC,SAAL,GAAiB,IAAIQ,SAAJ,CACfT,OAAKV,MADU,EAEfU,OAAKT,OAAL,KAAiB,CAAjB,IAAsBS,OAAKT,OAAL,KAAiB,CAAvC,GAA2CmB,SAA3C,GAAuDvB,gBAAgB,CAACa,OAAKT,OAAN,CAFxD,CAAjB;;;;;;IAjBN;MAAA;IAAA;EAAA;;EAAAO,OA+BeI,WA/Bf;IAAA;mBAgCW;;MAAP,uBAAOS,OAAKV,SAAL,CAAeC,WAAf,EAAP;IAhCJ;MAAA;IAAA;EAAA;;EAAAJ,OAmCec,UAnCf;IAAA;mBAoCW;;MAAP,uBAAOC,OAAKtB,OAAZ;IApCJ;MAAA;IAAA;EAAA;;EAAAO,OAuCegB,UAvCf;IAAA;mBAwCW;;MAAP,uBAAOC,OAAKd,SAAL,CACJC,WADI,GAEJc,IAFI,CAEC,cAFD,EAGJZ,IAHI,CAGC,UAACC,QAAD;QAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;MAHD,EAAP;IAxCJ;MAAA;IAAA;EAAA;;EAAAP,OA8CSmB,UA9CT,GA8CS,uBA9CT;;EAAAnB,OAgDeoB,KAhDf;IAAA;oBAiDU;;6BAAAC,QAAKlB,SAAL,CAAemB,IAAf,CAAoBC,MAApB;QACNF,QAAKG,cAAL;;IAlDJ;MAAA;IAAA;EAAA;;EAAA;AAAA,EAAwCC,iBAAxC","names":["chainIdToNetwork","FortmaticConnector","_inheritsLoose","apiKey","chainId","Object","keys","includes","toString","_this","supportedChainIds","_proto","activate","_this3","fortmatic","getProvider","enable","then","accounts","account","provider","m","Fortmatic","undefined","_this5","getChainId","_this7","getAccount","_this9","send","deactivate","close","_this11","user","logout","emitDeactivate","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}