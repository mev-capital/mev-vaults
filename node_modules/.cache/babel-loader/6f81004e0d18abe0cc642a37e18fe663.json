{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { getMasterChefContract } from '../sushi/utils';\nimport useSushi from './useSushi';\nimport { getAllowance, getContract } from '../utils/erc20';\nimport { BIG_ZERO, daiAddress, usdcAddress, usdtAddress, bscUsdtAddress, busdAddress, plgUsdtAddress } from '../utils/formatbalance';\nimport { log } from '../utils/logger';\nimport { contractAddresses } from '../sushi/lib/constants';\nimport { isBSC, isPLG } from '../utils/zunami';\n\nconst useAllowance = tokenAddress => {\n  _s();\n\n  const [allowance, setAllowance] = useState(BIG_ZERO);\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const sushi = useSushi();\n  const masterChefContract = getMasterChefContract(sushi);\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const allowance = await getAllowance(ethereum, tokenAddress, masterChefContract, // @ts-ignore\n      account);\n      setAllowance(new BigNumber(allowance));\n    };\n\n    if (account && masterChefContract) {\n      fetchAllowance();\n    }\n\n    let refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, ethereum, tokenAddress, masterChefContract]);\n  return allowance;\n};\n\n_s(useAllowance, \"pChWJMCB0VTs456E8gwbE8Zo6Qg=\", false, function () {\n  return [useWallet, useSushi];\n});\n\nexport default useAllowance;\nexport const useAllowanceStables = () => {\n  _s2();\n\n  const [allowance, setAllowance] = useState([BIG_ZERO, BIG_ZERO, BIG_ZERO, BIG_ZERO]);\n  const {\n    account,\n    ethereum,\n    chainId\n  } = useWallet();\n  const sushi = useSushi();\n  useEffect(() => {\n    const masterChefContract = getMasterChefContract(sushi);\n\n    const fetchAllowanceStables = async () => {\n      if (chainId === 1) {\n        masterChefContract.options.address = contractAddresses.zunami[1];\n        const allowanceDai = await getAllowance(ethereum, daiAddress, masterChefContract, // @ts-ignore\n        account);\n        const allowanceUsdc = await getAllowance(ethereum, usdcAddress, masterChefContract, // @ts-ignore\n        account);\n        const allowanceUsdt = await getAllowance(ethereum, usdtAddress, masterChefContract, // @ts-ignore\n        account);\n        const data = [new BigNumber(allowanceDai), new BigNumber(allowanceUsdc), new BigNumber(allowanceUsdt), BIG_ZERO]; // @ts-ignore\n\n        setAllowance(data);\n        log(`Allowan DAI: ${allowanceDai}`);\n        log(`Allowan USDC: ${allowanceUsdc}`);\n        log(`Allowan USDT: ${allowanceUsdt}`);\n      } else if (isBSC(chainId)) {\n        const lpContract = getContract(sushi.bscContracts.bscMasterChef.currentProvider, bscUsdtAddress);\n        const allowanceUsdt = await lpContract.methods.allowance(account, sushi.bscMasterChefAddress).call();\n        const busdContract = getContract(sushi.bscContracts.bscMasterChef.currentProvider, bscUsdtAddress);\n        busdContract.options.address = busdAddress;\n        const allowanceBUSD = await busdContract.methods.allowance(account, contractAddresses.busd[56]).call();\n        log(`BSC USDT allowance for address (${account}) is: ${allowanceUsdt}`);\n        log(`BSC BUSD allowance for address (${account}) is: ${allowanceBUSD}`);\n        setAllowance([BIG_ZERO, BIG_ZERO, new BigNumber(allowanceUsdt), new BigNumber(allowanceBUSD)]);\n      } else if (isPLG(chainId)) {\n        const lpContract = getContract(sushi.plgContracts.polygonContract.currentProvider, plgUsdtAddress);\n        const allowanceUsdt = await lpContract.methods.allowance(account, sushi.polygonMasterChefAddress).call();\n        log(`PLG USDT allowance for address (${account}) is: ${allowanceUsdt}`);\n        setAllowance([BIG_ZERO, BIG_ZERO, new BigNumber(allowanceUsdt), BIG_ZERO]);\n      }\n    };\n\n    if (account && masterChefContract) {\n      fetchAllowanceStables();\n    }\n\n    let refreshInterval = setInterval(fetchAllowanceStables, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, ethereum, chainId, sushi]);\n  return allowance;\n};\n\n_s2(useAllowanceStables, \"FuBg0uR3TRZVAtsrR/WXYbMjYWg=\", false, function () {\n  return [useWallet, useSushi];\n});","map":{"version":3,"names":["BigNumber","useEffect","useState","useWallet","getMasterChefContract","useSushi","getAllowance","getContract","BIG_ZERO","daiAddress","usdcAddress","usdtAddress","bscUsdtAddress","busdAddress","plgUsdtAddress","log","contractAddresses","isBSC","isPLG","useAllowance","tokenAddress","allowance","setAllowance","account","ethereum","sushi","masterChefContract","fetchAllowance","refreshInterval","setInterval","clearInterval","useAllowanceStables","chainId","fetchAllowanceStables","options","address","zunami","allowanceDai","allowanceUsdc","allowanceUsdt","data","lpContract","bscContracts","bscMasterChef","currentProvider","methods","bscMasterChefAddress","call","busdContract","allowanceBUSD","busd","plgContracts","polygonContract","polygonMasterChefAddress"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useAllowance.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { getMasterChefContract } from '../sushi/utils';\nimport useSushi from './useSushi';\nimport { getAllowance, getContract } from '../utils/erc20';\nimport {\n    BIG_ZERO,\n    daiAddress,\n    usdcAddress,\n    usdtAddress,\n    bscUsdtAddress,\n    busdAddress,\n    plgUsdtAddress,\n} from '../utils/formatbalance';\nimport { log } from '../utils/logger';\nimport { contractAddresses } from '../sushi/lib/constants';\nimport { isBSC, isPLG } from '../utils/zunami';\n\nconst useAllowance = (tokenAddress: string) => {\n    const [allowance, setAllowance] = useState(BIG_ZERO);\n    const { account, ethereum } = useWallet();\n    const sushi = useSushi();\n    const masterChefContract = getMasterChefContract(sushi);\n\n    useEffect(() => {\n        const fetchAllowance = async () => {\n            const allowance = await getAllowance(\n                ethereum,\n                tokenAddress,\n                masterChefContract,\n                // @ts-ignore\n                account\n            );\n            setAllowance(new BigNumber(allowance));\n        };\n\n        if (account && masterChefContract) {\n            fetchAllowance();\n        }\n        let refreshInterval = setInterval(fetchAllowance, 10000);\n        return () => clearInterval(refreshInterval);\n    }, [account, ethereum, tokenAddress, masterChefContract]);\n\n    return allowance;\n};\n\nexport default useAllowance;\n\nexport const useAllowanceStables = () => {\n    const [allowance, setAllowance] = useState([BIG_ZERO, BIG_ZERO, BIG_ZERO, BIG_ZERO]);\n    const { account, ethereum, chainId } = useWallet();\n    const sushi = useSushi();\n\n    useEffect(() => {\n        const masterChefContract = getMasterChefContract(sushi);\n\n        const fetchAllowanceStables = async () => {\n            if (chainId === 1) {\n                masterChefContract.options.address = contractAddresses.zunami[1];\n\n                const allowanceDai = await getAllowance(\n                    ethereum,\n                    daiAddress,\n                    masterChefContract,\n                    // @ts-ignore\n                    account\n                );\n                const allowanceUsdc = await getAllowance(\n                    ethereum,\n                    usdcAddress,\n                    masterChefContract,\n                    // @ts-ignore\n                    account\n                );\n                const allowanceUsdt = await getAllowance(\n                    ethereum,\n                    usdtAddress,\n                    masterChefContract,\n                    // @ts-ignore\n                    account\n                );\n                const data = [\n                    new BigNumber(allowanceDai),\n                    new BigNumber(allowanceUsdc),\n                    new BigNumber(allowanceUsdt),\n                    BIG_ZERO,\n                ];\n                // @ts-ignore\n                setAllowance(data);\n                log(`Allowan DAI: ${allowanceDai}`);\n                log(`Allowan USDC: ${allowanceUsdc}`);\n                log(`Allowan USDT: ${allowanceUsdt}`);\n            } else if (isBSC(chainId)) {\n                const lpContract = getContract(\n                    sushi.bscContracts.bscMasterChef.currentProvider,\n                    bscUsdtAddress\n                );\n\n                const allowanceUsdt = await lpContract.methods\n                    .allowance(account, sushi.bscMasterChefAddress)\n                    .call();\n\n                const busdContract = getContract(\n                    sushi.bscContracts.bscMasterChef.currentProvider,\n                    bscUsdtAddress\n                );\n\n                busdContract.options.address = busdAddress;\n\n                const allowanceBUSD = await busdContract.methods\n                    .allowance(account, contractAddresses.busd[56])\n                    .call();\n\n                log(`BSC USDT allowance for address (${account}) is: ${allowanceUsdt}`);\n                log(`BSC BUSD allowance for address (${account}) is: ${allowanceBUSD}`);\n\n                setAllowance([\n                    BIG_ZERO,\n                    BIG_ZERO,\n                    new BigNumber(allowanceUsdt),\n                    new BigNumber(allowanceBUSD),\n                ]);\n            } else if (isPLG(chainId)) {\n                const lpContract = getContract(\n                    sushi.plgContracts.polygonContract.currentProvider,\n                    plgUsdtAddress\n                );\n\n                const allowanceUsdt = await lpContract.methods\n                    .allowance(account, sushi.polygonMasterChefAddress)\n                    .call();\n\n                log(`PLG USDT allowance for address (${account}) is: ${allowanceUsdt}`);\n\n                setAllowance([\n                    BIG_ZERO,\n                    BIG_ZERO,\n                    new BigNumber(allowanceUsdt),\n                    BIG_ZERO,\n                ]);\n            }\n        };\n\n        if (account && masterChefContract) {\n            fetchAllowanceStables();\n        }\n        let refreshInterval = setInterval(fetchAllowanceStables, 10000);\n        return () => clearInterval(refreshInterval);\n    }, [account, ethereum, chainId, sushi]);\n\n    return allowance;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}