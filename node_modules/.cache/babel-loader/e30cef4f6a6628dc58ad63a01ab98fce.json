{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src';\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar LedgerConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(LedgerConnector, _AbstractConnector);\n\n  function LedgerConnector(_ref) {\n    var _this;\n\n    var chainId = _ref.chainId,\n        url = _ref.url,\n        pollingInterval = _ref.pollingInterval,\n        requestTimeoutMs = _ref.requestTimeoutMs,\n        accountFetchingConfigs = _ref.accountFetchingConfigs,\n        baseDerivationPath = _ref.baseDerivationPath;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.url = url;\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.accountFetchingConfigs = accountFetchingConfigs;\n    _this.baseDerivationPath = baseDerivationPath;\n    return _this;\n  }\n\n  var _proto = LedgerConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      if (!_this3.provider) {\n        var engine = new Web3ProviderEngine({\n          pollingInterval: _this3.pollingInterval\n        });\n        engine.addProvider(new LedgerSubprovider({\n          networkId: _this3.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: _this3.accountFetchingConfigs,\n          baseDerivationPath: _this3.baseDerivationPath\n        }));\n        engine.addProvider(new CacheSubprovider());\n        engine.addProvider(new RPCSubprovider(_this3.url, _this3.requestTimeoutMs));\n        _this3.provider = engine;\n      }\n\n      _this3.provider.start();\n\n      return Promise.resolve({\n        provider: _this3.provider,\n        chainId: _this3.chainId\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.stop();\n  };\n\n  return LedgerConnector;\n}(AbstractConnector);\n\nexport { LedgerConnector };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAiBaA,eAAb;EAAAC;;EAUE;;;QACEC;QACAC;QACAC;QACAC;QACAC;QACAC;IAEAC,sCAAM;MAAEC,iBAAiB,EAAE,CAACP,OAAD;IAArB,CAAN;IAEAM,MAAKN,OAAL,GAAeA,OAAf;IACAM,MAAKL,GAAL,GAAWA,GAAX;IACAK,MAAKJ,eAAL,GAAuBA,eAAvB;IACAI,MAAKH,gBAAL,GAAwBA,gBAAxB;IACAG,MAAKF,sBAAL,GAA8BA,sBAA9B;IACAE,MAAKD,kBAAL,GAA0BA,kBAA1B;;EACD;;EA1BH;;EAAAG,OA4BeC,QA5Bf;IAAA;mBA6BS;;MAAL,IAAI,CAACC,OAAKC,QAAV,EAAoB;QAClB,IAAMC,MAAM,GAAG,IAAIC,kBAAJ,CAAuB;UAAEX,eAAe,EAAEQ,OAAKR;QAAxB,CAAvB,CAAf;QACAU,MAAM,CAACE,WAAPF,CACE,IAAIG,iBAAJ,CAAsB;UACpBC,SAAS,EAAEN,OAAKV,OADI;UAEpBiB,gCAAgC,EAAEC,uCAFd;UAGpBd,sBAAsB,EAAEM,OAAKN,sBAHT;UAIpBC,kBAAkB,EAAEK,OAAKL;QAJL,CAAtB,CADFO;QAQAA,MAAM,CAACE,WAAPF,CAAmB,IAAIO,gBAAJ,EAAnBP;QACAA,MAAM,CAACE,WAAPF,CAAmB,IAAIQ,cAAJ,CAAmBV,OAAKT,GAAxB,EAA6BS,OAAKP,gBAAlC,CAAnBS;QACAF,OAAKC,QAAL,GAAgBC,MAAhB;MACD;;MAEDF,OAAKC,QAAL,CAAcU,KAAd;;MAEA,uBAAO;QAAEV,QAAQ,EAAED,OAAKC,QAAjB;QAA2BX,OAAO,EAAEU,OAAKV;MAAzC,CAAP;IA9CJ;MAAA;IAAA;EAAA;;EAAAQ,OAiDec,WAjDf;IAAA;mBAkDW;;MAAP,uBAAOC,OAAKZ,QAAZ;IAlDJ;MAAA;IAAA;EAAA;;EAAAH,OAqDegB,UArDf;IAAA;mBAsDW;;MAAP,uBAAOC,OAAKzB,OAAZ;IAtDJ;MAAA;IAAA;EAAA;;EAAAQ,OAyDekB,UAzDf;IAAA;mBA0DW;;MAAP,uBAAOC,OAAKhB,QAAL,CAAciB,UAAd,CAAyB,CAAzB,EAA4BC,gBAA5B,CAA6C,CAA7C,EAAgDC,IAAhD,CAAqD,UAACC,QAAD;QAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;MAArD,EAAP;IA1DJ;MAAA;IAAA;EAAA;;EAAAvB,OA6DSwB,UA7DT,GA6DS;IACL,KAAKrB,QAAL,CAAcsB,IAAd;EA9DJ;;EAAA;AAAA,EAAqCC,iBAArC","names":["LedgerConnector","_inheritsLoose","chainId","url","pollingInterval","requestTimeoutMs","accountFetchingConfigs","baseDerivationPath","_this","supportedChainIds","_proto","activate","_this3","provider","engine","Web3ProviderEngine","addProvider","LedgerSubprovider","networkId","ledgerEthereumClientFactoryAsync","ledgerEthereumBrowserClientFactoryAsync","CacheSubprovider","RPCSubprovider","start","getProvider","_this5","getChainId","_this7","getAccount","_this9","_providers","getAccountsAsync","then","accounts","deactivate","stop","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface LedgerConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n  accountFetchingConfigs?: any\n  baseDerivationPath?: string\n}\n\nexport class LedgerConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private readonly accountFetchingConfigs?: any\n  private readonly baseDerivationPath?: string\n\n  private provider: any\n\n  constructor({\n    chainId,\n    url,\n    pollingInterval,\n    requestTimeoutMs,\n    accountFetchingConfigs,\n    baseDerivationPath\n  }: LedgerConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.accountFetchingConfigs = accountFetchingConfigs\n    this.baseDerivationPath = baseDerivationPath\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(\n        new LedgerSubprovider({\n          networkId: this.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: this.accountFetchingConfigs,\n          baseDerivationPath: this.baseDerivationPath\n        })\n      )\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}