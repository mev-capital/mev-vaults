{"ast":null,"code":"import { log } from \"../utils/logger\";\nconst root = 'https://zunami-reward-api.herokuapp.com/api';\nexport const poolStatsUrl = `${root}/pool/stats`;\nexport const activeStratsUrl = `${root}/pool/active-pools-stats`;\nexport const zunamiInfoUrl = `${root}/zunami/info`;\nexport const historicalApyUrl = `${root}/zunami/apy-chart`;\nexport const testnetUrl = `${root}/feature`;\nexport const totalIncomeUrl = `${root}/transfers/total-income`;\nexport const transHistoryUrl = `${root}/transfers/history`;\nexport const curvePoolsApyUrl = 'https://api.curve.fi/api/getFactoryAPYs?version=2';\nconst BSC_NETWORK_ID = 56;\nconst POLYGON_NETWORK_ID = 137;\nexport const getActiveStratsUrl = () => {\n  return activeStratsUrl;\n};\nexport const getPoolStatsUrl = poolTypes => {\n  return poolStatsUrl + '?types=' + poolTypes;\n};\nexport const getHistoricalApyUrl = period => {\n  return `${historicalApyUrl}?period=${period.toUpperCase()}`;\n};\nexport const getTestnetStatusUrl = address => {\n  return `${testnetUrl}?address=${address}`;\n};\nexport const getTotalIncomeUrl = function (address, lpTokens) {\n  let chainId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let chain = 'ETH';\n\n  switch (chainId) {\n    case BSC_NETWORK_ID:\n      chain = 'BSC';\n      break;\n\n    case POLYGON_NETWORK_ID:\n      chain = 'MATIC';\n      break;\n  }\n\n  return `${totalIncomeUrl}?address=${address.toLowerCase()}&lpTokens=${lpTokens}&chain=${chain}`;\n};\nexport const getTransHistoryUrl = function (address, type) {\n  let page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n  let chainId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let chain = 'ETH';\n\n  switch (chainId) {\n    case BSC_NETWORK_ID:\n      chain = 'BSC';\n      break;\n\n    case POLYGON_NETWORK_ID:\n      chain = 'MATIC';\n      break;\n  }\n\n  return `${transHistoryUrl}?address=${address.toLowerCase()}&type=${type}&page=${page}&size=${size}&chain=${chain}`;\n};\nexport const getBackendSlippage = async (lpAmount, tokenIndex) => {\n  log(`Requesting backend slippage (${`${root}/zunami/slippage?tokenIndex=${tokenIndex}&lpAmount=${lpAmount}`})`);\n  return fetch(`${root}/zunami/slippage?tokenIndex=${tokenIndex}&lpAmount=${lpAmount}`).then(response => {\n    if (response.status !== 200) {\n      throw new Error(`Server response: ${response.statusText}, code ${response.status}`);\n    }\n\n    return response.json();\n  }).then(data => data.slippage).catch(error => {\n    log(`❗️ Error while retrieving slippage: ${error.message}`);\n    return '0';\n  });\n};","map":{"version":3,"names":["log","root","poolStatsUrl","activeStratsUrl","zunamiInfoUrl","historicalApyUrl","testnetUrl","totalIncomeUrl","transHistoryUrl","curvePoolsApyUrl","BSC_NETWORK_ID","POLYGON_NETWORK_ID","getActiveStratsUrl","getPoolStatsUrl","poolTypes","getHistoricalApyUrl","period","toUpperCase","getTestnetStatusUrl","address","getTotalIncomeUrl","lpTokens","chainId","chain","toLowerCase","getTransHistoryUrl","type","page","size","getBackendSlippage","lpAmount","tokenIndex","fetch","then","response","status","Error","statusText","json","data","slippage","catch","error","message"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/api/api.ts"],"sourcesContent":["import { log } from \"../utils/logger\";\n\nconst root = 'https://zunami-reward-api.herokuapp.com/api';\nexport const poolStatsUrl = `${root}/pool/stats`;\nexport const activeStratsUrl = `${root}/pool/active-pools-stats`;\nexport const zunamiInfoUrl = `${root}/zunami/info`;\n\nexport const historicalApyUrl = `${root}/zunami/apy-chart`;\nexport const testnetUrl = `${root}/feature`;\nexport const totalIncomeUrl = `${root}/transfers/total-income`;\nexport const transHistoryUrl = `${root}/transfers/history`;\n\nexport const curvePoolsApyUrl = 'https://api.curve.fi/api/getFactoryAPYs?version=2';\n\nconst BSC_NETWORK_ID = 56;\nconst POLYGON_NETWORK_ID = 137;\n\nexport const getActiveStratsUrl = (): string => {\n    return activeStratsUrl;\n};\n\nexport const getPoolStatsUrl = (poolTypes: string): string => {\n    return poolStatsUrl + '?types=' + poolTypes;\n};\n\nexport const getHistoricalApyUrl = (period: string): string => {\n    return `${historicalApyUrl}?period=${period.toUpperCase()}`;\n};\n\nexport const getTestnetStatusUrl = (address: string): string => {\n    return `${testnetUrl}?address=${address}`;\n};\n\nexport const getTotalIncomeUrl = (\n    address: string,\n    lpTokens: string,\n    chainId: number = 1\n): string => {\n    let chain = 'ETH';\n\n    switch (chainId) {\n        case BSC_NETWORK_ID: chain = 'BSC'; break;\n        case POLYGON_NETWORK_ID: chain = 'MATIC'; break;\n    }\n\n    return `${totalIncomeUrl}?address=${address.toLowerCase()}&lpTokens=${lpTokens}&chain=${chain}`;\n};\n\nexport const getTransHistoryUrl = (\n    address: string,\n    type: string,\n    page: number = 0,\n    size: number = 10,\n    chainId: number = 1\n): string => {\n    let chain = 'ETH';\n\n    switch (chainId) {\n        case BSC_NETWORK_ID: chain = 'BSC'; break;\n        case POLYGON_NETWORK_ID: chain = 'MATIC'; break;\n    }\n\n    return `${transHistoryUrl}?address=${address.toLowerCase()}&type=${type}&page=${page}&size=${size}&chain=${chain}`;\n};\n\nexport const getBackendSlippage = async (lpAmount: string, tokenIndex: number) => {\n    log(`Requesting backend slippage (${`${root}/zunami/slippage?tokenIndex=${tokenIndex}&lpAmount=${lpAmount}`})`);\n    return fetch(`${root}/zunami/slippage?tokenIndex=${tokenIndex}&lpAmount=${lpAmount}`)\n        .then((response) => {\n            if (response.status !== 200) {\n                throw new Error(`Server response: ${response.statusText}, code ${response.status}`);\n            }\n\n            return response.json();\n        })\n        .then((data) => data.slippage)\n        .catch((error) => {\n            log(`❗️ Error while retrieving slippage: ${error.message}`);\n            return '0';\n        });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}