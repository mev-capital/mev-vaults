{"ast":null,"code":"const EventEmitter = require('events');\n\nconst dev = process.env.NODE_ENV === 'development';\n\nclass ConnectionManager extends EventEmitter {\n  constructor(connections, targets, options) {\n    super();\n    this.targets = targets;\n    this.connections = connections;\n    this.connected = false;\n    this.status = 'loading';\n    this.interval = options.interval || 5000;\n    this.name = options.name || 'default';\n    this.inSetup = true;\n    this.connect();\n  }\n\n  connect() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`);\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider');\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied');\n    } else {\n      const {\n        protocol,\n        location\n      } = this.targets[index];\n      this.connection = this.connections[protocol](location);\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err);\n        if (this.listenerCount('error')) return this.emit('error', err);\n        console.warn('eth-provider - Uncaught connection error: ' + err.message);\n      });\n      this.connection.on('close', summary => {\n        this.connected = false;\n        this.emit('close');\n        if (!this.closing) this.refresh();\n      });\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index];\n        this.connection.index = index;\n        this.targets[index].status = this.connection.status;\n        this.connected = true;\n        this.inSetup = false;\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location);\n        this.emit('connect');\n      });\n      this.connection.on('data', data => this.emit('data', data));\n      this.connection.on('payload', payload => this.emit('payload', payload));\n    }\n  }\n\n  refresh() {\n    let interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.interval;\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`);\n    clearTimeout(this.connectTimer);\n    this.connectTimer = setTimeout(() => this.connect(), interval);\n  }\n\n  connectionError(index, err) {\n    this.targets[index].status = err;\n\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false;\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets);\n      this.refresh();\n    } else {\n      // Not last target, move on the next connection option\n      this.connect(++index);\n    }\n  }\n\n  close() {\n    this.closing = true;\n\n    if (this.connection) {\n      this.connection.close(); // Let event bubble from here\n    } else {\n      this.emit('close');\n    }\n\n    clearTimeout(this.connectTimer);\n  }\n\n  error(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    this.emit('payload', {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        message,\n        code\n      }\n    });\n  }\n\n  send(payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100);\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected');\n    } else {\n      this.connection.send(payload);\n    }\n  }\n\n}\n\nmodule.exports = ConnectionManager;","map":{"version":3,"names":["EventEmitter","require","dev","process","env","NODE_ENV","ConnectionManager","constructor","connections","targets","options","connected","status","interval","name","inSetup","connect","index","console","log","connection","length","protocol","location","on","err","connectionError","listenerCount","emit","warn","message","summary","closing","refresh","target","data","payload","toFixed","clearTimeout","connectTimer","setTimeout","close","error","code","id","jsonrpc","send","closed","module","exports"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/node_modules/eth-provider/ConnectionManager/index.js"],"sourcesContent":["const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', (summary) => {\n        this.connected = false\n        this.emit('close')\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected')\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}