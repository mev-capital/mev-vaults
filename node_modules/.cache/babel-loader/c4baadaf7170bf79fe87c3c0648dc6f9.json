{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar URI_AVAILABLE = 'URI_AVAILABLE';\n\nvar UserRejectedRequestError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(UserRejectedRequestError, _Error);\n\n  function UserRejectedRequestError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.name = _this.constructor.name;\n    _this.message = 'The user rejected the request.';\n    return _this;\n  }\n\n  return UserRejectedRequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction getSupportedChains(_ref) {\n  var supportedChainIds = _ref.supportedChainIds,\n      rpc = _ref.rpc;\n\n  if (supportedChainIds) {\n    return supportedChainIds;\n  }\n\n  return rpc ? Object.keys(rpc).map(function (k) {\n    return Number(k);\n  }) : undefined;\n}\n\nvar WalletConnectConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(WalletConnectConnector, _AbstractConnector);\n\n  function WalletConnectConnector(config) {\n    var _this2;\n\n    _this2 = _AbstractConnector.call(this, {\n      supportedChainIds: getSupportedChains(config)\n    }) || this;\n    _this2.config = config;\n    _this2.handleChainChanged = _this2.handleChainChanged.bind(_assertThisInitialized(_this2));\n    _this2.handleAccountsChanged = _this2.handleAccountsChanged.bind(_assertThisInitialized(_this2));\n    _this2.handleDisconnect = _this2.handleDisconnect.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  var _proto = WalletConnectConnector.prototype;\n\n  _proto.handleChainChanged = function handleChainChanged(chainId) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n\n    this.emitUpdate({\n      chainId: chainId\n    });\n  };\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  _proto.handleDisconnect = function handleDisconnect() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'disconnect' event\");\n    }\n\n    this.emitDeactivate(); // we have to do this because of a @walletconnect/web3-provider bug\n\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop();\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);\n      this.walletConnectProvider = undefined;\n    }\n\n    this.emitDeactivate();\n  };\n\n  _proto.activate = function activate() {\n    try {\n      var _this4 = this;\n\n      var _temp5 = function _temp5() {\n        function _temp2() {\n          return Promise.resolve(_this4.walletConnectProvider.enable().then(function (accounts) {\n            return accounts[0];\n          })[\"catch\"](function (error) {\n            // TODO ideally this would be a better check\n            if (error.message === 'User closed modal') {\n              throw new UserRejectedRequestError();\n            }\n\n            throw error;\n          })).then(function (account) {\n            _this4.walletConnectProvider.on('disconnect', _this4.handleDisconnect);\n\n            _this4.walletConnectProvider.on('chainChanged', _this4.handleChainChanged);\n\n            _this4.walletConnectProvider.on('accountsChanged', _this4.handleAccountsChanged);\n\n            return {\n              provider: _this4.walletConnectProvider,\n              account: account\n            };\n          });\n        }\n\n        var _temp = function () {\n          if (!_this4.walletConnectProvider.wc.connected) {\n            return Promise.resolve(_this4.walletConnectProvider.wc.createSession({\n              chainId: _this4.supportedChainIds && _this4.supportedChainIds.length > 0 ? _this4.supportedChainIds[0] : 1\n            })).then(function () {\n              _this4.emit(URI_AVAILABLE, _this4.walletConnectProvider.wc.uri);\n            });\n          }\n        }(); // ensure that the uri is going to be available, and emit an event if there's a new uri\n\n\n        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);\n      };\n\n      var _temp6 = function () {\n        if (!_this4.walletConnectProvider) {\n          return Promise.resolve(import('@walletconnect/web3-provider').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (WalletConnectProvider) {\n            _this4.walletConnectProvider = new WalletConnectProvider(_this4.config);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(_temp5) : _temp5(_temp6));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this6 = this;\n\n      return Promise.resolve(_this6.walletConnectProvider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this8 = this;\n\n      return Promise.resolve(_this8.walletConnectProvider.send('eth_chainId'));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this10 = this;\n\n      return Promise.resolve(_this10.walletConnectProvider.send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop();\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect);\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);\n    }\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this12$walletConnect;\n\n      var _this12 = this;\n\n      return Promise.resolve((_this12$walletConnect = _this12.walletConnectProvider) == null ? void 0 : _this12$walletConnect.close()).then(function () {});\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return WalletConnectConnector;\n}(AbstractConnector);\n\nexport { URI_AVAILABLE, UserRejectedRequestError, WalletConnectConnector };","map":{"version":3,"mappings":"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","names":["URI_AVAILABLE","UserRejectedRequestError","_inheritsLoose","_this","name","constructor","message","Error","getSupportedChains","supportedChainIds","rpc","Object","keys","map","Number","k","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","console","log","emitUpdate","accounts","account","emitDeactivate","walletConnectProvider","stop","removeListener","activate","_this4","enable","then","error","on","provider","wc","connected","createSession","length","emit","uri","m","WalletConnectProvider","getProvider","_this6","getChainId","_this8","send","getAccount","_this10","deactivate","close","_this12","_this12$walletConnect","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({\n        chainId: this.supportedChainIds && this.supportedChainIds.length > 0 ? this.supportedChainIds[0] : 1\n      })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}