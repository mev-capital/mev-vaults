{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState, useMemo } from 'react';\nimport { BIG_ZERO } from '../utils/formatbalance';\nimport useWallet from './useWallet';\nimport useSushi from './useSushi';\nimport { getMasterChefContract } from '../sushi/utils';\nimport { log } from '../utils/logger';\nimport { contractAddresses } from '../sushi/lib/constants';\n\nconst useUzdBalance = function () {\n  _s();\n\n  let address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n  const [balance, setBalance] = useState(new BigNumber(BIG_ZERO));\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const chainId = useMemo(() => {\n    return parseInt(ethereum === null || ethereum === void 0 ? void 0 : ethereum.chainId, 16);\n  }, [ethereum === null || ethereum === void 0 ? void 0 : ethereum.chainId]);\n  const sushi = useSushi();\n  const masterChefContract = getMasterChefContract(sushi);\n  useEffect(() => {\n    if (!account || !chainId || !masterChefContract) {\n      return;\n    }\n\n    const getBalance = async () => {\n      const contract = sushi.getEthContract();\n      contract.options.address = address || contractAddresses.uzd[1];\n      const value = await contract.methods.balanceOf(account).call();\n\n      if (value) {\n        log(`ðŸ”„ UZD Balance (contract ${contract.options.address}) set to ${value}`);\n        setBalance(new BigNumber(value));\n      }\n    };\n\n    getBalance();\n    let refreshInterval = setInterval(getBalance, 5000);\n    return () => clearInterval(refreshInterval);\n  }, [account, chainId, masterChefContract, sushi, address]);\n  return balance;\n};\n\n_s(useUzdBalance, \"R8RMA/a/nq8nGxyCSIdqaoMMrLQ=\", false, function () {\n  return [useWallet, useSushi];\n});\n\nexport default useUzdBalance;","map":{"version":3,"names":["BigNumber","useEffect","useState","useMemo","BIG_ZERO","useWallet","useSushi","getMasterChefContract","log","contractAddresses","useUzdBalance","address","undefined","balance","setBalance","account","ethereum","chainId","parseInt","sushi","masterChefContract","getBalance","contract","getEthContract","options","uzd","value","methods","balanceOf","call","refreshInterval","setInterval","clearInterval"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUzdBalance.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { useEffect, useState, useMemo } from 'react';\nimport { BIG_ZERO } from '../utils/formatbalance';\nimport useWallet from './useWallet';\nimport useSushi from './useSushi';\nimport { getMasterChefContract } from '../sushi/utils';\nimport { log } from '../utils/logger';\nimport { contractAddresses } from '../sushi/lib/constants';\n\nconst useUzdBalance = (address: string | undefined = undefined) => {\n    const [balance, setBalance] = useState(new BigNumber(BIG_ZERO));\n    const { account, ethereum } = useWallet();\n\n    const chainId = useMemo(() => {\n        return parseInt(ethereum?.chainId, 16);\n    }, [ethereum?.chainId]);\n\n    const sushi = useSushi();\n    const masterChefContract = getMasterChefContract(sushi);\n\n    useEffect(() => {\n        if (!account || !chainId || !masterChefContract) {\n            return;\n        }\n\n        const getBalance = async () => {\n            const contract = sushi.getEthContract();\n            contract.options.address = address || contractAddresses.uzd[1];\n\n            const value = await contract.methods.balanceOf(account).call();\n            if (value) {\n                log(`ðŸ”„ UZD Balance (contract ${contract.options.address}) set to ${value}`);\n                setBalance(new BigNumber(value));\n            }\n        };\n\n        getBalance();\n\n        let refreshInterval = setInterval(getBalance, 5000);\n        return () => clearInterval(refreshInterval);\n    }, [account, chainId, masterChefContract, sushi, address]);\n\n    return balance;\n};\n\nexport default useUzdBalance;\n"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,iBAAT,QAAkC,wBAAlC;;AAEA,MAAMC,aAAa,GAAG,YAA6C;EAAA;;EAAA,IAA5CC,OAA4C,uEAAdC,SAAc;EAC/D,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAIF,SAAJ,CAAcI,QAAd,CAAD,CAAtC;EACA,MAAM;IAAEW,OAAF;IAAWC;EAAX,IAAwBX,SAAS,EAAvC;EAEA,MAAMY,OAAO,GAAGd,OAAO,CAAC,MAAM;IAC1B,OAAOe,QAAQ,CAACF,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEC,OAAX,EAAoB,EAApB,CAAf;EACH,CAFsB,EAEpB,CAACD,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEC,OAAX,CAFoB,CAAvB;EAIA,MAAME,KAAK,GAAGb,QAAQ,EAAtB;EACA,MAAMc,kBAAkB,GAAGb,qBAAqB,CAACY,KAAD,CAAhD;EAEAlB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACc,OAAD,IAAY,CAACE,OAAb,IAAwB,CAACG,kBAA7B,EAAiD;MAC7C;IACH;;IAED,MAAMC,UAAU,GAAG,YAAY;MAC3B,MAAMC,QAAQ,GAAGH,KAAK,CAACI,cAAN,EAAjB;MACAD,QAAQ,CAACE,OAAT,CAAiBb,OAAjB,GAA2BA,OAAO,IAAIF,iBAAiB,CAACgB,GAAlB,CAAsB,CAAtB,CAAtC;MAEA,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiBC,SAAjB,CAA2Bb,OAA3B,EAAoCc,IAApC,EAApB;;MACA,IAAIH,KAAJ,EAAW;QACPlB,GAAG,CAAE,4BAA2Bc,QAAQ,CAACE,OAAT,CAAiBb,OAAQ,YAAWe,KAAM,EAAvE,CAAH;QACAZ,UAAU,CAAC,IAAId,SAAJ,CAAc0B,KAAd,CAAD,CAAV;MACH;IACJ,CATD;;IAWAL,UAAU;IAEV,IAAIS,eAAe,GAAGC,WAAW,CAACV,UAAD,EAAa,IAAb,CAAjC;IACA,OAAO,MAAMW,aAAa,CAACF,eAAD,CAA1B;EACH,CApBQ,EAoBN,CAACf,OAAD,EAAUE,OAAV,EAAmBG,kBAAnB,EAAuCD,KAAvC,EAA8CR,OAA9C,CApBM,CAAT;EAsBA,OAAOE,OAAP;AACH,CAlCD;;GAAMH,a;UAE4BL,S,EAMhBC,Q;;;AA4BlB,eAAeI,aAAf"},"metadata":{},"sourceType":"module"}