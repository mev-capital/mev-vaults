{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar TorusConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(TorusConnector, _AbstractConnector);\n\n  function TorusConnector(_ref) {\n    var _this;\n\n    var chainId = _ref.chainId,\n        _ref$initOptions = _ref.initOptions,\n        initOptions = _ref$initOptions === void 0 ? {} : _ref$initOptions,\n        _ref$constructorOptio = _ref.constructorOptions,\n        constructorOptions = _ref$constructorOptio === void 0 ? {} : _ref$constructorOptio,\n        _ref$loginOptions = _ref.loginOptions,\n        loginOptions = _ref$loginOptions === void 0 ? {} : _ref$loginOptions;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.initOptions = initOptions;\n    _this.constructorOptions = constructorOptions;\n    _this.loginOptions = loginOptions;\n    return _this;\n  }\n\n  var _proto = TorusConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.torus.login(_this3.loginOptions).then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.torus.provider,\n            account: account\n          };\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.torus) {\n          return Promise.resolve(import('@toruslabs/torus-embed').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (Torus) {\n            _this3.torus = new Torus(_this3.constructorOptions);\n            return Promise.resolve(_this3.torus.init(_this3.initOptions)).then(function () {});\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.torus.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.torus.ethereum.send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    return Promise.resolve();\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n\n      return Promise.resolve(_this11.torus.cleanUp()).then(function () {\n        _this11.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return TorusConnector;\n}(AbstractConnector);\n\nexport { TorusConnector };","map":{"version":3,"mappings":";;;;;;;;IAUaA,cAAb;EAAAC;;EAQE;;;QAAcC;gCAASC;QAAAA,4CAAc,EAAdA,GAAcC;qCAAIC;QAAAA,wDAAqB,EAArBA,GAAqBC;iCAAIC;QAAAA,8CAAe,EAAfA,GAAeC;IAC/EC,sCAAM;MAAEC,iBAAiB,EAAE,CAACR,OAAD;IAArB,CAAN;IAEAO,MAAKP,OAAL,GAAeA,OAAf;IACAO,MAAKN,WAAL,GAAmBA,WAAnB;IACAM,MAAKJ,kBAAL,GAA0BA,kBAA1B;IACAI,MAAKF,YAAL,GAAoBA,YAApB;;EACD;;EAfH;;EAAAI,OAiBeC,QAjBf;IAAA;;+BAwB0BC,OAAKC,KAAL,CAAWC,KAAX,CAAiBF,OAAKN,YAAtB,EAAoCS,IAApC,CAAyC,UAACC,QAAD;UAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;QAAzC,mBAAhBC,OAAgB,EAAhBA;UAEN,OAAO;YAAEC,QAAQ,EAAEN,OAAKC,KAAL,CAAWK,QAAvB;YAAiCD,OAAO,EAAPA;UAAjC,CAAP;;;;mBARK;;;YAAD,CAACL,OAAKC;iCACY,OAAO,wBAAP,EAAiCE,IAAjC,CAAsC,aAAC;YAAA;;YAAA,qBAAII,CAAJ,QAAIA,GAAJ,MAAIA,IAAC,WAAL,yBAAkBA,CAAlB;UAAvC,mBAAdC,KAAc,EAAdA;YACNR,OAAKC,KAAL,GAAa,IAAIO,KAAJ,CAAUR,OAAKR,kBAAf,CAAb;mCACMQ,OAAKC,KAAL,CAAWQ,IAAX,CAAgBT,OAAKV,WAArB;;;;;;IArBZ;MAAA;IAAA;EAAA;;EAAAQ,OA6BeY,WA7Bf;IAAA;mBA8BW;;MAAP,uBAAOC,OAAKV,KAAL,CAAWK,QAAlB;IA9BJ;MAAA;IAAA;EAAA;;EAAAR,OAiCec,UAjCf;IAAA;mBAkCW;;MAAP,uBAAOC,OAAKxB,OAAZ;IAlCJ;MAAA;IAAA;EAAA;;EAAAS,OAqCegB,UArCf;IAAA;mBAsCW;;MAAP,uBAAOC,OAAKd,KAAL,CAAWe,QAAX,CAAoBC,IAApB,CAAyB,cAAzB,EAAyCd,IAAzC,CAA8C,UAACC,QAAD;QAAA,OAAgCA,QAAQ,CAAC,CAAD,CAAxC;MAA9C,EAAP;IAtCJ;MAAA;IAAA;EAAA;;EAAAN,OAyCeoB,UAzCf;;EAAA;;EAAApB,OA2CeqB,KA3Cf;IAAA;oBA4CU;;6BAAAC,QAAKnB,KAAL,CAAWoB,OAAX;QACND,QAAKE,cAAL;;IA7CJ;MAAA;IAAA;EAAA;;EAAA;AAAA,EAAoCC,iBAApC","names":["TorusConnector","_inheritsLoose","chainId","initOptions","_ref$initOptions","constructorOptions","_ref$constructorOptio","loginOptions","_ref$loginOptions","_this","supportedChainIds","_proto","activate","_this3","torus","login","then","accounts","account","provider","m","Torus","init","getProvider","_this5","getChainId","_this7","getAccount","_this9","ethereum","send","deactivate","close","_this11","cleanUp","emitDeactivate","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}