{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { BIG_ZERO } from '../utils/formatbalance';\nimport { useWallet } from 'use-wallet';\nimport useSushi from './useSushi';\nimport { log } from '../utils/logger';\n\nconst useCrossChainBalances = lpPrice => {\n  _s();\n\n  const {\n    account\n  } = useWallet();\n  const sushi = useSushi();\n  const [balances, setBalances] = useState([{\n    chainId: 'eth',\n    value: new BigNumber(BIG_ZERO)\n  }, {\n    chainId: 'bsc',\n    value: new BigNumber(BIG_ZERO)\n  }, {\n    chainId: 'plg',\n    value: new BigNumber(BIG_ZERO)\n  }]);\n  useEffect(() => {\n    if (!account || lpPrice.toNumber() === 0 || !sushi) {\n      return;\n    }\n\n    const getBalances = async () => {\n      const ethContract = sushi.getEthContract(account);\n      const ethBalance = await ethContract.methods.balanceOf(account).call();\n      log(`Raw ETH balance is: ${ethBalance}`);\n      const bscBalance = await sushi.bscContracts.bscMasterChef.methods.balanceOf(account).call();\n      log(`Raw BSC balance is: ${bscBalance}`);\n      const plgBalance = await sushi.plgContracts.polygonContract.methods.balanceOf(account).call();\n      log(`Raw PLG balance is: ${bscBalance}`);\n      setBalances([{\n        chainId: 'eth',\n        value: new BigNumber(ethBalance)\n      }, {\n        chainId: 'bsc',\n        value: new BigNumber(bscBalance)\n      }, {\n        chainId: 'plg',\n        value: new BigNumber(plgBalance)\n      }]);\n    };\n\n    getBalances();\n  }, [account, lpPrice, sushi]);\n  return balances;\n};\n\n_s(useCrossChainBalances, \"mXO3qlYSJyLig+i5y4XojBpNCzg=\", false, function () {\n  return [useWallet, useSushi];\n});\n\nexport default useCrossChainBalances;","map":{"version":3,"names":["BigNumber","useEffect","useState","BIG_ZERO","useWallet","useSushi","log","useCrossChainBalances","lpPrice","account","sushi","balances","setBalances","chainId","value","toNumber","getBalances","ethContract","getEthContract","ethBalance","methods","balanceOf","call","bscBalance","bscContracts","bscMasterChef","plgBalance","plgContracts","polygonContract"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useCrossChainBalances.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { BIG_ZERO } from '../utils/formatbalance';\nimport { useWallet } from 'use-wallet';\nimport useSushi from './useSushi';\nimport { log } from '../utils/logger';\n\nconst useCrossChainBalances = (lpPrice: BigNumber) => {\n    const { account } = useWallet();\n    const sushi = useSushi();\n\n    const [balances, setBalances] = useState([\n        {\n            chainId: 'eth',\n            value: new BigNumber(BIG_ZERO),\n        },\n        {\n            chainId: 'bsc',\n            value: new BigNumber(BIG_ZERO),\n        },\n        {\n            chainId: 'plg',\n            value: new BigNumber(BIG_ZERO),\n        },\n    ]);\n\n    useEffect(() => {\n        if (!account || lpPrice.toNumber() === 0 || !sushi) {\n            return;\n        }\n\n        const getBalances = async () => {\n            const ethContract = sushi.getEthContract(account);\n            const ethBalance = await ethContract.methods.balanceOf(account).call();\n            log(`Raw ETH balance is: ${ethBalance}`);\n            const bscBalance = await sushi.bscContracts.bscMasterChef.methods\n                .balanceOf(account)\n                .call();\n            log(`Raw BSC balance is: ${bscBalance}`);\n\n            const plgBalance = await sushi.plgContracts.polygonContract.methods\n                .balanceOf(account)\n                .call();\n\n            log(`Raw PLG balance is: ${bscBalance}`);\n\n            setBalances([\n                {\n                    chainId: 'eth',\n                    value: new BigNumber(ethBalance),\n                },\n                {\n                    chainId: 'bsc',\n                    value: new BigNumber(bscBalance),\n                },\n                {\n                    chainId: 'plg',\n                    value: new BigNumber(plgBalance),\n                },\n            ]);\n        };\n\n        getBalances();\n    }, [account, lpPrice, sushi]);\n\n    return balances;\n};\n\nexport default useCrossChainBalances;\n"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,MAAMC,qBAAqB,GAAIC,OAAD,IAAwB;EAAA;;EAClD,MAAM;IAAEC;EAAF,IAAcL,SAAS,EAA7B;EACA,MAAMM,KAAK,GAAGL,QAAQ,EAAtB;EAEA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CACrC;IACIW,OAAO,EAAE,KADb;IAEIC,KAAK,EAAE,IAAId,SAAJ,CAAcG,QAAd;EAFX,CADqC,EAKrC;IACIU,OAAO,EAAE,KADb;IAEIC,KAAK,EAAE,IAAId,SAAJ,CAAcG,QAAd;EAFX,CALqC,EASrC;IACIU,OAAO,EAAE,KADb;IAEIC,KAAK,EAAE,IAAId,SAAJ,CAAcG,QAAd;EAFX,CATqC,CAAD,CAAxC;EAeAF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACQ,OAAD,IAAYD,OAAO,CAACO,QAAR,OAAuB,CAAnC,IAAwC,CAACL,KAA7C,EAAoD;MAChD;IACH;;IAED,MAAMM,WAAW,GAAG,YAAY;MAC5B,MAAMC,WAAW,GAAGP,KAAK,CAACQ,cAAN,CAAqBT,OAArB,CAApB;MACA,MAAMU,UAAU,GAAG,MAAMF,WAAW,CAACG,OAAZ,CAAoBC,SAApB,CAA8BZ,OAA9B,EAAuCa,IAAvC,EAAzB;MACAhB,GAAG,CAAE,uBAAsBa,UAAW,EAAnC,CAAH;MACA,MAAMI,UAAU,GAAG,MAAMb,KAAK,CAACc,YAAN,CAAmBC,aAAnB,CAAiCL,OAAjC,CACpBC,SADoB,CACVZ,OADU,EAEpBa,IAFoB,EAAzB;MAGAhB,GAAG,CAAE,uBAAsBiB,UAAW,EAAnC,CAAH;MAEA,MAAMG,UAAU,GAAG,MAAMhB,KAAK,CAACiB,YAAN,CAAmBC,eAAnB,CAAmCR,OAAnC,CACpBC,SADoB,CACVZ,OADU,EAEpBa,IAFoB,EAAzB;MAIAhB,GAAG,CAAE,uBAAsBiB,UAAW,EAAnC,CAAH;MAEAX,WAAW,CAAC,CACR;QACIC,OAAO,EAAE,KADb;QAEIC,KAAK,EAAE,IAAId,SAAJ,CAAcmB,UAAd;MAFX,CADQ,EAKR;QACIN,OAAO,EAAE,KADb;QAEIC,KAAK,EAAE,IAAId,SAAJ,CAAcuB,UAAd;MAFX,CALQ,EASR;QACIV,OAAO,EAAE,KADb;QAEIC,KAAK,EAAE,IAAId,SAAJ,CAAc0B,UAAd;MAFX,CATQ,CAAD,CAAX;IAcH,CA7BD;;IA+BAV,WAAW;EACd,CArCQ,EAqCN,CAACP,OAAD,EAAUD,OAAV,EAAmBE,KAAnB,CArCM,CAAT;EAuCA,OAAOC,QAAP;AACH,CA3DD;;GAAMJ,qB;UACkBH,S,EACNC,Q;;;AA2DlB,eAAeE,qBAAf"},"metadata":{},"sourceType":"module"}