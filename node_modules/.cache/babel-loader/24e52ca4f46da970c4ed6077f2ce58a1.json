{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant'; // taken from ethers.js, compatible interface with web3 provider\n\nexport class RequestError extends Error {\n  constructor(message, code, data) {\n    super();\n    this.code = code;\n    this.data = data;\n    this.name = this.constructor.name;\n    this.message = message;\n  }\n\n}\n\nclass MiniRpcProvider {\n  constructor(chainId, url) {\n    this.isMetaMask = false;\n    this.chainId = void 0;\n    this.url = void 0;\n    this.host = void 0;\n    this.path = void 0;\n\n    this.sendAsync = (request, callback) => {\n      this.request(request.method, request.params).then(result => callback(null, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result\n      })).catch(error => callback(error, null));\n    };\n\n    this.request = async (method, params) => {\n      if (typeof method !== 'string') {\n        params = method.params;\n        method = method.method;\n      }\n\n      const response = await fetch(this.url, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params\n        })\n      });\n      if (!response.ok) throw new RequestError(`${response.status}: ${response.statusText}`, -32000);\n      const body = await response.json();\n\n      if ('error' in body) {\n        var _body$error, _body$error2, _body$error3;\n\n        throw new RequestError(body === null || body === void 0 ? void 0 : (_body$error = body.error) === null || _body$error === void 0 ? void 0 : _body$error.message, body === null || body === void 0 ? void 0 : (_body$error2 = body.error) === null || _body$error2 === void 0 ? void 0 : _body$error2.code, body === null || body === void 0 ? void 0 : (_body$error3 = body.error) === null || _body$error3 === void 0 ? void 0 : _body$error3.data);\n      } else if ('result' in body) {\n        return body.result;\n      } else {\n        throw new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, body);\n      }\n    };\n\n    this.chainId = chainId;\n    this.url = url;\n    const parsed = new URL(url);\n    this.host = parsed.host;\n    this.path = parsed.pathname;\n  }\n\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  constructor(_ref) {\n    let {\n      urls,\n      defaultChainId\n    } = _ref;\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url');\n    super({\n      supportedChainIds: Object.keys(urls).map(k => Number(k))\n    });\n    this.providers = void 0;\n    this.currentChainId = void 0;\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    this.providers = Object.keys(urls).reduce((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n  }\n\n  async activate() {\n    return {\n      provider: this.providers[this.currentChainId],\n      chainId: this.currentChainId,\n      account: null\n    };\n  }\n\n  async getProvider() {\n    return this.providers[this.currentChainId];\n  }\n\n  async getChainId() {\n    return this.currentChainId;\n  }\n\n  async getAccount() {\n    return null;\n  }\n\n  deactivate() {\n    return;\n  }\n\n  changeChainId(chainId) {\n    invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`);\n    this.currentChainId = chainId;\n    this.emitUpdate({\n      provider: this.providers[this.currentChainId],\n      chainId\n    });\n  }\n\n}","map":{"version":3,"names":["AbstractConnector","invariant","RequestError","Error","constructor","message","code","data","name","MiniRpcProvider","chainId","url","isMetaMask","host","path","sendAsync","request","callback","method","params","then","result","jsonrpc","id","catch","error","response","fetch","body","JSON","stringify","ok","status","statusText","json","parsed","URL","pathname","NetworkConnector","urls","defaultChainId","Object","keys","length","supportedChainIds","map","k","Number","providers","currentChainId","reduce","accumulator","activate","provider","account","getProvider","getChainId","getAccount","deactivate","changeChainId","includes","toString","emitUpdate"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/contexts/EthereumExplorerProvider/NetworkConnector.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n    isMetaMask?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: any, callback: (error: any, response: any) => void) => void;\n    send?: (request: any, callback: (error: any, response: any) => void) => void;\n};\n\nexport class RequestError extends Error {\n    constructor(message: string, public code: number, public data?: unknown) {\n        super();\n        this.name = this.constructor.name;\n        this.message = message;\n    }\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n    public readonly isMetaMask: false = false;\n    public readonly chainId: number;\n    public readonly url: string;\n    public readonly host: string;\n    public readonly path: string;\n\n    constructor(chainId: number, url: string) {\n        this.chainId = chainId;\n        this.url = url;\n        const parsed = new URL(url);\n        this.host = parsed.host;\n        this.path = parsed.pathname;\n    }\n\n    public readonly sendAsync = (\n        request: {\n            jsonrpc: '2.0';\n            id: number | string | null;\n            method: string;\n            params?: unknown[] | object;\n        },\n        callback: (error: any, response: any) => void\n    ): void => {\n        this.request(request.method, request.params)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    };\n\n    public readonly request = async (\n        method: string | { method: string; params?: unknown[] | object },\n        params?: unknown[] | object\n    ): Promise<unknown> => {\n        if (typeof method !== 'string') {\n            params = (method as any).params;\n            method = method.method;\n        }\n\n        const response = await fetch(this.url, {\n            method: 'POST',\n            body: JSON.stringify({\n                jsonrpc: '2.0',\n                id: 1,\n                method,\n                params,\n            }),\n        });\n        if (!response.ok)\n            throw new RequestError(`${response.status}: ${response.statusText}`, -32000);\n        const body = await response.json();\n        if ('error' in body) {\n            throw new RequestError(body?.error?.message, body?.error?.code, body?.error?.data);\n        } else if ('result' in body) {\n            return body.result;\n        } else {\n            throw new RequestError(\n                `Received unexpected JSON-RPC response to ${method} request.`,\n                -32000,\n                body\n            );\n        }\n    };\n}\n\ninterface NetworkConnectorArguments {\n    urls: { [chainId: number]: string };\n    defaultChainId?: number;\n}\n\nexport class NetworkConnector extends AbstractConnector {\n    private readonly providers: { [chainId: number]: MiniRpcProvider };\n    private currentChainId: number;\n\n    constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n        invariant(\n            defaultChainId || Object.keys(urls).length === 1,\n            'defaultChainId is a required argument with >1 url'\n        );\n        super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) });\n\n        this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n        this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>(\n            (accumulator, chainId) => {\n                accumulator[Number(chainId)] = new MiniRpcProvider(\n                    Number(chainId),\n                    urls[Number(chainId)]\n                );\n                return accumulator;\n            },\n            {}\n        );\n    }\n\n    public async activate(): Promise<ConnectorUpdate> {\n        return {\n            provider: this.providers[this.currentChainId],\n            chainId: this.currentChainId,\n            account: null,\n        };\n    }\n\n    public async getProvider(): Promise<MiniRpcProvider> {\n        return this.providers[this.currentChainId];\n    }\n\n    public async getChainId(): Promise<number> {\n        return this.currentChainId;\n    }\n\n    public async getAccount(): Promise<null> {\n        return null;\n    }\n\n    public deactivate() {\n        return;\n    }\n\n    public changeChainId(chainId: number) {\n        invariant(\n            Object.keys(this.providers).includes(chainId.toString()),\n            `No url found for chainId ${chainId}`\n        );\n        this.currentChainId = chainId;\n        this.emitUpdate({ provider: this.providers[this.currentChainId], chainId });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}