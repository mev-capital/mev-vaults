{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { generatePrivate, getPublic, decrypt } from '@toruslabs/eccrypto';\nimport { post, generateJsonRPCObject, setAPIKey, setEmbedHost, get } from '@toruslabs/http-helpers';\nimport BN from 'bn.js';\nimport { ec } from 'elliptic';\nimport JsonStringify from 'json-stable-stringify';\nimport { toChecksumAddress } from 'web3-utils';\nimport loglevel from 'loglevel';\nimport createKeccakHash from 'keccak';\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nclass SomeError extends Error {\n  constructor(_ref) {\n    let {\n      errors,\n      responses,\n      predicate\n    } = _ref;\n    super(\"Unable to resolve enough promises.\");\n\n    _defineProperty(this, \"errors\", void 0);\n\n    _defineProperty(this, \"responses\", void 0);\n\n    _defineProperty(this, \"predicate\", void 0);\n\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n\n}\n\nconst Some = (promises, predicate) => new Promise((resolve, reject) => {\n  let finishedCount = 0;\n  const sharedState = {\n    resolved: false\n  };\n  const errorArr = new Array(promises.length).fill(undefined);\n  const resultArr = new Array(promises.length).fill(undefined);\n  let predicateError;\n  return promises.forEach((x, index) => {\n    return x.then(resp => {\n      resultArr[index] = resp;\n      return undefined;\n    }).catch(error => {\n      errorArr[index] = error;\n    }) // eslint-disable-next-line promise/no-return-in-finally\n    .finally(() => {\n      if (sharedState.resolved) return;\n      return predicate(resultArr.slice(0), sharedState).then(data => {\n        sharedState.resolved = true;\n        resolve(data);\n        return undefined;\n      }).catch(error => {\n        // log only the last predicate error\n        predicateError = error;\n      }).finally(() => {\n        finishedCount += 1;\n\n        if (finishedCount === promises.length) {\n          const errors = Object.values(resultArr.reduce((acc, z) => {\n            if (z) {\n              var _error$data;\n\n              const {\n                id,\n                error\n              } = z;\n\n              if ((error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.length) > 0) {\n                if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);else acc[id] = error.data;\n              }\n            }\n\n            return acc;\n          }, {}));\n\n          if (errors.length > 0) {\n            // Format-able errors\n            const msg = errors.length > 1 ? `\\n${errors.map(it => `â€¢ ${it}`).join(\"\\n\")}` : errors[0];\n            reject(new Error(msg));\n          } else {\n            var _predicateError;\n\n            reject(new SomeError({\n              errors: errorArr,\n              responses: resultArr,\n              predicate: ((_predicateError = predicateError) === null || _predicateError === void 0 ? void 0 : _predicateError.message) || predicateError\n            }));\n          }\n        }\n      });\n    });\n  });\n});\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass GetOrSetNonceError extends Error {}\n\nconst kCombinations = (s, k) => {\n  let set = s;\n\n  if (typeof set === \"number\") {\n    set = Array.from({\n      length: set\n    }, (_, i) => i);\n  }\n\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], []);\n  }\n\n  const combs = [];\n  let tailCombs = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nconst thresholdSame = (arr, t) => {\n  const hashMap = {};\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n\n  return undefined;\n};\n\nconst keyLookup = async (endpoints, verifier, verifierId) => {\n  const lookupPromises = endpoints.map(x => post(x, generateJsonRPCObject(\"VerifierLookupRequest\", {\n    verifier,\n    verifier_id: verifierId.toString()\n  })).catch(err => log.error(\"lookup request failed\", err)));\n  return Some(lookupPromises, lookupResults => {\n    const lookupShares = lookupResults.filter(x1 => x1);\n    const errorResult = thresholdSame(lookupShares.map(x2 => x2 && x2.error), ~~(endpoints.length / 2) + 1);\n    const keyResult = thresholdSame(lookupShares.map(x3 => x3 && x3.result), ~~(endpoints.length / 2) + 1);\n\n    if (keyResult || errorResult) {\n      return Promise.resolve({\n        keyResult,\n        errorResult\n      });\n    }\n\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nconst waitKeyLookup = (endpoints, verifier, verifierId, timeout) => new Promise((resolve, reject) => {\n  setTimeout(() => {\n    keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n  }, timeout);\n});\n\nconst keyAssign = async _ref => {\n  let {\n    endpoints,\n    torusNodePubs,\n    lastPoint,\n    firstPoint,\n    verifier,\n    verifierId,\n    signerHost,\n    network\n  } = _ref;\n  let nodeNum;\n  let initialPoint;\n\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString()\n  });\n\n  try {\n    const signedData = await post(signerHost, data, {\n      headers: {\n        pubKeyX: torusNodePubs[nodeNum].X,\n        pubKeyY: torusNodePubs[nodeNum].Y,\n        network\n      }\n    }, {\n      useAPIKey: true\n    });\n    return await post(endpoints[nodeNum], _objectSpread$1(_objectSpread$1({}, data), signedData), {\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    });\n  } catch (error) {\n    log.error(error);\n    const acceptedErrorMsgs = [// Slow node\n    \"Timed out\", // Happens when the node is not reachable (dns issue etc)\n    \"TypeError: Failed to fetch\", \"TypeError: cancelled\", \"TypeError: NetworkError when attempting to fetch resource.\" // Firefox\n    ];\n    if (acceptedErrorMsgs.includes(error.message)) return keyAssign({\n      endpoints,\n      torusNodePubs,\n      lastPoint: nodeNum + 1,\n      firstPoint: initialPoint,\n      verifier,\n      verifierId,\n      signerHost,\n      network\n    });\n    throw new Error(`Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`);\n  }\n};\n\nfunction keccak256(a) {\n  const hash = createKeccakHash(\"keccak256\").update(a).digest().toString(\"hex\");\n  return `0x${hash}`;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n} // of Torus nodes to handle malicious node responses\n\n\nclass Torus {\n  constructor() {\n    let {\n      enableOneKey = false,\n      metadataHost = \"https://metadata.tor.us\",\n      allowHost = \"https://signer.tor.us/api/allow\",\n      signerHost = \"https://signer.tor.us/api/sign\",\n      serverTimeOffset = 0,\n      network = \"mainnet\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"metadataHost\", void 0);\n\n    _defineProperty(this, \"allowHost\", void 0);\n\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n\n    _defineProperty(this, \"enableOneKey\", void 0);\n\n    _defineProperty(this, \"signerHost\", void 0);\n\n    _defineProperty(this, \"network\", void 0);\n\n    _defineProperty(this, \"ec\", void 0);\n\n    this.ec = new ec(\"secp256k1\");\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n\n    this.signerHost = signerHost;\n    this.network = network;\n  }\n\n  static enableLogging() {\n    let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (v) log.enableAll();else log.disableAll();\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err) {\n    return err instanceof GetOrSetNonceError;\n  }\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n\n\n  async getUserTypeAndAddress(endpoints, torusNodePubs, _ref) {\n    let {\n      verifier,\n      verifierId\n    } = _ref;\n    let doesKeyAssign = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const {\n      keyResult,\n      errorResult\n    } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    let isNewKey = false;\n    let finalKeyResult;\n\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      if (!doesKeyAssign) {\n        throw new Error(\"Verifier + VerifierID has not yet been assigned\");\n      }\n\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult === null || assignResult === void 0 ? void 0 : assignResult.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n\n    if (finalKeyResult) {\n      const {\n        pub_key_X: X,\n        pub_key_Y: Y\n      } = finalKeyResult.keys[0];\n      let nonceResult;\n      let nonce;\n      let modifiedPubKey;\n\n      try {\n        nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n\n      if (nonceResult.typeOfUser === \"v1\") {\n        modifiedPubKey = this.ec.keyFromPublic({\n          x: X,\n          y: Y\n        }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        modifiedPubKey = this.ec.keyFromPublic({\n          x: X,\n          y: Y\n        }).getPublic().add(this.ec.keyFromPublic({\n          x: nonceResult.pubNonce.x,\n          y: nonceResult.pubNonce.y\n        }).getPublic());\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n\n      const finalX = modifiedPubKey.getX().toString(16);\n      const finalY = modifiedPubKey.getY().toString(16);\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      if (nonceResult.typeOfUser === \"v1\") return {\n        typeOfUser: nonceResult.typeOfUser,\n        nonce,\n        X: finalX,\n        Y: finalY,\n        address\n      };else if (nonceResult.typeOfUser === \"v2\") {\n        return {\n          typeOfUser: nonceResult.typeOfUser,\n          nonce,\n          pubNonce: nonceResult.pubNonce,\n          upgraded: nonceResult.upgraded,\n          X: finalX,\n          Y: finalY,\n          address\n        };\n      }\n    }\n\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  async setCustomKey(_ref2) {\n    let {\n      privKeyHex,\n      metadataNonce,\n      torusKeyHex,\n      customKeyHex\n    } = _ref2;\n    let torusKey;\n\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16);\n    } else {\n      const privKey = new BN(privKeyHex, 16);\n      torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n);\n    }\n\n    const customKey = new BN(customKeyHex, 16);\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey);\n    await this.setMetadata(data);\n  }\n\n  async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken) {\n    let extraParams = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    const promiseArr = [];\n    await get(this.allowHost, {\n      headers: {\n        verifier,\n        verifier_id: verifierParams.verifier_id,\n        network: this.network\n      }\n    }, {\n      useAPIKey: true\n    });\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      }\n      */\n    // generate temporary private and public key that is used to secure receive shares\n\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(idToken); // make commitment requests to endpoints\n\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post(endpoints[i], generateJsonRPCObject(\"CommitmentRequest\", {\n        messageprefix: \"mug00\",\n        tokencommitment: tokenCommitment.slice(2),\n        temppubx: pubKeyX,\n        temppuby: pubKeyY,\n        verifieridentifier: verifier\n      })).catch(err => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n\n\n    return Some(promiseArr, resultArr => {\n      const completedRequests = resultArr.filter(x => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n\n        if (x.error) {\n          return false;\n        }\n\n        return true;\n      });\n\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    }).then(responses => {\n      const promiseArrRequest = [];\n      const nodeSigs = [];\n\n      for (let i = 0; i < responses.length; i += 1) {\n        if (responses[i]) nodeSigs.push(responses[i].result);\n      }\n\n      for (let i = 0; i < endpoints.length; i += 1) {\n        // eslint-disable-next-line promise/no-nesting\n        const p = post(endpoints[i], generateJsonRPCObject(\"ShareRequest\", {\n          encrypted: \"yes\",\n          item: [_objectSpread(_objectSpread({}, verifierParams), {}, {\n            idtoken: idToken,\n            nodesignatures: nodeSigs,\n            verifieridentifier: verifier\n          }, extraParams)]\n        })).catch(err => log.error(\"share req\", err));\n        promiseArrRequest.push(p);\n      }\n\n      return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n        /*\n            ShareRequestResult struct {\n              Keys []KeyAssignment\n            }\n                    / KeyAssignmentPublic -\n            type KeyAssignmentPublic struct {\n              Index     big.Int\n              PublicKey common.Point\n              Threshold int\n              Verifiers map[string][]string // Verifier => VerifierID\n            }\n                   // KeyAssignment -\n            type KeyAssignment struct {\n              KeyAssignmentPublic\n              Share big.Int // Or Si\n            }\n          */\n        // check if threshold number of nodes have returned the same user public key\n        const completedRequests = shareResponses.filter(x => x);\n        const thresholdPublicKey = thresholdSame(shareResponses.map(x => x && x.result && x.result.keys[0].PublicKey), ~~(endpoints.length / 2) + 1); // optimistically run lagrange interpolation once threshold number of shares have been received\n        // this is matched against the user public key to ensure that shares are consistent\n\n        if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n          const sharePromises = [];\n          const nodeIndexes = [];\n\n          for (let i = 0; i < shareResponses.length; i += 1) {\n            var _currentShareResponse, _currentShareResponse2;\n\n            const currentShareResponse = shareResponses[i];\n\n            if ((currentShareResponse === null || currentShareResponse === void 0 ? void 0 : (_currentShareResponse = currentShareResponse.result) === null || _currentShareResponse === void 0 ? void 0 : (_currentShareResponse2 = _currentShareResponse.keys) === null || _currentShareResponse2 === void 0 ? void 0 : _currentShareResponse2.length) > 0) {\n              currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n              const firstKey = currentShareResponse.result.keys[0];\n\n              if (firstKey.Metadata) {\n                const metadata = {\n                  ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                  iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                  mac: Buffer.from(firstKey.Metadata.mac, \"hex\") // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n\n                };\n                sharePromises.push( // eslint-disable-next-line promise/no-nesting\n                decrypt(tmpKey, _objectSpread(_objectSpread({}, metadata), {}, {\n                  ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\")\n                })).catch(err => log.debug(\"share decryption\", err)));\n              } else {\n                sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n              }\n            } else {\n              sharePromises.push(Promise.resolve(undefined));\n            }\n\n            nodeIndexes.push(new BN(indexes[i], 16));\n          }\n\n          const sharesResolved = await Promise.all(sharePromises);\n          if (sharedState.resolved) return undefined;\n          const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n            if (curr) acc.push({\n              index: nodeIndexes[index],\n              value: new BN(curr)\n            });\n            return acc;\n          }, []); // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n\n          const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n          let privateKey = null;\n\n          for (let j = 0; j < allCombis.length; j += 1) {\n            const currentCombi = allCombis[j];\n            const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index));\n            const shares = currentCombiShares.map(x => x.value);\n            const indices = currentCombiShares.map(x => x.index);\n            const derivedPrivateKey = this.lagrangeInterpolation(shares, indices);\n            if (!derivedPrivateKey) continue;\n            const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n            const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n            const decryptedPubKeyY = decryptedPubKey.slice(66);\n\n            if (new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 && new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0) {\n              privateKey = derivedPrivateKey;\n              break;\n            }\n          }\n\n          if (privateKey === undefined || privateKey === null) {\n            throw new Error(\"could not derive private key\");\n          }\n\n          return privateKey;\n        }\n\n        throw new Error(\"invalid\");\n      });\n    }).then(async returnedKey => {\n      let privateKey = returnedKey;\n      if (!privateKey) throw new Error(\"Invalid private key returned\");\n      const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n      const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n      const decryptedPubKeyY = decryptedPubKey.slice(66);\n      let metadataNonce;\n\n      if (this.enableOneKey) {\n        const {\n          nonce\n        } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n        metadataNonce = new BN(nonce || \"0\", 16);\n      } else {\n        metadataNonce = await this.getMetadata({\n          pub_key_X: decryptedPubKeyX,\n          pub_key_Y: decryptedPubKeyY\n        });\n      }\n\n      log.debug(\"> torus.js/retrieveShares\", {\n        privKey: privateKey.toString(16),\n        metadataNonce: metadataNonce.toString(16)\n      });\n      privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n);\n      const ethAddress = this.generateAddressFromPrivKey(privateKey);\n      log.debug(\"> torus.js/retrieveShares\", {\n        ethAddress,\n        privKey: privateKey.toString(16)\n      }); // return reconstructed private key and ethereum address\n\n      return {\n        ethAddress,\n        privKey: privateKey.toString(\"hex\", 64),\n        metadataNonce\n      };\n    });\n  }\n\n  async getMetadata(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/get`, data, options, {\n        useAPIKey: true\n      });\n\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0);\n      }\n\n      return new BN(metadataResponse.message, 16); // nonce\n    } catch (error) {\n      log.error(\"get metadata error\", error);\n      return new BN(0);\n    }\n  }\n\n  generateMetadataParams(message, privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16)\n    };\n    const sig = key.sign(keccak256(JsonStringify(setData)).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\")\n    };\n  }\n\n  async setMetadata(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/set`, data, options, {\n        useAPIKey: true\n      });\n      return metadataResponse.message; // IPFS hash\n    } catch (error) {\n      log.error(\"set metadata error\", error);\n      return \"\";\n    }\n  }\n\n  lagrangeInterpolation(shares, nodeIndex) {\n    if (shares.length !== nodeIndex.length) {\n      return null;\n    }\n\n    let secret = new BN(0);\n\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1);\n      let lower = new BN(1);\n\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg());\n          upper = upper.umod(this.ec.curve.n);\n          let temp = nodeIndex[i].sub(nodeIndex[j]);\n          temp = temp.umod(this.ec.curve.n);\n          lower = lower.mul(temp).umod(this.ec.curve.n);\n        }\n      }\n\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n      secret = secret.add(delta);\n    }\n\n    return secret.umod(this.ec.curve.n);\n  }\n\n  generateAddressFromPrivKey(privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(publicKey, \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  generateAddressFromPubKey(publicKeyX, publicKeyY) {\n    const key = this.ec.keyFromPublic({\n      x: publicKeyX.toString(\"hex\", 64),\n      y: publicKeyY.toString(\"hex\", 64)\n    });\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n\n\n  async getPublicAddress(endpoints, torusNodePubs, _ref3) {\n    let {\n      verifier,\n      verifierId\n    } = _ref3;\n    let isExtended = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    log.debug(\"> torus.js/getPublicAddress\", {\n      endpoints,\n      torusNodePubs,\n      verifier,\n      verifierId,\n      isExtended\n    });\n    let finalKeyResult;\n    let isNewKey = false;\n    const {\n      keyResult,\n      errorResult\n    } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult === null || assignResult === void 0 ? void 0 : assignResult.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n\n    log.debug(\"> torus.js/getPublicAddress\", {\n      finalKeyResult,\n      isNewKey\n    });\n\n    if (finalKeyResult) {\n      var _nonce;\n\n      let {\n        pub_key_X: X,\n        pub_key_Y: Y\n      } = finalKeyResult.keys[0];\n      let nonceResult;\n      let nonce;\n      let modifiedPubKey;\n      let typeOfUser;\n      let pubNonce;\n\n      if (this.enableOneKey) {\n        try {\n          nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n          nonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n        } catch {\n          throw new GetOrSetNonceError();\n        }\n\n        if (nonceResult.typeOfUser === \"v1\") {\n          modifiedPubKey = this.ec.keyFromPublic({\n            x: X,\n            y: Y\n          }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n        } else if (nonceResult.typeOfUser === \"v2\") {\n          if (nonceResult.upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({\n              x: X,\n              y: Y\n            }).getPublic();\n          } else {\n            modifiedPubKey = this.ec.keyFromPublic({\n              x: X,\n              y: Y\n            }).getPublic().add(this.ec.keyFromPublic({\n              x: nonceResult.pubNonce.x,\n              y: nonceResult.pubNonce.y\n            }).getPublic());\n            pubNonce = nonceResult.pubNonce;\n          }\n        } else {\n          throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n        }\n      } else {\n        typeOfUser = \"v1\";\n        nonce = await this.getMetadata({\n          pub_key_X: X,\n          pub_key_Y: Y\n        });\n        modifiedPubKey = this.ec.keyFromPublic({\n          x: X,\n          y: Y\n        }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      }\n\n      X = modifiedPubKey.getX().toString(16);\n      Y = modifiedPubKey.getY().toString(16);\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getPublicAddress\", {\n        X,\n        Y,\n        address,\n        typeOfUser,\n        nonce: (_nonce = nonce) === null || _nonce === void 0 ? void 0 : _nonce.toString(16),\n        pubNonce\n      });\n      if (!isExtended) return address;\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce\n      };\n    }\n\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n\n  async getOrSetNonce(X, Y, privKey) {\n    let getOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let data;\n    const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey);\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: {\n          data: msg\n        }\n      };\n    }\n\n    return post(`${this.metadataHost}/get_or_set_nonce`, data, undefined, {\n      useAPIKey: true\n    });\n  }\n\n  async getNonce(X, Y, privKey) {\n    return this.getOrSetNonce(X, Y, privKey, true);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey, nonce) {\n    const privKeyBN = new BN(privKey, 16);\n    const nonceBN = new BN(nonce, 16);\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString(\"hex\");\n  }\n\n}\n\nexport { GetOrSetNonceError, Torus as default, kCombinations, keccak256, keyAssign, keyLookup, thresholdSame, waitKeyLookup };","map":{"version":3,"mappings":"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","names":["log","loglevel","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","Error","constructor","_ref","errors","responses","predicate","_defineProperty","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","GetOrSetNonceError","kCombinations","s","k","set","from","_","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","JsonStringify","keyLookup","endpoints","verifier","verifierId","lookupPromises","post","generateJsonRPCObject","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","initialPoint","Math","floor","random","signedData","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","acceptedErrorMsgs","includes","keccak256","a","hash","createKeccakHash","update","digest","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","arguments","ec","EC","enableLogging","v","enableAll","setAPIKey","apiKey","setEmbedHost","embedHost","isGetOrSetNonceError","getUserTypeAndAddress","doesKeyAssign","isNewKey","finalKeyResult","assignResult","pub_key_X","pub_key_Y","keys","nonceResult","nonce","modifiedPubKey","getOrSetNonce","BN","typeOfUser","keyFromPublic","y","getPublic","add","keyFromPrivate","pubNonce","finalX","getX","finalY","getY","address","generateAddressFromPubKey","upgraded","setCustomKey","_ref2","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","retrieveShares","indexes","verifierParams","idToken","extraParams","promiseArr","get","tmpKey","generatePrivate","pubKey","tokenCommitment","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndexes","currentShareResponse","sort","b","Index","cmp","firstKey","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","decrypt","ciphertext","Share","padStart","debug","sharesResolved","all","decryptedShares","curr","value","allCombis","privateKey","currentCombi","currentCombiShares","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","nodeIndex","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","info","ethAddressLower","toChecksumAddress","publicKeyX","publicKeyY","getPublicAddress","_ref3","isExtended","_nonce","getOnly","getPostboxKeyFrom1OutOf1","privKeyBN","nonceBN"],"sources":["../src/loglevel.ts","../src/some.ts","../src/utils.ts","../src/torus.ts"],"sourcesContent":[null,null,null,null]},"metadata":{},"sourceType":"module"}