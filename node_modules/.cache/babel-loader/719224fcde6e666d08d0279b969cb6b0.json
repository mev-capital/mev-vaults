{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getBalance } from '../utils/erc20';\nimport { BIG_ZERO, daiAddress, usdcAddress, usdtAddress, bscUsdtAddress, busdAddress, plgUsdtAddress } from '../utils/formatbalance';\nimport { log } from '../utils/logger';\nimport { isBSC, isETH, isPLG } from '../utils/zunami';\nexport const useUserBalances = () => {\n  _s();\n\n  const [balance, setbalance] = useState([BIG_ZERO, BIG_ZERO, BIG_ZERO, BIG_ZERO]);\n  const {\n    account,\n    ethereum,\n    chainId\n  } = useWallet();\n  useEffect(() => {\n    const fetchbalanceStables = async () => {\n      log(`fetchbalanceStables, chain ID: ${chainId}`);\n\n      if (isETH(chainId)) {\n        const balanceDai = await getBalance(ethereum, daiAddress, // @ts-ignore\n        account);\n        const balanceUsdc = await getBalance(ethereum, usdcAddress, // @ts-ignore\n        account);\n        const balanceUsdt = await getBalance(ethereum, usdtAddress, // @ts-ignore\n        account);\n        const data = [new BigNumber(balanceDai), new BigNumber(balanceUsdc), new BigNumber(balanceUsdt), BIG_ZERO]; // @ts-ignore\n\n        setbalance(data);\n      } else if (isBSC(chainId)) {\n        const usdtBalance = await getBalance(ethereum, bscUsdtAddress, // @ts-ignore\n        account);\n        const busdBalance = await getBalance(ethereum, busdAddress, // @ts-ignore\n        account);\n        setbalance([BIG_ZERO, BIG_ZERO, new BigNumber(usdtBalance), new BigNumber(busdBalance)]);\n      } else if (isPLG(chainId)) {\n        const balanceUsdt = await getBalance(ethereum, plgUsdtAddress, // @ts-ignore\n        account);\n        const data = [BIG_ZERO, BIG_ZERO, new BigNumber(balanceUsdt), BIG_ZERO]; // @ts-ignore\n\n        setbalance(data);\n      }\n    };\n\n    if (account) {\n      fetchbalanceStables();\n    }\n\n    let refreshInterval = setInterval(fetchbalanceStables, 60000);\n    return () => clearInterval(refreshInterval);\n  }, [account, ethereum, chainId]);\n  return balance;\n};\n\n_s(useUserBalances, \"uhkehHwRdmGU9Y0Qhjxeh2sidDk=\", false, function () {\n  return [useWallet];\n});","map":{"version":3,"names":["useEffect","useState","BigNumber","useWallet","getBalance","BIG_ZERO","daiAddress","usdcAddress","usdtAddress","bscUsdtAddress","busdAddress","plgUsdtAddress","log","isBSC","isETH","isPLG","useUserBalances","balance","setbalance","account","ethereum","chainId","fetchbalanceStables","balanceDai","balanceUsdc","balanceUsdt","data","usdtBalance","busdBalance","refreshInterval","setInterval","clearInterval"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/useUserBalances.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getBalance } from '../utils/erc20';\nimport {\n    BIG_ZERO,\n    daiAddress,\n    usdcAddress,\n    usdtAddress,\n    bscUsdtAddress,\n    busdAddress,\n    plgUsdtAddress,\n} from '../utils/formatbalance';\nimport { log } from '../utils/logger';\nimport { isBSC, isETH, isPLG } from '../utils/zunami';\n\nexport const useUserBalances = () => {\n    const [balance, setbalance] = useState([BIG_ZERO, BIG_ZERO, BIG_ZERO, BIG_ZERO]);\n    const { account, ethereum, chainId } = useWallet();\n\n    useEffect(() => {\n        const fetchbalanceStables = async () => {\n            log(`fetchbalanceStables, chain ID: ${chainId}`);\n            if (isETH(chainId)) {\n                const balanceDai = await getBalance(\n                    ethereum,\n                    daiAddress,\n                    // @ts-ignore\n                    account\n                );\n                const balanceUsdc = await getBalance(\n                    ethereum,\n                    usdcAddress,\n                    // @ts-ignore\n                    account\n                );\n                const balanceUsdt = await getBalance(\n                    ethereum,\n                    usdtAddress,\n                    // @ts-ignore\n                    account\n                );\n                const data = [\n                    new BigNumber(balanceDai),\n                    new BigNumber(balanceUsdc),\n                    new BigNumber(balanceUsdt),\n                    BIG_ZERO,\n                ];\n                // @ts-ignore\n                setbalance(data);\n            } else if (isBSC(chainId)) {\n                const usdtBalance = await getBalance(\n                    ethereum,\n                    bscUsdtAddress,\n                    // @ts-ignore\n                    account\n                );\n\n                const busdBalance = await getBalance(\n                    ethereum,\n                    busdAddress,\n                    // @ts-ignore\n                    account\n                );\n\n                setbalance([\n                    BIG_ZERO,\n                    BIG_ZERO,\n                    new BigNumber(usdtBalance),\n                    new BigNumber(busdBalance),\n                ]);\n            } else if (isPLG(chainId)) {\n                const balanceUsdt = await getBalance(\n                    ethereum,\n                    plgUsdtAddress,\n                    // @ts-ignore\n                    account\n                );\n                const data = [\n                    BIG_ZERO,\n                    BIG_ZERO,\n                    new BigNumber(balanceUsdt),\n                    BIG_ZERO,\n                ];\n                // @ts-ignore\n                setbalance(data);\n            }\n        };\n\n        if (account) {\n            fetchbalanceStables();\n        }\n        let refreshInterval = setInterval(fetchbalanceStables, 60000);\n        return () => clearInterval(refreshInterval);\n    }, [account, ethereum, chainId]);\n\n    return balance;\n};\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SACIC,QADJ,EAEIC,UAFJ,EAGIC,WAHJ,EAIIC,WAJJ,EAKIC,cALJ,EAMIC,WANJ,EAOIC,cAPJ,QAQO,wBARP;AASA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,KAAvB,QAAoC,iBAApC;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;EAAA;;EACjC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,CAACI,QAAD,EAAWA,QAAX,EAAqBA,QAArB,EAA+BA,QAA/B,CAAD,CAAtC;EACA,MAAM;IAAEc,OAAF;IAAWC,QAAX;IAAqBC;EAArB,IAAiClB,SAAS,EAAhD;EAEAH,SAAS,CAAC,MAAM;IACZ,MAAMsB,mBAAmB,GAAG,YAAY;MACpCV,GAAG,CAAE,kCAAiCS,OAAQ,EAA3C,CAAH;;MACA,IAAIP,KAAK,CAACO,OAAD,CAAT,EAAoB;QAChB,MAAME,UAAU,GAAG,MAAMnB,UAAU,CAC/BgB,QAD+B,EAE/Bd,UAF+B,EAG/B;QACAa,OAJ+B,CAAnC;QAMA,MAAMK,WAAW,GAAG,MAAMpB,UAAU,CAChCgB,QADgC,EAEhCb,WAFgC,EAGhC;QACAY,OAJgC,CAApC;QAMA,MAAMM,WAAW,GAAG,MAAMrB,UAAU,CAChCgB,QADgC,EAEhCZ,WAFgC,EAGhC;QACAW,OAJgC,CAApC;QAMA,MAAMO,IAAI,GAAG,CACT,IAAIxB,SAAJ,CAAcqB,UAAd,CADS,EAET,IAAIrB,SAAJ,CAAcsB,WAAd,CAFS,EAGT,IAAItB,SAAJ,CAAcuB,WAAd,CAHS,EAITpB,QAJS,CAAb,CAnBgB,CAyBhB;;QACAa,UAAU,CAACQ,IAAD,CAAV;MACH,CA3BD,MA2BO,IAAIb,KAAK,CAACQ,OAAD,CAAT,EAAoB;QACvB,MAAMM,WAAW,GAAG,MAAMvB,UAAU,CAChCgB,QADgC,EAEhCX,cAFgC,EAGhC;QACAU,OAJgC,CAApC;QAOA,MAAMS,WAAW,GAAG,MAAMxB,UAAU,CAChCgB,QADgC,EAEhCV,WAFgC,EAGhC;QACAS,OAJgC,CAApC;QAOAD,UAAU,CAAC,CACPb,QADO,EAEPA,QAFO,EAGP,IAAIH,SAAJ,CAAcyB,WAAd,CAHO,EAIP,IAAIzB,SAAJ,CAAc0B,WAAd,CAJO,CAAD,CAAV;MAMH,CArBM,MAqBA,IAAIb,KAAK,CAACM,OAAD,CAAT,EAAoB;QACvB,MAAMI,WAAW,GAAG,MAAMrB,UAAU,CAChCgB,QADgC,EAEhCT,cAFgC,EAGhC;QACAQ,OAJgC,CAApC;QAMA,MAAMO,IAAI,GAAG,CACTrB,QADS,EAETA,QAFS,EAGT,IAAIH,SAAJ,CAAcuB,WAAd,CAHS,EAITpB,QAJS,CAAb,CAPuB,CAavB;;QACAa,UAAU,CAACQ,IAAD,CAAV;MACH;IACJ,CAlED;;IAoEA,IAAIP,OAAJ,EAAa;MACTG,mBAAmB;IACtB;;IACD,IAAIO,eAAe,GAAGC,WAAW,CAACR,mBAAD,EAAsB,KAAtB,CAAjC;IACA,OAAO,MAAMS,aAAa,CAACF,eAAD,CAA1B;EACH,CA1EQ,EA0EN,CAACV,OAAD,EAAUC,QAAV,EAAoBC,OAApB,CA1EM,CAAT;EA4EA,OAAOJ,OAAP;AACH,CAjFM;;GAAMD,e;UAE8Bb,S"},"metadata":{},"sourceType":"module"}