{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport ethAbi from '../../actions/abi/Zunami.json';\nimport bscAbi from '../../actions/abi/zunami_bsc.json';\nimport busdAbi from '../../actions/abi/zunami_busd.json';\nimport polygonAbi from '../../actions/abi/zunami_polygon.json';\nimport uzdAbi from '../../actions/abi/zunami_uzd.json';\nimport WETHAbi from './abi/weth.json';\nimport { contractAddresses, SUBTRACT_GAS_LIMIT } from './constants.js';\nimport * as Types from './types.js';\nexport class Contracts {\n  constructor(provider, networkId, web3, options) {\n    this.web3 = web3;\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.masterChef = new this.web3.eth.Contract(ethAbi);\n    this.ethMasterChef = new this.web3.eth.Contract(ethAbi);\n    this.bscMasterChef = new this.web3.eth.Contract(bscAbi);\n    this.busdContract = new this.web3.eth.Contract(busdAbi);\n    this.polygonContract = new this.web3.eth.Contract(polygonAbi);\n    this.uzdContract = new this.web3.eth.Contract(uzdAbi);\n    this.weth = new this.web3.eth.Contract(WETHAbi);\n    this.usdc = new this.web3.eth.Contract(WETHAbi);\n    this.setProvider(provider, networkId);\n    const defaultAccount = this.web3.eth.defaultAccount || window.localStorage.getItem('WALLET_ACCOUNT');\n    this.setDefaultAccount(defaultAccount);\n    this.masterChef.options.from = defaultAccount;\n    this.bscMasterChef.options.from = defaultAccount;\n    this.polygonContract.options.from = defaultAccount;\n    this.ethMasterChef.options.from = defaultAccount;\n    this.busdContract.options.from = defaultAccount;\n    this.uzdContract.options.from = defaultAccount;\n  }\n\n  setDefaultAccount(account) {\n    this.masterChef.options.from = account;\n  }\n\n  setProvider(provider, networkId) {\n    const setProviderParams = (contract, address) => {\n      contract.setProvider(provider);\n      contract.options.address = address;\n    };\n\n    if (networkId === 1) {\n      setProviderParams(this.masterChef, contractAddresses.zunami[1]);\n    }\n\n    setProviderParams(this.ethMasterChef, contractAddresses.zunami[1]);\n    setProviderParams(this.uzdContract, contractAddresses.uzd[1]);\n\n    if (networkId === 56) {\n      setProviderParams(this.bscMasterChef, contractAddresses.zunami[56]);\n      setProviderParams(this.busdContract, contractAddresses.busd[56]);\n    }\n\n    if (networkId === 137) {\n      setProviderParams(this.polygonContract, contractAddresses.zunami[137]);\n    }\n  }\n\n  async callContractFunction(method, options) {\n    const {\n      confirmations,\n      confirmationType,\n      autoGasMultiplier,\n      ...txOptions\n    } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          // console.log('estimating gas')\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const {\n            from,\n            value\n          } = options;\n          const to = method._parent._address;\n          error.transactionData = {\n            from,\n            value,\n            data,\n            to\n          };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return {\n          gasEstimate,\n          g\n        };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2\n    };\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        promi.on('transactionHash', txHash => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.RESOLVED;\n            resolve(txHash);\n\n            if (t !== Types.ConfirmationType.Both) {\n              const anyPromi = promi;\n              anyPromi.off();\n            }\n          }\n        });\n      });\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if ((t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED) && confirmationOutcome === OUTCOMES.INITIAL) {\n            confirmationOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        const desiredConf = confirmations || this.defaultConfirmations;\n\n        if (desiredConf) {\n          promi.on('confirmation', (confNumber, receipt) => {\n            if (confNumber >= desiredConf) {\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\n                confirmationOutcome = OUTCOMES.RESOLVED;\n                resolve(receipt);\n                const anyPromi = promi;\n                anyPromi.off();\n              }\n            }\n          });\n        } else {\n          promi.on('receipt', receipt => {\n            confirmationOutcome = OUTCOMES.RESOLVED;\n            resolve(receipt);\n            const anyPromi = promi;\n            anyPromi.off();\n          });\n        }\n      });\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n\n      if (this.notifier) {\n        this.notifier.hash(transactionHash);\n      }\n\n      return {\n        transactionHash\n      };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n\n    if (this.notifier) {\n      this.notifier.hash(transactionHash);\n    }\n\n    return {\n      transactionHash,\n      confirmation: confirmationPromise\n    };\n  }\n\n  async callConstantContractFunction(method, options) {\n    const m2 = method;\n    const {\n      blockNumber,\n      ...txOptions\n    } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n}","map":{"version":3,"names":["BigNumber","ethAbi","bscAbi","busdAbi","polygonAbi","uzdAbi","WETHAbi","contractAddresses","SUBTRACT_GAS_LIMIT","Types","Contracts","constructor","provider","networkId","web3","options","defaultConfirmations","autoGasMultiplier","confirmationType","ConfirmationType","Confirmed","defaultGas","defaultGasPrice","masterChef","eth","Contract","ethMasterChef","bscMasterChef","busdContract","polygonContract","uzdContract","weth","usdc","setProvider","defaultAccount","window","localStorage","getItem","setDefaultAccount","from","account","setProviderParams","contract","address","zunami","uzd","busd","callContractFunction","method","confirmations","txOptions","blockGasLimit","setGasLimit","gasPrice","Simulate","gas","gasEstimate","estimateGas","error","data","encodeABI","value","to","_parent","_address","transactionData","multiplier","totalGas","Math","floor","g","toFixed","promi","send","OUTCOMES","INITIAL","RESOLVED","REJECTED","hashOutcome","confirmationOutcome","t","undefined","Object","values","includes","Error","hashPromise","confirmationPromise","Hash","Both","Promise","resolve","reject","on","anyPromi","off","txHash","desiredConf","confNumber","receipt","transactionHash","notifier","hash","confirmation","callConstantContractFunction","m2","blockNumber","call","block","getBlock","gasLimit"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/sushi/lib/contracts.js"],"sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\n\nimport ethAbi from '../../actions/abi/Zunami.json';\nimport bscAbi from '../../actions/abi/zunami_bsc.json';\nimport busdAbi from '../../actions/abi/zunami_busd.json';\nimport polygonAbi from '../../actions/abi/zunami_polygon.json';\nimport uzdAbi from '../../actions/abi/zunami_uzd.json';\n\nimport WETHAbi from './abi/weth.json';\nimport { contractAddresses, SUBTRACT_GAS_LIMIT } from './constants.js';\nimport * as Types from './types.js';\n\nexport class Contracts {\n    constructor(provider, networkId, web3, options) {\n        this.web3 = web3;\n        this.defaultConfirmations = options.defaultConfirmations;\n        this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n        this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n        this.defaultGas = options.defaultGas;\n        this.defaultGasPrice = options.defaultGasPrice;\n\n        this.masterChef = new this.web3.eth.Contract(ethAbi);\n\n        this.ethMasterChef = new this.web3.eth.Contract(ethAbi);\n        this.bscMasterChef = new this.web3.eth.Contract(bscAbi);\n        this.busdContract = new this.web3.eth.Contract(busdAbi);\n        this.polygonContract = new this.web3.eth.Contract(polygonAbi);\n        this.uzdContract = new this.web3.eth.Contract(uzdAbi);\n\n        this.weth = new this.web3.eth.Contract(WETHAbi);\n        this.usdc = new this.web3.eth.Contract(WETHAbi);\n        this.setProvider(provider, networkId);\n\n        const defaultAccount =\n            this.web3.eth.defaultAccount || window.localStorage.getItem('WALLET_ACCOUNT');\n\n        this.setDefaultAccount(defaultAccount);\n        this.masterChef.options.from = defaultAccount;\n        this.bscMasterChef.options.from = defaultAccount;\n        this.polygonContract.options.from = defaultAccount;\n        this.ethMasterChef.options.from = defaultAccount;\n        this.busdContract.options.from = defaultAccount;\n        this.uzdContract.options.from = defaultAccount;\n    }\n\n    setDefaultAccount(account) {\n        this.masterChef.options.from = account;\n    }\n\n    setProvider(provider, networkId) {\n        const setProviderParams = (contract, address) => {\n            contract.setProvider(provider);\n            contract.options.address = address;\n        };\n\n        if (networkId === 1) {\n            setProviderParams(this.masterChef, contractAddresses.zunami[1]);\n        }\n\n        setProviderParams(this.ethMasterChef, contractAddresses.zunami[1]);\n        setProviderParams(this.uzdContract, contractAddresses.uzd[1]);\n\n        if (networkId === 56) {\n            setProviderParams(this.bscMasterChef, contractAddresses.zunami[56]);\n            setProviderParams(this.busdContract, contractAddresses.busd[56]);\n        }\n\n        if (networkId === 137) {\n            setProviderParams(this.polygonContract, contractAddresses.zunami[137]);\n        }\n    }\n\n    async callContractFunction(method, options) {\n        const { confirmations, confirmationType, autoGasMultiplier, ...txOptions } = options;\n\n        if (!this.blockGasLimit) {\n            await this.setGasLimit();\n        }\n\n        if (!txOptions.gasPrice && this.defaultGasPrice) {\n            txOptions.gasPrice = this.defaultGasPrice;\n        }\n\n        if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n            let gasEstimate;\n            if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n                txOptions.gas = this.defaultGas;\n            } else {\n                try {\n                    // console.log('estimating gas')\n                    gasEstimate = await method.estimateGas(txOptions);\n                } catch (error) {\n                    const data = method.encodeABI();\n                    const { from, value } = options;\n                    const to = method._parent._address;\n                    error.transactionData = { from, value, data, to };\n                    throw error;\n                }\n\n                const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n                const totalGas = Math.floor(gasEstimate * multiplier);\n                txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n            }\n\n            if (confirmationType === Types.ConfirmationType.Simulate) {\n                let g = txOptions.gas;\n                return { gasEstimate, g };\n            }\n        }\n\n        if (txOptions.value) {\n            txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n        } else {\n            txOptions.value = '0';\n        }\n\n        const promi = method.send(txOptions);\n\n        const OUTCOMES = {\n            INITIAL: 0,\n            RESOLVED: 1,\n            REJECTED: 2,\n        };\n\n        let hashOutcome = OUTCOMES.INITIAL;\n        let confirmationOutcome = OUTCOMES.INITIAL;\n\n        const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n        if (!Object.values(Types.ConfirmationType).includes(t)) {\n            throw new Error(`Invalid confirmation type: ${t}`);\n        }\n\n        let hashPromise;\n        let confirmationPromise;\n\n        if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n            hashPromise = new Promise((resolve, reject) => {\n                promi.on('error', (error) => {\n                    if (hashOutcome === OUTCOMES.INITIAL) {\n                        hashOutcome = OUTCOMES.REJECTED;\n                        reject(error);\n                        const anyPromi = promi;\n                        anyPromi.off();\n                    }\n                });\n\n                promi.on('transactionHash', (txHash) => {\n                    if (hashOutcome === OUTCOMES.INITIAL) {\n                        hashOutcome = OUTCOMES.RESOLVED;\n                        resolve(txHash);\n                        if (t !== Types.ConfirmationType.Both) {\n                            const anyPromi = promi;\n                            anyPromi.off();\n                        }\n                    }\n                });\n            });\n        }\n\n        if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n            confirmationPromise = new Promise((resolve, reject) => {\n                promi.on('error', (error) => {\n                    if (\n                        (t === Types.ConfirmationType.Confirmed ||\n                            hashOutcome === OUTCOMES.RESOLVED) &&\n                        confirmationOutcome === OUTCOMES.INITIAL\n                    ) {\n                        confirmationOutcome = OUTCOMES.REJECTED;\n                        reject(error);\n                        const anyPromi = promi;\n                        anyPromi.off();\n                    }\n                });\n\n                const desiredConf = confirmations || this.defaultConfirmations;\n                if (desiredConf) {\n                    promi.on('confirmation', (confNumber, receipt) => {\n                        if (confNumber >= desiredConf) {\n                            if (confirmationOutcome === OUTCOMES.INITIAL) {\n                                confirmationOutcome = OUTCOMES.RESOLVED;\n                                resolve(receipt);\n                                const anyPromi = promi;\n                                anyPromi.off();\n                            }\n                        }\n                    });\n                } else {\n                    promi.on('receipt', (receipt) => {\n                        confirmationOutcome = OUTCOMES.RESOLVED;\n                        resolve(receipt);\n                        const anyPromi = promi;\n                        anyPromi.off();\n                    });\n                }\n            });\n        }\n\n        if (t === Types.ConfirmationType.Hash) {\n            const transactionHash = await hashPromise;\n            if (this.notifier) {\n                this.notifier.hash(transactionHash);\n            }\n            return { transactionHash };\n        }\n\n        if (t === Types.ConfirmationType.Confirmed) {\n            return confirmationPromise;\n        }\n\n        const transactionHash = await hashPromise;\n        if (this.notifier) {\n            this.notifier.hash(transactionHash);\n        }\n        return {\n            transactionHash,\n            confirmation: confirmationPromise,\n        };\n    }\n\n    async callConstantContractFunction(method, options) {\n        const m2 = method;\n        const { blockNumber, ...txOptions } = options;\n        return m2.call(txOptions, blockNumber);\n    }\n\n    async setGasLimit() {\n        const block = await this.web3.eth.getBlock('latest');\n        this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}