{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport useSushi from './useSushi';\nimport { BIG_TEN, DAI_DECIMALS } from '../utils/formatbalance';\nimport { log } from '../utils/logger';\nimport { isBSC, isETH, isPLG } from '../utils/zunami';\n\nconst usePendingOperations = () => {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useWallet();\n  const sushi = useSushi();\n  const [pendingDeposit, setPendingDeposit] = useState(new BigNumber(0));\n  const [pendingWithdraw, setPendingWithdraw] = useState(new BigNumber(0));\n  useEffect(() => {\n    if (!account || !chainId || !sushi) {\n      return;\n    }\n\n    const getPendingSums = async () => {\n      if (isETH(chainId)) {\n        const ethPendingDeposits = await sushi.contracts.masterChef.methods.pendingDeposits(account).call();\n        const result = [new BigNumber(ethPendingDeposits[0].toString()), new BigNumber(ethPendingDeposits[1].toString()), new BigNumber(ethPendingDeposits[2].toString())];\n\n        if (result[0].toFixed()) {\n          result[0] = result[0].dividedBy(BIG_TEN.pow(DAI_DECIMALS));\n        }\n\n        const totalPendingDepositSum = result[0].plus(result[1]).plus(result[2]);\n        log(`ETH pending deposits: ${totalPendingDepositSum.toString()}`);\n        setPendingDeposit(totalPendingDepositSum);\n        const ethPendingWithdrawals = await sushi.contracts.masterChef.methods.pendingWithdrawals(account).call();\n        setPendingWithdraw(new BigNumber(ethPendingWithdrawals[0].toString()));\n        log(`ETH pending withdrawals: ${ethPendingWithdrawals[0].toString()}`);\n      } else if (isBSC(chainId)) {\n        const bscPendingDeposits = await sushi.bscContracts.bscMasterChef.methods.pendingDeposits(account).call();\n        const bscPendingWithdrawals = await sushi.bscContracts.bscMasterChef.methods.pendingWithdrawals(account).call();\n        setPendingDeposit(new BigNumber(bscPendingDeposits.toString()));\n        setPendingWithdraw(new BigNumber(bscPendingWithdrawals.toString()));\n        log(`BSC pending deposits: ${bscPendingDeposits.toString()}`);\n        log(`BSC pending withdrawals: ${bscPendingWithdrawals.toString()}`);\n      } else if (isPLG(chainId)) {\n        const plgPendingDeposits = await sushi.plgContracts.polygonContract.methods.pendingDeposits(account).call();\n        const plgPendingWithdrawals = await sushi.plgContracts.polygonContract.methods.pendingWithdrawals(account).call();\n        setPendingDeposit(new BigNumber(plgPendingDeposits.toString()));\n        setPendingWithdraw(new BigNumber(plgPendingWithdrawals.toString()));\n        log(`PLG pending deposits: ${plgPendingDeposits.toString()}`);\n        log(`PLG pending withdrawals: ${plgPendingWithdrawals.toString()}`);\n      }\n    };\n\n    getPendingSums();\n  }, [account, chainId, sushi]);\n  const operations = {\n    deposit: pendingDeposit,\n    withdraw: pendingWithdraw\n  };\n  return operations;\n};\n\n_s(usePendingOperations, \"sIhi8QvzIWMMKuOU8Q3qpD2LNk4=\", false, function () {\n  return [useWallet, useSushi];\n});\n\nexport default usePendingOperations;","map":{"version":3,"names":["BigNumber","useEffect","useState","useWallet","useSushi","BIG_TEN","DAI_DECIMALS","log","isBSC","isETH","isPLG","usePendingOperations","chainId","account","sushi","pendingDeposit","setPendingDeposit","pendingWithdraw","setPendingWithdraw","getPendingSums","ethPendingDeposits","contracts","masterChef","methods","pendingDeposits","call","result","toString","toFixed","dividedBy","pow","totalPendingDepositSum","plus","ethPendingWithdrawals","pendingWithdrawals","bscPendingDeposits","bscContracts","bscMasterChef","bscPendingWithdrawals","plgPendingDeposits","plgContracts","polygonContract","plgPendingWithdrawals","operations","deposit","withdraw"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/src/hooks/usePendingOperations.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport useSushi from './useSushi';\nimport { BIG_TEN, DAI_DECIMALS } from '../utils/formatbalance';\nimport { log } from '../utils/logger';\nimport { isBSC, isETH, isPLG } from '../utils/zunami';\n\nexport interface PendingOperations {\n    deposit: BigNumber;\n    withdraw: BigNumber;\n}\n\nconst usePendingOperations = () => {\n    const { chainId, account } = useWallet();\n    const sushi = useSushi();\n    const [pendingDeposit, setPendingDeposit] = useState(new BigNumber(0));\n    const [pendingWithdraw, setPendingWithdraw] = useState(new BigNumber(0));\n\n    useEffect(() => {\n        if (!account || !chainId || !sushi) {\n            return;\n        }\n\n        const getPendingSums = async () => {\n            if (isETH(chainId)) {\n                const ethPendingDeposits = await sushi.contracts.masterChef.methods\n                    .pendingDeposits(account)\n                    .call();\n\n                const result = [\n                    new BigNumber(ethPendingDeposits[0].toString()),\n                    new BigNumber(ethPendingDeposits[1].toString()),\n                    new BigNumber(ethPendingDeposits[2].toString()),\n                ];\n\n                if (result[0].toFixed()) {\n                    result[0] = result[0].dividedBy(BIG_TEN.pow(DAI_DECIMALS));\n                }\n\n                const totalPendingDepositSum = result[0].plus(result[1]).plus(result[2]);\n                log(`ETH pending deposits: ${totalPendingDepositSum.toString()}`);\n\n                setPendingDeposit(totalPendingDepositSum);\n\n                const ethPendingWithdrawals = await sushi.contracts.masterChef.methods\n                    .pendingWithdrawals(account)\n                    .call();\n\n                setPendingWithdraw(new BigNumber(ethPendingWithdrawals[0].toString()));\n                log(`ETH pending withdrawals: ${ethPendingWithdrawals[0].toString()}`);\n            } else if (isBSC(chainId)) {\n                const bscPendingDeposits = await sushi.bscContracts.bscMasterChef.methods\n                    .pendingDeposits(account)\n                    .call();\n                const bscPendingWithdrawals = await sushi.bscContracts.bscMasterChef.methods\n                    .pendingWithdrawals(account)\n                    .call();\n\n                setPendingDeposit(new BigNumber(bscPendingDeposits.toString()));\n                setPendingWithdraw(new BigNumber(bscPendingWithdrawals.toString()));\n\n                log(`BSC pending deposits: ${bscPendingDeposits.toString()}`);\n                log(`BSC pending withdrawals: ${bscPendingWithdrawals.toString()}`);\n            } else if (isPLG(chainId)) {\n                const plgPendingDeposits = await sushi.plgContracts.polygonContract.methods\n                    .pendingDeposits(account)\n                    .call();\n                const plgPendingWithdrawals = await sushi.plgContracts.polygonContract.methods\n                    .pendingWithdrawals(account)\n                    .call();\n\n                setPendingDeposit(new BigNumber(plgPendingDeposits.toString()));\n                setPendingWithdraw(new BigNumber(plgPendingWithdrawals.toString()));\n\n                log(`PLG pending deposits: ${plgPendingDeposits.toString()}`);\n                log(`PLG pending withdrawals: ${plgPendingWithdrawals.toString()}`);\n            }\n        };\n\n        getPendingSums();\n    }, [account, chainId, sushi]);\n\n    const operations: PendingOperations = {\n        deposit: pendingDeposit,\n        withdraw: pendingWithdraw,\n    };\n\n    return operations;\n};\n\nexport default usePendingOperations;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}