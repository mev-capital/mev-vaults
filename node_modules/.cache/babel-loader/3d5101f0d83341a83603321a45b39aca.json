{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n};\n\nvar PortisConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(PortisConnector, _AbstractConnector);\n\n  function PortisConnector(_ref) {\n    var _this;\n\n    var dAppId = _ref.dAppId,\n        networks = _ref.networks,\n        _ref$config = _ref.config,\n        config = _ref$config === void 0 ? {} : _ref$config;\n    var chainIds = networks.map(function (n) {\n      return typeof n === 'number' ? n : Number(n.chainId);\n    });\n    !chainIds.every(function (c) {\n      return !!chainIdToNetwork[c];\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"One or more unsupported networks \" + networks) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: chainIds\n    }) || this;\n    _this.dAppId = dAppId;\n    _this.networks = networks;\n    _this.config = config;\n    _this.handleOnLogout = _this.handleOnLogout.bind(_assertThisInitialized(_this));\n    _this.handleOnActiveWalletChanged = _this.handleOnActiveWalletChanged.bind(_assertThisInitialized(_this));\n    _this.handleOnError = _this.handleOnError.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = PortisConnector.prototype;\n\n  _proto.handleOnLogout = function handleOnLogout() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'onLogout' event\");\n    }\n\n    this.emitDeactivate();\n  };\n\n  _proto.handleOnActiveWalletChanged = function handleOnActiveWalletChanged(account) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account);\n    }\n\n    this.emitUpdate({\n      account: account\n    });\n  };\n\n  _proto.handleOnError = function handleOnError(error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'onError' event\");\n    }\n\n    this.emitError(error);\n  };\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        _this3.portis.onLogout(_this3.handleOnLogout);\n\n        _this3.portis.onActiveWalletChanged(_this3.handleOnActiveWalletChanged);\n\n        _this3.portis.onError(_this3.handleOnError);\n\n        return Promise.resolve(_this3.portis.provider.enable().then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.portis.provider,\n            account: account\n          };\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.portis) {\n          return Promise.resolve(import('@portis/web3').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (Portis) {\n            _this3.portis = new Portis(_this3.dAppId, typeof _this3.networks[0] === 'number' ? chainIdToNetwork[_this3.networks[0]] : _this3.networks[0], _this3.config);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.portis.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.portis.provider.send('eth_chainId'));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.portis.provider.send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.portis.onLogout(function () {});\n    this.portis.onActiveWalletChanged(function () {});\n    this.portis.onError(function () {});\n  };\n\n  _proto.changeNetwork = function changeNetwork(newNetwork, isGasRelayEnabled) {\n    try {\n      var _this11 = this;\n\n      if (typeof newNetwork === 'number') {\n        !!!chainIdToNetwork[newNetwork] ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Invalid chainId \" + newNetwork) : invariant(false) : void 0;\n\n        _this11.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled);\n\n        _this11.emitUpdate({\n          chainId: newNetwork\n        });\n      } else {\n        _this11.portis.changeNetwork(newNetwork, isGasRelayEnabled);\n\n        _this11.emitUpdate({\n          chainId: Number(newNetwork.chainId)\n        });\n      }\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this13 = this;\n\n      return Promise.resolve(_this13.portis.logout()).then(function () {\n        _this13.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return PortisConnector;\n}(AbstractConnector);\n\nexport { PortisConnector };","map":{"version":3,"mappings":"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","names":["chainIdToNetwork","PortisConnector","_inheritsLoose","dAppId","networks","config","_ref$config","chainIds","map","n","Number","chainId","every","c","_this","supportedChainIds","handleOnLogout","bind","handleOnActiveWalletChanged","handleOnError","_proto","console","log","emitDeactivate","account","emitUpdate","error","emitError","activate","_this3","portis","onLogout","onActiveWalletChanged","onError","provider","enable","then","accounts","m","Portis","getProvider","_this5","getChainId","_this7","send","getAccount","_this9","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","_this11","close","_this13","logout","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}