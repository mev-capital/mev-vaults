{"ast":null,"code":"const EventEmitter = require('events');\n\nclass EthereumProvider extends EventEmitter {\n  constructor(connection) {\n    super();\n    this.connected = false;\n    this.nextId = 0;\n    this.promises = {};\n    this.subscriptions = [];\n    this.connection = connection;\n    this.connection.on('connect', () => this.checkConnection());\n    this.connection.on('close', () => this.emit('close'));\n    this.connection.on('payload', payload => {\n      const {\n        id,\n        method,\n        error,\n        result\n      } = payload;\n\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) {\n          // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result);\n          delete this.promises[id];\n        }\n      } else if (method && method.indexOf('_subscription') > -1) {\n        // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result);\n        this.emit(method, payload.params); // Latest EIP-1193\n\n        this.emit('data', payload); // Backwards Compatibility\n      }\n    });\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription();\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription();\n      }\n    });\n  }\n\n  async checkConnection() {\n    try {\n      this.emit('connect', await this._send('net_version'));\n      this.connected = true;\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription();\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription();\n    } catch (e) {\n      this.connected = false;\n    }\n  }\n\n  async startNetworkSubscription() {\n    this.attemptedNetworkSubscription = true;\n\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged');\n      this.on(networkChanged, netId => this.emit('networkChanged', netId));\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e);\n    }\n  }\n\n  async startAccountsSubscription() {\n    this.attemptedAccountsSubscription = true;\n\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged');\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts));\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e);\n    }\n  }\n\n  enable() {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts;\n          this.coinbase = accounts[0];\n          this.emit('enable');\n          resolve(accounts);\n        } else {\n          const err = new Error('User Denied Full Provider');\n          err.code = 4001;\n          reject(err);\n        }\n      }).catch(reject);\n    });\n  }\n\n  _send(method) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.');\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.');\n    const payload = {\n      jsonrpc: '2.0',\n      id: this.nextId++,\n      method,\n      params\n    };\n    const promise = new Promise((resolve, reject) => {\n      this.promises[payload.id] = {\n        resolve,\n        reject\n      };\n    });\n    this.connection.send(payload);\n    return promise;\n  }\n\n  send() {\n    // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...arguments);\n  }\n\n  _sendBatch(requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)));\n  }\n\n  subscribe(type, method) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id);\n      return id;\n    });\n  }\n\n  unsubscribe(type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id); // Remove subscription\n\n        this.removeAllListeners(id); // Remove listeners\n\n        return success;\n      }\n    });\n  }\n\n  sendAsync(payload, cb) {\n    // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'));\n    if (!payload) return cb(new Error('Invalid Payload')); // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb);\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, {\n          id: payload.id,\n          jsonrpc: payload.jsonrpc,\n          result\n        });\n      }).catch(err => {\n        cb(err);\n      });\n    }\n  }\n\n  sendAsyncBatch(payload, cb) {\n    return this._sendBatch(payload).then(results => {\n      let result = results.map((entry, index) => {\n        return {\n          id: payload[index].id,\n          jsonrpc: payload[index].jsonrpc,\n          result: entry\n        };\n      });\n      cb(null, result);\n    }).catch(err => {\n      cb(err);\n    });\n  }\n\n  isConnected() {\n    // Backwards Compatibility\n    return this.connected;\n  }\n\n  close() {\n    this.connection.close();\n    this.connected = false;\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`);\n    this.subscriptions.forEach(id => this.emit(id, error)); // Send Error objects to any open subscriptions\n\n    this.subscriptions = []; // Clear subscriptions\n  }\n\n}\n\nmodule.exports = EthereumProvider;","map":{"version":3,"names":["EventEmitter","require","EthereumProvider","constructor","connection","connected","nextId","promises","subscriptions","on","checkConnection","emit","payload","id","method","error","result","reject","resolve","indexOf","params","subscription","event","listener","attemptedNetworkSubscription","startNetworkSubscription","attemptedAccountsSubscription","startAccountsSubscription","_send","listenerCount","e","networkChanged","subscribe","netId","console","warn","accountsChanged","accounts","enable","Promise","then","length","coinbase","err","Error","code","catch","Array","jsonrpc","promise","send","_sendBatch","requests","all","map","type","push","unsubscribe","success","filter","_id","removeAllListeners","sendAsync","cb","sendAsyncBatch","results","entry","index","isConnected","close","forEach","module","exports"],"sources":["/home/bacarif/Documents/MEV CAPITAL/ZunamiUI/node_modules/ethereum-provider/index.js"],"sourcesContent":["const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}